<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ㅇㅇㅈ Blog</title>
    <link>https://sacultang.github.io/</link>
    
    <atom:link href="https://sacultang.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Thu, 28 Jul 2022 12:08:15 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>TypeScript Svg Import</title>
      <link>https://sacultang.github.io/2022/07/28/TS-SVG/</link>
      <guid>https://sacultang.github.io/2022/07/28/TS-SVG/</guid>
      <pubDate>Thu, 28 Jul 2022 11:55:21 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;React-TS-에서-SVG-Import-Error&quot;&gt;&lt;a href=&quot;#React-TS-에서-SVG-Import-Error&quot; class=&quot;headerlink&quot; title=&quot;React TS 에서 SVG Import Error&quot;&gt;&lt;/a&gt;Re</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="React-TS-에서-SVG-Import-Error"><a href="#React-TS-에서-SVG-Import-Error" class="headerlink" title="React TS 에서 SVG Import Error"></a>React TS 에서 SVG Import Error</h2><p>JS로 만든 react project를 TS로 변환 하는 과정에서<br>SVG 파일을 Import 하는데 에러가 발생 했다.</p><img src="/2022/07/28/TS-SVG/01.png" class=""><ol><li>src 디렉토리 안쪽에 <code>custom.d.ts</code>파일을 만들고, 아래와 같이 작성 해준다</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// custom.d.ts </span></span><br><span class="line"></span><br><span class="line">declare <span class="variable language_">module</span> <span class="string">&quot;*.svg&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">import</span> <span class="title class_">React</span> = <span class="built_in">require</span>(<span class="string">&quot;react&quot;</span>);</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">ReactComponent</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">React</span>.<span class="property">SVGProps</span>&lt;<span class="title class_">SVGSVGElement</span>&gt;&gt;;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">src</span>: string;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> src;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>tsconfig.json</code>에 <code>src/custom.d.ts</code> 를 추가로 작성 해 준다</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;include&quot;</span>: [<span class="string">&quot;src&quot;</span>, <span class="string">&quot;src/custom.d.ts&quot;</span>]</span><br></pre></td></tr></table></figure><ol start="3"><li>Import ~</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactComponent</span> <span class="keyword">as</span> <span class="title class_">DeleteIcon</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../../asset/delete.svg&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="SVG-아이콘에-onClick-Event-Type"><a href="#SVG-아이콘에-onClick-Event-Type" class="headerlink" title="SVG 아이콘에 onClick Event Type"></a>SVG 아이콘에 onClick Event Type</h2><img src="/2022/07/28/TS-SVG/02.png" class=""><p>생각 없이 SVG에 onClick 이벤트 타입으로 버튼 엘리먼트로 줬더니 에러가 떳다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">DeleteIcon</span></span><br><span class="line">  width=<span class="string">&quot;12px&quot;</span></span><br><span class="line">  onClick=&#123;<span class="function">(<span class="params">e: React.MouseEvent</span>) =&gt;</span> &#123;</span><br><span class="line">    e.<span class="title function_">stopPropagation</span>();</span><br><span class="line">    <span class="title function_">deleteTag</span>();</span><br><span class="line">  &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>엘리먼트 타입없이 그냥 MouseEvent만 타입으로 지정해주면 된다!</p>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/React/">React</category>
      
      
      <category domain="https://sacultang.github.io/tags/React/">React</category>
      
      
      <comments>https://sacultang.github.io/2022/07/28/TS-SVG/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JWT 로그인</title>
      <link>https://sacultang.github.io/2022/07/24/JWT-login/</link>
      <guid>https://sacultang.github.io/2022/07/24/JWT-login/</guid>
      <pubDate>Sun, 24 Jul 2022 11:28:46 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;JWT-로그인-방식&quot;&gt;&lt;a href=&quot;#JWT-로그인-방식&quot; class=&quot;headerlink&quot; title=&quot;JWT 로그인 방식&quot;&gt;&lt;/a&gt;JWT 로그인 방식&lt;/h1&gt;&lt;p&gt;서버에 로그인을 하면 토큰을 발급해주어&lt;br&gt;사용자가 서비스를 이용할때 이 토큰을 요청에 포함시켜 사용자를 인증한다.&lt;br&gt;근데 이 토큰엔 만료시간이 있다&lt;br&gt;이 프로젝트에서는 이 토큰의 만료시간이 15분이다&lt;br&gt;그래서 토큰이 만료되면 리프레시 토큰으로 다시 새로운 &lt;code&gt;access_token&lt;/code&gt;을 발급 받아야 한다  &lt;/p&gt;
&lt;p&gt;오잉…..&lt;/p&gt;
&lt;p&gt;&lt;code&gt;access_token&lt;/code&gt;이 만료되면.. 리프레시 토큰으로 새롭게 발급 받으라고!?&lt;/p&gt;
&lt;p&gt;일단 로그인할때 &lt;code&gt;response&lt;/code&gt; 받은 &lt;code&gt;access_token&lt;/code&gt;과 &lt;code&gt;refresh_token&lt;/code&gt;을 저장하자  &lt;/p&gt;
&lt;h3 id=&quot;시나리오-1&quot;&gt;&lt;a href=&quot;#시나리오-1&quot; class=&quot;headerlink&quot; title=&quot;시나리오 1.&quot;&gt;&lt;/a&gt;시나리오 1.&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;로그인 할 때 발급 받은 access_token은 리덕스에, refresh_token은 쿠키에 저장한다&lt;/li&gt;
&lt;li&gt;hoc를 이용해 access_token이 만료되면 새롭게 발급받고 토큰이 필요한 컴포넌트에 props로 넘겨준다&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;react-cookie라는 라이브러리를 통해 쿠키에 쉽게 저장 할 수 있었다  &lt;/p&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// settingSessions.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&quot;title class_&quot;&gt;Cookies&lt;/span&gt; &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;react-cookie&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; cookies = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Cookies&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 로그인 할때 받은 리프레시토큰을 인자로 받아 쿠키에 저장한다&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;setRefreshToken&lt;/span&gt; = (&lt;span class=&quot;params&quot;&gt;refreshToken&lt;/span&gt;) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; today = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Date&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; expireDate = today.&lt;span class=&quot;title function_&quot;&gt;setDate&lt;/span&gt;(today.&lt;span class=&quot;title function_&quot;&gt;getDate&lt;/span&gt;() + &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cookies.&lt;span class=&quot;title function_&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;refresh_token&amp;quot;&lt;/span&gt;, refreshToken, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;sameSite&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;strict&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;expires&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Date&lt;/span&gt;(expireDate),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 쿠키에 저장된 토큰을 가져온다&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;getCookieToken&lt;/span&gt; = (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cookies.&lt;span class=&quot;title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;refresh_token&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 쿠키에 저장된 토큰을 삭제한다&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;removeCookieToken&lt;/span&gt; = (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cookies.&lt;span class=&quot;title function_&quot;&gt;remove&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;refresh_token&amp;quot;&lt;/span&gt;, &amp;#123; &lt;span class=&quot;attr&quot;&gt;sameSite&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;strict&amp;quot;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="JWT-로그인-방식"><a href="#JWT-로그인-방식" class="headerlink" title="JWT 로그인 방식"></a>JWT 로그인 방식</h1><p>서버에 로그인을 하면 토큰을 발급해주어<br>사용자가 서비스를 이용할때 이 토큰을 요청에 포함시켜 사용자를 인증한다.<br>근데 이 토큰엔 만료시간이 있다<br>이 프로젝트에서는 이 토큰의 만료시간이 15분이다<br>그래서 토큰이 만료되면 리프레시 토큰으로 다시 새로운 <code>access_token</code>을 발급 받아야 한다  </p><p>오잉…..</p><p><code>access_token</code>이 만료되면.. 리프레시 토큰으로 새롭게 발급 받으라고!?</p><p>일단 로그인할때 <code>response</code> 받은 <code>access_token</code>과 <code>refresh_token</code>을 저장하자  </p><h3 id="시나리오-1"><a href="#시나리오-1" class="headerlink" title="시나리오 1."></a>시나리오 1.</h3><ol><li>로그인 할 때 발급 받은 access_token은 리덕스에, refresh_token은 쿠키에 저장한다</li><li>hoc를 이용해 access_token이 만료되면 새롭게 발급받고 토큰이 필요한 컴포넌트에 props로 넘겨준다</li></ol><p>react-cookie라는 라이브러리를 통해 쿠키에 쉽게 저장 할 수 있었다  </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// settingSessions.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Cookies</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-cookie&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> cookies = <span class="keyword">new</span> <span class="title class_">Cookies</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 로그인 할때 받은 리프레시토큰을 인자로 받아 쿠키에 저장한다</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">setRefreshToken</span> = (<span class="params">refreshToken</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> today = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">const</span> expireDate = today.<span class="title function_">setDate</span>(today.<span class="title function_">getDate</span>() + <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> cookies.<span class="title function_">set</span>(<span class="string">&quot;refresh_token&quot;</span>, refreshToken, &#123;</span><br><span class="line">    <span class="attr">sameSite</span>: <span class="string">&quot;strict&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">expires</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(expireDate),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 쿠키에 저장된 토큰을 가져온다</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getCookieToken</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> cookies.<span class="title function_">get</span>(<span class="string">&quot;refresh_token&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 쿠키에 저장된 토큰을 삭제한다</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">removeCookieToken</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> cookies.<span class="title function_">remove</span>(<span class="string">&quot;refresh_token&quot;</span>, &#123; <span class="attr">sameSite</span>: <span class="string">&quot;strict&quot;</span>, <span class="attr">path</span>: <span class="string">&quot;/&quot;</span> &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AccessToken.jsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useCallback &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useSelector, useDispatch &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getCookieToken &#125; <span class="keyword">from</span> <span class="string">&quot;@util/settingSessions&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; refreshTokenFunc &#125; <span class="keyword">from</span> <span class="string">&quot;@api/loginApi&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; setAccessTokenAction &#125; <span class="keyword">from</span> <span class="string">&quot;@redux/user/userSlice&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">AccessToken</span> = (<span class="params">SpecificComponent</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">AccessToken</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> accessToken = <span class="title function_">useSelector</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">user</span>.<span class="property">accessToken</span>);</span><br><span class="line">    <span class="keyword">const</span> userLogin = <span class="title function_">useSelector</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">user</span>.<span class="property">userLogin</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> getCookie = <span class="title function_">useCallback</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> refresh = <span class="keyword">await</span> <span class="title function_">getCookieToken</span>();</span><br><span class="line">      <span class="keyword">const</span> access_token = <span class="keyword">await</span> <span class="title function_">refreshTokenFunc</span>(refresh);</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">dispatch</span>(<span class="title function_">setAccessTokenAction</span>(access_token));</span><br><span class="line">    &#125;, [userLogin]);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (userLogin) &#123;</span><br><span class="line">        <span class="title function_">getCookie</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, []);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">SpecificComponent</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;<span class="attr">...props</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">accessToken</span>=<span class="string">&#123;accessToken&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">userLogin</span>=<span class="string">&#123;userLogin&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">AccessToken</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">AccessToken</span>;</span><br></pre></td></tr></table></figure><p>조건문 작성이 좀 이상하긴 했다.. 유저가 로그인 되어있으면 리프레시 토큰을 호출했으니<br>그리고 또 다른 문제가 호출이 너무 많이 된다는 거다..<br>중간에 조건문 작성을 좀 바꿨었는데 안되서 다른 방식을 택했다…  </p><h3 id="시나리오-2"><a href="#시나리오-2" class="headerlink" title="시나리오 2."></a>시나리오 2.</h3><ol><li><code>axios interceptor</code>를 이용해서 토큰이 만료되면 리프레시토큰으로 다시 호출 해온다</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">clientServer.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="keyword">async</span> (response) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> (error) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      config,</span><br><span class="line">      <span class="attr">response</span>: &#123; status &#125;,</span><br><span class="line">    &#125; = error;</span><br><span class="line">    <span class="keyword">if</span> (status === <span class="number">401</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        error.<span class="property">response</span>.<span class="property">data</span>.<span class="property">msg</span> === <span class="string">&quot;Token has expired&quot;</span> ||</span><br><span class="line">        error.<span class="property">response</span>.<span class="property">data</span>.<span class="property">msg</span> === <span class="string">&quot;Missing Authorization Header&quot;</span></span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="keyword">const</span> originalRequest = config;</span><br><span class="line">        <span class="keyword">const</span> refreshToken = <span class="keyword">await</span> <span class="title function_">getCookieToken</span>();</span><br><span class="line">        <span class="keyword">const</span> access_token = <span class="keyword">await</span> <span class="title function_">refreshTokenFunc</span>(refreshToken);</span><br><span class="line"></span><br><span class="line">        clientServer.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">common</span>.<span class="property">Authorization</span> = <span class="string">`Bearer <span class="subst">$&#123;access_token&#125;</span>`</span>;</span><br><span class="line">        originalRequest.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`Bearer <span class="subst">$&#123;access_token&#125;</span>`</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">axios</span>(originalRequest);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>interceptor</code>를 이용한 refresh 토큰을 검색해보니 여러 정보가 떴다<br>보면서 작성하긴 했는데 이게 제대로 되는지 사실 애매했다.<br>어떨때는 잘 불러오는데 어떨때는 …. 새로고침을 해줘야 토큰을 다시 불러 올 때도 있었다.<br>이 <code>axios interceptor</code>에 대해서 좀 더 공부해 볼 필요가 있다</p>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/React/">React</category>
      
      <category domain="https://sacultang.github.io/categories/Web/React/Project/">Project</category>
      
      
      <category domain="https://sacultang.github.io/tags/React/">React</category>
      
      
      <comments>https://sacultang.github.io/2022/07/24/JWT-login/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Final-Project-3</title>
      <link>https://sacultang.github.io/2022/07/24/Final-Project-3/</link>
      <guid>https://sacultang.github.io/2022/07/24/Final-Project-3/</guid>
      <pubDate>Sat, 23 Jul 2022 17:00:14 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Final-Project-3&quot;&gt;&lt;a href=&quot;#Final-Project-3&quot; class=&quot;headerlink&quot; title=&quot;Final-Project-3&quot;&gt;&lt;/a&gt;Final-Project-3&lt;/h1&gt;&lt;h2 id=&quot;07-24-Project</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Final-Project-3"><a href="#Final-Project-3" class="headerlink" title="Final-Project-3"></a>Final-Project-3</h1><h2 id="07-24-Project"><a href="#07-24-Project" class="headerlink" title="07.24 Project"></a>07.24 Project</h2><p>파이널이 끝났다.  </p><p><code>호기럽게</code> 시작한 파이널은 만족스럽지 못하게 끝났다  </p><p>기간동안 매일같이 파이널만 붙들고 코드를 치다 보니<br>블로그를 작성할 시간도 없었다. 물론 짬을 내면 쓸 수 있었겠지만…  </p><p>파이널은 키워드를 통한 뉴스검색을 하고 뉴스를 스크랩하고, 키워드를 저장하고..<br>뭔가 미니프로젝트와 비슷하단 생각하며 시작했는데 막상 들어가보니 훨씬 복잡하고 어려웠다.</p><p><code>api통신</code>이 많아지고 그 통신마다 서로 연관되어 데이터를 조회하는 것이 많다보니<br>각각의 에러케이스 처리와 상태관리에 많은 어려움이 있었다.</p><p>또.. 토큰을 이용한 로그인 방식도 처음이다 보니<br>토큰관리에도 애를 먹었다.<br>어떤 페이지에 접속하면 <code>refresh 토큰</code>이 10번씩 호출되어<br>연계 기업쪽 팀장님이 refresh 호출이 너무 많다고 하소연 하셨을 정도니</p><p>마지막에는 어떻게든 더 작성해야겠다는 마음때문에 팀원들과 소통없이 코드 작성하고<br><code>git</code>에 올렸더니 파일이 꼬여 약간 멘붕도 왔다.<br>코드양이 많지 않아 금방 수정하긴 했지만..</p><p>어쨌든 끝이 났는데 그렇게 홀가분하지는 않다<br>항상 무언가 끝나고나면 좀 더 열심히했으면.. 하는 후회를 하는건 언제쯤 고칠 수 있을까  </p><p>프로젝트하면서 느낀게 비슷한 내용을 작성하는데 항상 어떻게 해야할지 몰라 끙끙댔었는데..<br>머릿속에 지우개가 들어서인지 응용력이 떨어져서인지 참..</p><p>이제 작성했던 코드 좀 돌아보면서 정리하는 시간이 좀 필요한거 같다  </p>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/React/">React</category>
      
      <category domain="https://sacultang.github.io/categories/Web/React/Redux/">Redux</category>
      
      <category domain="https://sacultang.github.io/categories/Web/React/Redux/Project/">Project</category>
      
      
      <category domain="https://sacultang.github.io/tags/React/">React</category>
      
      
      <comments>https://sacultang.github.io/2022/07/24/Final-Project-3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Final-Project-2</title>
      <link>https://sacultang.github.io/2022/07/06/Final-Project-2/</link>
      <guid>https://sacultang.github.io/2022/07/06/Final-Project-2/</guid>
      <pubDate>Wed, 06 Jul 2022 05:21:49 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Final-Project-02&quot;&gt;&lt;a href=&quot;#Final-Project-02&quot; class=&quot;headerlink&quot; title=&quot;Final-Project-02&quot;&gt;&lt;/a&gt;Final-Project-02&lt;/h1&gt;&lt;h3 id=&quot;2022-07-0</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Final-Project-02"><a href="#Final-Project-02" class="headerlink" title="Final-Project-02"></a>Final-Project-02</h1><h3 id="2022-07-06"><a href="#2022-07-06" class="headerlink" title="2022.07.06"></a>2022.07.06</h3><p>스타일 작업을 하는중..<br>스타일드 컴포넌트로 테마설정도 하고…<br>switch case로 클릭하는거에 따라 보기타입이 바뀌게도 설정 해 줄 수 있다  </p><p>나중에 코드 정리해야지  </p><p>일단 지금은 카테고리 버튼을 누르면 페이지가 이동되고<br>이동된 페이지에 상단에 클릭된 버튼이 활성화 되어 있다  </p><img src="/2022/07/06/Final-Project-2/01.png" class=""><img src="/2022/07/06/Final-Project-2/02.png" class=""><p>문제는 버튼들이 가로로 나열되어있고 overflow scroll인데</p><p>마지막 카테고리를 클릭하면 스크롤하기 전에 해당 버튼이 활성화 된게 안 보인다는 점..</p><img src="/2022/07/06/Final-Project-2/03.png" class=""><p>일단 아이디어는 주소로 넘어오는 params와<br>버튼의 id를 비교해서 같으면 색상을 활성화 해주는거다  </p><p>그래서 검색 시작  </p><p>useRef 와 scrollIntoView 라는걸 사용하면 클릭하면 참조값에 스크롤이 된다고 해서 작성 해봤다.  </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">CategoryButton</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> params = <span class="title function_">useParams</span>();</span><br><span class="line">  <span class="keyword">const</span> btnRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    btnRef.<span class="property">current</span>.<span class="title function_">scrollIntoView</span>(&#123;</span><br><span class="line">          <span class="attr">behavior</span>: <span class="string">&quot;smooth&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">QuickButtonWrap</span> <span class="attr">id</span>=<span class="string">&quot;scroll-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;mainCategory.map((category) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">RadiusButton</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">orange</span>=<span class="string">&#123;params.id</span> === <span class="string">category.id&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">ref</span>=<span class="string">&#123;btnRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;category.category&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">RadiusButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        );</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">QuickButtonWrap</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CategoryButton</span>;</span><br></pre></td></tr></table></figure><p>이렇게 작성했더니 맵을 돌면서 마지막 버튼에만 활성이 되는 것이다</p><p>근데 여럿 찾아본 블로그와 다른 점은.. 블로그에서는 ref를 부모로부터 받아와 참조를 하는거지만<br>여기서는 그렇지가 않다 부모 자식 관계도 아니기 때문에….  </p><p>그리고 다시 폭풍 검색  </p><p>찾다보니 ref를 배열로 저장할 수 있더라</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ref=&#123;<span class="function">(<span class="params">el</span>) =&gt;</span> (btnRef.<span class="property">current</span>[idx] = el)&#125;</span><br></pre></td></tr></table></figure><p>이런식인데<br>맵을 돌면서 index값으로 current를 찾아 내는 방식인거 같다!?  </p><p>그래서 일단 배열로 저장하고 콘솔로 찍어 보았다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">CategoryButton</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> params = <span class="title function_">useParams</span>();</span><br><span class="line">  <span class="keyword">const</span> btnRef = <span class="title function_">useRef</span>([]); <span class="comment">// 배열로 설정</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    btnRef.<span class="property">current</span>.<span class="title function_">scrollIntoView</span>(&#123;</span><br><span class="line">          <span class="attr">behavior</span>: <span class="string">&quot;smooth&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">QuickButtonWrap</span> <span class="attr">id</span>=<span class="string">&quot;scroll-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;mainCategory.map((category,idx) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">RadiusButton</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">orange</span>=<span class="string">&#123;params.id</span> === <span class="string">category.id&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">ref</span>=<span class="string">&#123;(el)</span> =&gt;</span> (btnRef.current[idx] = el)&#125; // ref를 배열로 저장</span></span><br><span class="line"><span class="language-xml">            &gt;</span></span><br><span class="line"><span class="language-xml">              &#123;category.category&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">RadiusButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        );</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">QuickButtonWrap</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CategoryButton</span>;</span><br></pre></td></tr></table></figure><img src="/2022/07/06/Final-Project-2/04.png" class=""><p>각 버튼의 ref가 배열로 저장된다. </p><p>그럼 이제 btnRef를 for문을 돌면서 해당 인덱스에 있는 텍스트와 params를 비교해서<br>scrollIntoView를 해주면 된다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">CategoryButton</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> params = <span class="title function_">useParams</span>();</span><br><span class="line">  <span class="keyword">const</span> btnRef = <span class="title function_">useRef</span>([]);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    btnRef.<span class="property">current</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, idx</span>) =&gt;</span> &#123; <span class="comment">// 배열을 순회하고</span></span><br><span class="line">      <span class="keyword">if</span> (item.<span class="property">innerText</span>.<span class="title function_">toLowerCase</span>() === params.<span class="property">id</span>) &#123; <span class="comment">// innertext와 비교를 했다..</span></span><br><span class="line">        btnRef.<span class="property">current</span>[idx].<span class="title function_">scrollIntoView</span>(&#123; <span class="comment">// true 일시 해당 index의 ref로 scrollIntoView가 된다</span></span><br><span class="line">          <span class="attr">behavior</span>: <span class="string">&quot;smooth&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">QuickButtonWrap</span> <span class="attr">id</span>=<span class="string">&quot;scroll-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;mainCategory.map((category, idx) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">to</span>=<span class="string">&#123;</span>`/<span class="attr">quick</span>$&#123;<span class="attr">category.path</span>&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">key</span>=<span class="string">&#123;category.id&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">id</span>=<span class="string">&#123;category.id&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">RadiusButton</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">orange</span>=<span class="string">&#123;params.id</span> === <span class="string">category.id&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">ref</span>=<span class="string">&#123;(el)</span> =&gt;</span> (btnRef.current[idx] = el)&#125;</span></span><br><span class="line"><span class="language-xml">            &gt;</span></span><br><span class="line"><span class="language-xml">              &#123;category.category&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">RadiusButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        );</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">QuickButtonWrap</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CategoryButton</span>;</span><br></pre></td></tr></table></figure><img src="/2022/07/06/Final-Project-2/01.gif" class=""><p>잘 작동 된다!</p>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/React/">React</category>
      
      <category domain="https://sacultang.github.io/categories/Web/React/Project/">Project</category>
      
      
      <category domain="https://sacultang.github.io/tags/React/">React</category>
      
      
      <comments>https://sacultang.github.io/2022/07/06/Final-Project-2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2022-07-02_TIL</title>
      <link>https://sacultang.github.io/2022/07/02/2022-07-02-TIL/</link>
      <guid>https://sacultang.github.io/2022/07/02/2022-07-02-TIL/</guid>
      <pubDate>Fri, 01 Jul 2022 20:38:13 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;axios&quot;&gt;&lt;a href=&quot;#axios&quot; class=&quot;headerlink&quot; title=&quot;axios&quot;&gt;&lt;/a&gt;axios&lt;/h2&gt;&lt;p&gt;axios 라이브러리에는 많은 기능이 들어있는거 같다..&lt;br&gt;그 동안 정말 axios로 요청만 날리고 </description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>axios 라이브러리에는 많은 기능이 들어있는거 같다..<br>그 동안 정말 axios로 요청만 날리고 있었다  </p><p>axios.create()를 통해 baseURL, header 등을 설정해 놓을 수 있다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clientServer = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">SERVER</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> clientServer;</span><br></pre></td></tr></table></figure><p>사용 할 때는 axios도 임폴트가 필요 없다<br>clientServer만 임폴트 해주면 된다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> clientServer <span class="keyword">from</span> <span class="string">&quot;./baseUrl&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getMasterData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">clientServer</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&quot;/master&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="property">data</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">      <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>header에 토큰 값도 미리 설정 해 놓을 수 도 있다  </p>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/">TIL</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/2022-06/">2022.06</category>
      
      
      <category domain="https://sacultang.github.io/tags/JavaScript/">JavaScript</category>
      
      
      <comments>https://sacultang.github.io/2022/07/02/2022-07-02-TIL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2022-06-27-TIL</title>
      <link>https://sacultang.github.io/2022/06/27/2022-06-27-TIL/</link>
      <guid>https://sacultang.github.io/2022/06/27/2022-06-27-TIL/</guid>
      <pubDate>Sun, 26 Jun 2022 16:33:35 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;URLSearchParmas&quot;&gt;&lt;a href=&quot;#URLSearchParmas&quot; class=&quot;headerlink&quot; title=&quot;URLSearchParmas&quot;&gt;&lt;/a&gt;URLSearchParmas&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a hr</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="URLSearchParmas"><a href="#URLSearchParmas" class="headerlink" title="URLSearchParmas"></a>URLSearchParmas</h1><blockquote><p><a href="https://developer.mozilla.org/ko/docs/Web/API/URLSearchParams">https://developer.mozilla.org/ko/docs/Web/API/URLSearchParams</a></p></blockquote><img src="/2022/06/27/2022-06-27-TIL/01.png" class=""><p>공백이나 특수 문자는 url에 인코딩한 형태로 들어가야한다</p><p>encodeURI()를 사용할 수도 있지만 번거롭다</p><p>URLSearchParams를 이용해서 변환해 줄 수 있다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(&#123;<span class="string">&#x27;foo&#x27;</span> : <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;q&#x27;</span>: <span class="string">&#x27;안녕 하 세 요 ^^&#x27;</span>&#125;)</span><br><span class="line">params.<span class="title function_">toString</span>()</span><br><span class="line"><span class="comment">// &#x27;foo=1&amp;q=%EC%95%88%EB%85%95+%ED%95%98+%EC%84%B8+%EC%9A%94+%5E%5E&#x27;</span></span><br></pre></td></tr></table></figure><img src="/2022/06/27/2022-06-27-TIL/02.png" class=""><p>URLSearchParams에 객체의 형태로 넣어 줬는데<br>주소에서 사용 할 수 있는 쿼리파라미터에 키 밸류 값으로 자동으로 해준다</p>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/">TIL</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/2022-06/">2022.06</category>
      
      
      <category domain="https://sacultang.github.io/tags/JavaScript/">JavaScript</category>
      
      
      <comments>https://sacultang.github.io/2022/06/27/2022-06-27-TIL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Final-Project 01</title>
      <link>https://sacultang.github.io/2022/06/25/Final-Project/</link>
      <guid>https://sacultang.github.io/2022/06/25/Final-Project/</guid>
      <pubDate>Fri, 24 Jun 2022 16:43:32 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Final-project-01&quot;&gt;&lt;a href=&quot;#Final-project-01&quot; class=&quot;headerlink&quot; title=&quot;Final-project 01&quot;&gt;&lt;/a&gt;Final-project 01&lt;/h1&gt;&lt;h3 id=&quot;2022-06-2</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Final-project-01"><a href="#Final-project-01" class="headerlink" title="Final-project 01"></a>Final-project 01</h1><h3 id="2022-06-25-새벽"><a href="#2022-06-25-새벽" class="headerlink" title="2022.06.25 새벽.."></a>2022.06.25 새벽..</h3><img src="/2022/06/25/Final-Project/01.png" class=""><ul><li><p>본격적으로 final project가 시작되었다..<br>아직 기획단계라서 디자인도 나오진 않았지만<br>미리 API를 받아 코드를 작성 해 볼 수 있었다..</p></li><li><p>맨 처음 이 프로젝트를 선택 할 때 많은 데이터를 다룰 수 있어서 선택 했는데<br>럴수가.. 데이터가 너무 많다</p></li></ul><p>검색을 하면 데이터에서 맞는 키워드를 화면에 띄워줘야 하는데<br>데이터양이 많아서 쓰로틀링이 너무 걸린다..<br>어떻게 해결해야 하나<br>저 에러 메세지 조차 모든 데이터를 필터링 한 거도 아니다<br>기업측에서 보내준 데모사이트에서는 바로바로 필터링돼서 화면에 출력 되던데<br>어떻게 하는거지..?</p><p>lodash 라이브러리를 사용해서 filter하면 좀 더 빠르다 해서 해봤는데<br>차이가 있는지 모르겠다 -. - </p><h3 id="2022-06-26"><a href="#2022-06-26" class="headerlink" title="2022.06.26"></a>2022.06.26</h3><ol><li>어찌어찌어찌 키워드를 에러 없이 띄우는데 까지는 성공을 했다</li><li>처음보다는 낫지만 아직 성능이슈가 있다 첫 글자를 입력하면 쓰로틀링이 걸린다</li><li>new Map() 이나 Set()을 이용해서 필터링을 하는 방법을 공부 해봐야겠다</li><li>정규식은 어렵다</li></ol><p>정규식에 변수를 넣기 위해 검색 해보았다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> regex = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`\s(<span class="subst">$&#123;keyword&#125;</span>)+|(<span class="subst">$&#123;keyword&#125;</span>)+`</span>, <span class="string">&quot;im&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> regex.<span class="title function_">test</span>(item.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><p>일반적인 자바스크립트 보간법으로 변수를 넣어 줄 수 있다.</p><img src="/2022/06/25/Final-Project/02.png" class=""><p>첫 시작과 중간에 같은 단어가 있으면 첫 단어를 찾지 못한다는 점이 문제였다</p><img src="/2022/06/25/Final-Project/03.png" class=""><p><code>|</code>를 이용해서 정규식을 추가해 줄 수 있었다..</p>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/React/">React</category>
      
      <category domain="https://sacultang.github.io/categories/Web/React/Project/">Project</category>
      
      
      <category domain="https://sacultang.github.io/tags/React/">React</category>
      
      
      <comments>https://sacultang.github.io/2022/06/25/Final-Project/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2022-06-20-TIL</title>
      <link>https://sacultang.github.io/2022/06/21/2022-06-20-TIL/</link>
      <guid>https://sacultang.github.io/2022/06/21/2022-06-20-TIL/</guid>
      <pubDate>Tue, 21 Jun 2022 03:57:17 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;커스텀-훅을-사용하면서-생긴-erro-case&quot;&gt;&lt;a href=&quot;#커스텀-훅을-사용하면서-생긴-erro-case&quot; class=&quot;headerlink&quot; title=&quot;커스텀 훅을 사용하면서 생긴 erro case&quot;&gt;&lt;/a&gt;커스텀 훅을 사용하면</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="커스텀-훅을-사용하면서-생긴-erro-case"><a href="#커스텀-훅을-사용하면서-생긴-erro-case" class="headerlink" title="커스텀 훅을 사용하면서 생긴 erro case"></a>커스텀 훅을 사용하면서 생긴 erro case</h2><img src="/2022/06/21/2022-06-20-TIL/01.png" class=""><p>api 호출 부분과 무한스크롤 부분을 컴포넌트에서 분리 하는 과정에서<br>이런 에러가 발생했다</p><p>검색 해보니  </p><ol><li>react-dom의 버전이 Hook을 사용할수 있는 버전인 16.8.0보다 낮을때</li><li>Hooks를 호출 할 때는 함수형 component의 최상위 부분에서 호출</li><li>동일한 앱에 둘 이상의 사본이 있을때</li></ol><p>일단 1번 케이스는 해당이 안되고<br>3번 케이스도 npm i 로 새로 설치했는데도 아니었다</p><p>그럼 2번이 문제인데.. 분명 hook은 컴포넌트 최상단에서 호출 하고 있는 중인데..</p><p>일단 분리한 코드는 </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect, useRef, useCallback &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useDispatch &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">GetDataHooks</span> = (<span class="params">keyword, page, setPage</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [newsData, setNewsData] = <span class="title function_">useState</span>([]);</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [hasMore, setHasMore] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [error, setError] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">API_KEY</span> = process.<span class="property">env</span>.<span class="property">REACT_APP_API_KEY</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setNewsData</span>([]);</span><br><span class="line">  &#125;, [keyword]);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (keyword &amp;&amp; !loading) &#123;</span><br><span class="line">      <span class="keyword">const</span> searchTimeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setLoading</span>(<span class="literal">true</span>);</span><br><span class="line">        <span class="title function_">setError</span>(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">let</span> cancel;</span><br><span class="line">        <span class="title function_">axios</span>(&#123;</span><br><span class="line">          <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">          <span class="attr">url</span>: <span class="string">`https://api.nytimes.com/svc/search/v2/articlesearch.json?api-key=<span class="subst">$&#123;API_KEY&#125;</span>`</span>,</span><br><span class="line">          <span class="attr">params</span>: &#123; <span class="attr">q</span>: keyword, <span class="attr">sort</span>: <span class="string">&quot;newest&quot;</span>, page &#125;,</span><br><span class="line">          <span class="attr">cancelToken</span>: <span class="keyword">new</span> axios.<span class="title class_">CancelToken</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> (cancel = c)),</span><br><span class="line">        &#125;)</span><br><span class="line">          .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">setNewsData</span>(<span class="function">(<span class="params">prev</span>) =&gt;</span> [...prev, ...res.<span class="property">data</span>.<span class="property">response</span>.<span class="property">docs</span>]);</span><br><span class="line">            <span class="title function_">setHasMore</span>(res.<span class="property">data</span>.<span class="property">response</span>.<span class="property">docs</span>.<span class="property">length</span> &gt; <span class="number">0</span>);</span><br><span class="line">            <span class="title function_">setLoading</span>(<span class="literal">false</span>);</span><br><span class="line">          &#125;)</span><br><span class="line">          .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (axios.<span class="title function_">isCancel</span>(e)) <span class="keyword">return</span>;</span><br><span class="line">            <span class="title function_">setError</span>(<span class="literal">true</span>);</span><br><span class="line">          &#125;);</span><br><span class="line">        <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;SEARCH_HISTORY&quot;</span>, <span class="attr">payload</span>: keyword &#125;);</span><br><span class="line">      &#125;, <span class="number">500</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(searchTimeout);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [keyword, page]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> observer = <span class="title function_">useRef</span>();</span><br><span class="line">  <span class="keyword">const</span> lastCardNewsRef = <span class="title function_">useCallback</span>(</span><br><span class="line">    <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;visible&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (loading) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">if</span> (observer.<span class="property">current</span>) observer.<span class="property">current</span>.<span class="title function_">disconnect</span>();</span><br><span class="line">      observer.<span class="property">current</span> = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (entries[<span class="number">0</span>].<span class="property">isIntersecting</span> &amp;&amp; hasMore) &#123;</span><br><span class="line">          <span class="title function_">setPage</span>(<span class="function">(<span class="params">page</span>) =&gt;</span> page + <span class="number">1</span>);</span><br><span class="line">          ✅ <span class="comment">// 문제의 호출</span></span><br><span class="line">          <span class="title class_">GetDataHooks</span>(keyword, page, setPage,)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (node) observer.<span class="property">current</span>.<span class="title function_">observe</span>(node);</span><br><span class="line">    &#125;,</span><br><span class="line">    [loading, hasMore]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; newsData, loading, lastCardNewsRef &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">GetDataHooks</span>;</span><br></pre></td></tr></table></figure><p>keyword, page, setPage를 인자로 받아서 안에서 api를 호출 하여<br>newsData와, loading값, 무한스크롤 함수를 return 해주게 작성했다  </p><p>문제는.. 커스텀훅 안에서 커스텀훅을 호출 하고 있어서 이런 에러가 나는 거였다……</p><p>저 GetDataHooks()를 지워 주니 에러가 사라졌다 ..</p>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/">TIL</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/2022-06/">2022.06</category>
      
      
      <category domain="https://sacultang.github.io/tags/JavaScript/">JavaScript</category>
      
      
      <comments>https://sacultang.github.io/2022/06/21/2022-06-20-TIL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2022-06-18-TIL</title>
      <link>https://sacultang.github.io/2022/06/18/2022-06-18-TIL/</link>
      <guid>https://sacultang.github.io/2022/06/18/2022-06-18-TIL/</guid>
      <pubDate>Fri, 17 Jun 2022 18:02:10 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Ref&quot;&gt;&lt;a href=&quot;#Ref&quot; class=&quot;headerlink&quot; title=&quot;Ref&quot;&gt;&lt;/a&gt;Ref&lt;/h1&gt;&lt;p&gt;부모컴포넌트에서 자식컴포넌트의 DOM엘리먼트를 참조 하고 싶을때&lt;/p&gt;
&lt;figure class=&quot;highlight j</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><p>부모컴포넌트에서 자식컴포넌트의 DOM엘리먼트를 참조 하고 싶을때</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewsList Component</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">NewsList</span> = (<span class="params">&#123; news, lastCardNewsRef &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Container</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;news.map((newsData, idx) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return <span class="tag">&lt;<span class="name">News</span> <span class="attr">ref</span>=<span class="string">&#123;lastCardNewsRef&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Container</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// News Component</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">News</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Card</span> <span class="attr">ref</span>=<span class="string">&#123;props.ref&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;props.headline&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">News</span>;</span><br></pre></td></tr></table></figure><img src="/2022/06/18/2022-06-18-TIL/01.png" class=""><ul><li>함수 컴포넌트는 인스턴스가 없기 때문에 ref어트리뷰트를 사용할 수 없다</li></ul><p><a href="https://ko.reactjs.org/docs/forwarding-refs.html#forwarding-refs-to-dom-components">https://ko.reactjs.org/docs/forwarding-refs.html#forwarding-refs-to-dom-components</a></p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p><code>ref</code></p><ul><li>ref는 특정 DOM (Html)을 참조 할 때 사용 한다</li><li>ref는 리액트 예약어이다 (ex: key, className)</li><li>함수 컴포넌트는 인스턴스가 없기 때문에 ref어트리뷰트를 사용할 수 없다</li><li>간단하게는 ref의 이름을 myRef 같은 이름으로 수정하여 해결 할 수 있다</li><li>또는 리액트훅 forwardRef를 이용해 ref 참조 값을 사용 할 수 있다</li></ul><h3 id="How-to-solve"><a href="#How-to-solve" class="headerlink" title="How to solve"></a>How to solve</h3><ol><li>ref 이름 변경</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewsList Component</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">NewsList</span> = (<span class="params">&#123; news, lastCardNewsRef &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Container</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;news.map((newsData, idx) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">News</span> <span class="attr">myRef</span>=<span class="string">&#123;lastCardNewsRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            ✅ // <span class="attr">myRef</span> 이름으로 컴포넌트에 전달</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">        );</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Container</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// News Component</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">News</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Card</span> <span class="attr">ref</span>=<span class="string">&#123;props.myRef&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ✅ // props로 myRef</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;props.headline&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">News</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>forwardRef hooks</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewsList Component</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">NewsList</span> = (<span class="params">&#123; news, lastCardNewsRef &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Container</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;news.map((newsData, idx) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">News</span> <span class="attr">ref</span>=<span class="string">&#123;lastCardNewsRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            ✅ // <span class="attr">ref</span> 그대로 사용</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">        );</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Container</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// News Component</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; forwardRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">News</span> = <span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">             ✅ <span class="comment">// forwardRef 사용</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Card</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">           ✅ // ref 사용</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;props.headline&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">News</span>;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/">TIL</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/2022-06/">2022.06</category>
      
      
      <category domain="https://sacultang.github.io/tags/JavaScript/">JavaScript</category>
      
      
      <comments>https://sacultang.github.io/2022/06/18/2022-06-18-TIL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2022-06-16-TIL</title>
      <link>https://sacultang.github.io/2022/06/16/2022-06-16-TIL/</link>
      <guid>https://sacultang.github.io/2022/06/16/2022-06-16-TIL/</guid>
      <pubDate>Wed, 15 Jun 2022 17:27:16 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;date-fns&quot;&gt;&lt;a href=&quot;#date-fns&quot; class=&quot;headerlink&quot; title=&quot;date-fns&quot;&gt;&lt;/a&gt;date-fns&lt;/h1&gt;&lt;p&gt;미니프로젝트 진행 중 데이터 중 날짜 데이터가 있어서 날짜를 가공하기 위해 date</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="date-fns"><a href="#date-fns" class="headerlink" title="date-fns"></a>date-fns</h1><p>미니프로젝트 진행 중 데이터 중 날짜 데이터가 있어서 날짜를 가공하기 위해 date-fns 라이브러리를 사용해보기로 했다</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i date-fns</span><br></pre></td></tr></table></figure><h2 id="format"><a href="#format" class="headerlink" title="format()"></a>format()</h2><p>api로 받아오는 데이터는 </p><img src="/2022/06/16/2022-06-16-TIL/01.png" class=""><p>이런식으로 저장되어있다</p><p>기본적으로 date를 원하는 형식으로 출력할수있는 메소드 <code>format()</code>이 있다<br>format()은 2개의 인수가 필수고 option으로 다른 값들을 넣어 줄 수 있다<br>첫 번째는 변경할 date<br>두 번째는 원하는 format 이다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">format</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="string">&#x27;yyyy.MM.dd HH:mm&#x27;</span>)</span><br><span class="line"><span class="comment">// 2022.06.16 02:47</span></span><br></pre></td></tr></table></figure><p>받아온 데이터를 <code>yyyy.MM.dd HH:mm</code>형식으로 바꿔보자</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">format</span>(pub_date, <span class="string">&#x27;yyyy.MM.dd HH:mm&#x27;</span>)</span><br></pre></td></tr></table></figure><p>으로 작성 했더니 error를 뱉어 냈다</p><img src="/2022/06/16/2022-06-16-TIL/02.png" class=""><p>v2.0.0-beta 부터 문자열을 허용하지 않는다고 하면서 parseISO를 사용해달라고 한다  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">format</span>(<span class="title function_">parseISO</span>(pub_date), <span class="string">&#x27;yyyy.MM.dd HH:mm&#x27;</span>)</span><br></pre></td></tr></table></figure><p>이렇게 작성해 줬더니 잘 된다.</p><h2 id="differenceInDays-differenceInHours"><a href="#differenceInDays-differenceInHours" class="headerlink" title="differenceInDays() , differenceInHours()"></a>differenceInDays() , differenceInHours()</h2><p>데이터가 작성된 날짜와 현재의 날짜를 비교해서 얼마전에 작성되었는지도 출력해주기 위해 <code>differenceInDays()</code> , <code>differenceInHours()</code> 도 사용해 주었다</p><p>두 메소드 다 비교할 날짜 2개를 인수로 넣어 준다   </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="title function_">differenceInHours</span>(</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2014</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">19</span>, <span class="number">0</span>),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2014</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">50</span>)</span><br><span class="line">)</span><br><span class="line"><span class="comment">//=&gt; 12</span></span><br></pre></td></tr></table></figure><p><code>differenceInDays()</code>를 사용하면 작성된 날짜와 현재 날짜가 같으면 0이 반환 되기 때문에<br><code>differenceInHours()</code>를 사용해 날짜가 같으면 시간으로 표시 해 준다</p><p>함수로 만들어 조건에 맞게 출력할 수 있도록 해준다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">dateFunc</span> = (<span class="params">pub_date</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="title function_">differenceInDays</span>(<span class="title function_">parseISO</span>(pub_date), <span class="keyword">new</span> <span class="title class_">Date</span>())) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="title function_">differenceInDays</span>(<span class="title function_">parseISO</span>(pub_date), <span class="keyword">new</span> <span class="title class_">Date</span>())) + <span class="string">&#x27; 일 전&#x27;</span></span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="title function_">differenceInHours</span>(<span class="title function_">parseISO</span>(pub_date), <span class="keyword">new</span> <span class="title class_">Date</span>())) + <span class="string">&#x27; 시간 전&#x27;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/06/16/2022-06-16-TIL/03.png" class="">  <img src="/2022/06/16/2022-06-16-TIL/04.png" class="">  ]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/">TIL</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/2022-06/">2022.06</category>
      
      
      <category domain="https://sacultang.github.io/tags/JavaScript/">JavaScript</category>
      
      
      <comments>https://sacultang.github.io/2022/06/16/2022-06-16-TIL/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ㅇㅇㅈ Blog</title>
    <link>https://sacultang.github.io/</link>
    
    <atom:link href="https://sacultang.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sat, 14 May 2022 12:44:08 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>체육복</title>
      <link>https://sacultang.github.io/2022/05/13/algorithm05/</link>
      <guid>https://sacultang.github.io/2022/05/13/algorithm05/</guid>
      <pubDate>Fri, 13 May 2022 14:20:21 GMT</pubDate>
      
        
        
      <description>&lt;ol&gt;
&lt;li&gt;체육복을 도난 당한 학생 수는 1명 이상 n명 이하 중복된 번호는 없다&lt;/li&gt;
&lt;li&gt;여벌의 체육복을 가져온 학생의 수는 1명 이상 n명 이하 중복된 번호는 없다&lt;/li&gt;
&lt;li&gt;여벌 체육복을 가져온 사람만 빌려 줄 수 있다&lt;/li&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<ol><li>체육복을 도난 당한 학생 수는 1명 이상 n명 이하 중복된 번호는 없다</li><li>여벌의 체육복을 가져온 학생의 수는 1명 이상 n명 이하 중복된 번호는 없다</li><li>여벌 체육복을 가져온 사람만 빌려 줄 수 있다</li><li>자신의 번호 앞 뒤로 +1 -1 인 사람 한테만 한 벌 빌려 줄 수 있다</li><li>자기 자신의 체육복도 도난 당했을 수도 있다 &#x3D;&gt; 자기만 입을 수 있고 빌려 줄 수는 없다</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lost = [<span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> reserve = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">n, lost, reserve</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> answer = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> lostV = lost.<span class="title function_">filter</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> !reserve.<span class="title function_">includes</span>(x))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(lostV)</span><br><span class="line">  <span class="keyword">let</span> reserveV = reserve.<span class="title function_">filter</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> !lost.<span class="title function_">includes</span>(x))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reserveV)</span><br><span class="line">  <span class="keyword">let</span> arr = reserveV</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> e + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> e &lt;= n)</span><br><span class="line">  <span class="comment">// console.log(arr)</span></span><br><span class="line">  <span class="keyword">let</span> arr2 = lostV.<span class="title function_">filter</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !arr.<span class="title function_">includes</span>(x)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// console.log(arr2)</span></span><br><span class="line">  answer = n - arr2.<span class="property">length</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(answer)</span><br><span class="line">  <span class="keyword">return</span> answer</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">solution</span>(<span class="number">5</span>, lost, reserve)</span><br></pre></td></tr></table></figure><p>첫 작성 코드.. 30점 </p><ul><li>문제는 자기 자신이 잃어 버렸을때는 자기 밖에 못 입는다는게 문제!<!-- 순서대로 다시 작성 해본다</li></ul><ol><li>가져온 사람 번호에서 잃어버린 사람의 번호를 필터한다 &#x3D;&gt; 자기 자신도 잃어버렸으면 걸러진다 &#x3D;&gt; 걸러진 갯수는 입을 수 있는 갯수++</li></ol><ul><li>만약 가져온 사람보다 잃어버린 사람이 많으면 리턴 answer &#x3D; 걸러진 갯수</li></ul><ol start="2"><li><p>필터된 데이터에서 +1을 해서 잃어버린 사람의 번호를 필터한다 &#x3D;&gt; 걸러진 갯수 &#x3D; 입을 수 있는 갯수 ++</p></li><li><p>다시 필터된 데이터에서 -1을 해서 잃어버린 사람의 번호를 필터한다 &#x3D;&gt; 걸러진 갯수 &#x3D; 입을 수 있는 갯수++ –&gt;</p></li><li><p>가져온 사람 번호에서 잃어버린 사람 번호를 필터한다</p></li></ol><ul><li>-&gt; 자기 자신도 잃어 버렸으면 걸러진다</li><li>진짜 못 입는 사람과, 두 벌 가져온 사람만 남는다</li></ul><ol start="2"><li>두 벌 가져온 사람 번호에서 -1을 해서 잃어버린 사람 꺼를 다시 필터 해준다 </li><li>두 벌 가져온 사람 번호에서 +1을 해서 잃어버린 사람 꺼를 다시 필터 해준다</li><li>총 학생 수 에서 필터된 못입는 사람수를 빼준다</li></ol><p>잘 안풀린다..</p>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/JavaScript/">JavaScript</category>
      
      <category domain="https://sacultang.github.io/categories/Web/JavaScript/algorithm/">algorithm</category>
      
      
      <category domain="https://sacultang.github.io/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://sacultang.github.io/tags/algorithm/">algorithm</category>
      
      
      <comments>https://sacultang.github.io/2022/05/13/algorithm05/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>컴포넌트 State</title>
      <link>https://sacultang.github.io/2022/05/13/React-State-functional/</link>
      <guid>https://sacultang.github.io/2022/05/13/React-State-functional/</guid>
      <pubDate>Fri, 13 May 2022 10:53:39 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;함수형-컴포넌트-State&quot;&gt;&lt;a href=&quot;#함수형-컴포넌트-State&quot; class=&quot;headerlink&quot; title=&quot;함수형 컴포넌트 State&quot;&gt;&lt;/a&gt;함수형 컴포넌트 State&lt;/h1&gt;&lt;p&gt;** Class Component **&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="함수형-컴포넌트-State"><a href="#함수형-컴포넌트-State" class="headerlink" title="함수형 컴포넌트 State"></a>함수형 컴포넌트 State</h1><p>** Class Component **</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">ClassComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>() &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timerID</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">tick</span>(), <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timerID</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">tick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world! Class Component<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;this.state.date.toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Functional Component</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">FunctionalComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [date, setDate] = <span class="title function_">useState</span>(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">tick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setDate</span>(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// DidMount</span></span><br><span class="line">    <span class="keyword">const</span> interval = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> <span class="title function_">tick</span>(), <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// WillUnmount</span></span><br><span class="line">      <span class="built_in">clearInterval</span>(interval)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world! It&#x27;s Functional<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;date.toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="컴포넌트-생명주기"><a href="#컴포넌트-생명주기" class="headerlink" title="컴포넌트 생명주기"></a>컴포넌트 생명주기</h2><ul><li>어떤 타이밍에 어떤 동작들이 일어나는가</li></ul><blockquote><p><a href="https://ko.reactjs.org/docs/react-component.html">https://ko.reactjs.org/docs/react-component.html</a></p></blockquote><ol><li>마운트 - 메서드들은 컴포넌트의 인스턴스가 생성되어 DOM 상에 삽입될 때에 순서대로 호출</li></ol><ul><li>constructor()</li><li>render()</li><li>componentDidMount()</li></ul><ol start="2"><li>업데이트 - Props 또는 state가 변경되면 갱신이 발생. 컴포넌트가 다시 렌더링될때 순서대로 호출</li></ol><ul><li>render()</li><li>componentDidUpdate()</li></ul><ol start="3"><li>마운트 해제 - 컴포넌트가 DOM 상에서 제거될 때에 호출</li></ol><ul><li>componentWillUnmount()</li></ul><blockquote><p><a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/</a></p></blockquote><h3 id="생명주기-도표"><a href="#생명주기-도표" class="headerlink" title="생명주기 도표"></a>생명주기 도표</h3><img src="/2022/05/13/React-State-functional/01.png" class=""><h1 id="합성-이벤트"><a href="#합성-이벤트" class="headerlink" title="합성 이벤트"></a>합성 이벤트</h1><ul><li>React 엘리먼트에서 이벤트를 처리하는 방식은 DOM엘리먼트에서 이벤트를 처리하는 방식과 매우 유사하지만 , 몇 가지 문법 차이가 있다<ul><li>React의 이벤트는 소문자 대신 캐멀 케이스(camelCase)를 사용한다.</li><li>JSX를 사용하여 문자열이 아닌 함수로 이벤트 핸들러를 전달한다.</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/React/">React</category>
      
      
      <category domain="https://sacultang.github.io/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://sacultang.github.io/tags/React/">React</category>
      
      
      <comments>https://sacultang.github.io/2022/05/13/React-State-functional/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>TS-Generics-Function</title>
      <link>https://sacultang.github.io/2022/05/13/TS-Generics-Function/</link>
      <guid>https://sacultang.github.io/2022/05/13/TS-Generics-Function/</guid>
      <pubDate>Fri, 13 May 2022 08:26:14 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Generics&quot;&gt;&lt;a href=&quot;#Generics&quot; class=&quot;headerlink&quot; title=&quot;Generics&quot;&gt;&lt;/a&gt;Generics&lt;/h1&gt;&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Generics"><a href="#Generics" class="headerlink" title="Generics"></a>Generics</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params">message: <span class="built_in">any</span></span>) : <span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> message</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hello</span>(<span class="string">&#x27;mark&#x27;</span>)) <span class="comment">// any로 추론되기 때문에 .length 같은 property를 사용하지 못한다</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hello</span>(<span class="number">39</span>))</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> helloGeneric&lt;T&gt; (<span class="attr">message</span>:T) :T &#123; <span class="comment">// 함수의 안에서 T의 타입을 기억하게 된다</span></span><br><span class="line">  <span class="keyword">return</span> message</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">helloGeneric</span>(<span class="string">&#x27;Mark&#x27;</span>))</span><br></pre></td></tr></table></figure><img src="/2022/05/13/TS-Generics-Function/01.png" class=""><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> helloGeneric&lt;T&gt; (<span class="attr">message</span>:T) :T &#123; <span class="comment">// 함수의 안에서 T의 타입을 기억하게 된다</span></span><br><span class="line">  <span class="keyword">return</span> message</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">helloGeneric</span>(<span class="number">39</span>))</span><br></pre></td></tr></table></figure><img src="/2022/05/13/TS-Generics-Function/02.png" class=""><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> helloGeneric&lt;T&gt; (<span class="attr">message</span>:T) :T &#123; <span class="comment">// 함수의 안에서 T의 타입을 기억하게 된다</span></span><br><span class="line">  <span class="keyword">return</span> message</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">helloGeneric</span>(<span class="literal">true</span>))</span><br></pre></td></tr></table></figure><img src="/2022/05/13/TS-Generics-Function/03.png" class=""><h2 id="Generics-Basic"><a href="#Generics-Basic" class="headerlink" title="Generics Basic"></a>Generics Basic</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> helloBasic&lt;T&gt;(<span class="attr">message</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> message</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">helloBasic&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;hello&#x27;</span>) <span class="comment">// 타입이 string으로 된다</span></span><br><span class="line"><span class="title function_">helloBasic</span>(<span class="number">36</span>) <span class="comment">// T의 타입을 넣지 않으면 추론된다 36이 number이지만 number가 아닌 가장 좁은 범위인 36으로 추론된다</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2022/05/13/TS-Generics-Function/04.png" class=""><img src="/2022/05/13/TS-Generics-Function/05.png" class=""><h2 id="Generics-Array-amp-Tuple"><a href="#Generics-Array-amp-Tuple" class="headerlink" title="Generics Array &amp; Tuple"></a>Generics Array &amp; Tuple</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> helloArray&lt;T&gt;(<span class="attr">message</span>: T[]): T &#123;</span><br><span class="line">  <span class="keyword">return</span> message[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">helloArray</span>([<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;World&#x27;</span>])</span><br><span class="line"><span class="title function_">helloArray</span>([<span class="string">&#x27;hello&#x27;</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure><img src="/2022/05/13/TS-Generics-Function/06.png" class=""><img src="/2022/05/13/TS-Generics-Function/07.png" class=""><img src="/2022/05/13/TS-Generics-Function/08.png" class=""><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> helloTuple&lt;T, K&gt;(<span class="attr">message</span>: [T, K]): T &#123;</span><br><span class="line">  <span class="keyword">return</span> message[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">helloTuple</span>([<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;World&#x27;</span>])</span><br><span class="line"><span class="title function_">helloTuple</span>([<span class="string">&#x27;Hello&#x27;</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure><img src="/2022/05/13/TS-Generics-Function/09.png" class=""><img src="/2022/05/13/TS-Generics-Function/10.png" class=""><h2 id="Generics-Function"><a href="#Generics-Function" class="headerlink" title="Generics Function"></a>Generics Function</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// type alias</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">HelloFunctionGeneric1</span> = &lt;T&gt;<span class="function">(<span class="params">message: T</span>) =&gt;</span> T</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">hellofunction1</span>: <span class="title class_">HelloFunctionGeneric1</span> = &lt;T&gt;(<span class="attr">message</span>: T): <span class="function"><span class="params">T</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> message</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// interface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">HelloFunctionGeneric2</span> &#123;</span><br><span class="line">  &lt;T&gt;(<span class="attr">message</span>: T): T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">helloFunction2</span>: <span class="title class_">HelloFunctionGeneric2</span> = &lt;T&gt;(<span class="attr">message</span>: T): <span class="function"><span class="params">T</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> message</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Generics-Class"><a href="#Generics-Class" class="headerlink" title="Generics Class"></a>Generics Class</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_name</span>: T</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: T</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Mark&#x27;</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Person</span>&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure><img src="/2022/05/13/TS-Generics-Function/11.png" class=""><img src="/2022/05/13/TS-Generics-Function/12.png" class=""><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&lt;T, K&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_name</span>: T</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_age</span>: K</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: T, age: K</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">123</span>, <span class="string">&#x27;Mark&#x27;</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Person</span>&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt;(<span class="string">&#x27;Hello&#x27;</span>, <span class="number">123</span>)</span><br></pre></td></tr></table></figure><img src="/2022/05/13/TS-Generics-Function/14.png" class=""><img src="/2022/05/13/TS-Generics-Function/15.png" class=""><h2 id="Generics-with-extends"><a href="#Generics-with-extends" class="headerlink" title="Generics with extends"></a>Generics with extends</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PersonExtends</span>&lt;T <span class="keyword">extends</span> <span class="built_in">string</span> | <span class="built_in">number</span>&gt; &#123;</span><br><span class="line">  <span class="comment">// T 는 string 과 number만 가능하다</span></span><br><span class="line">  <span class="comment">// class 상속과는 조금 다른 개념</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_name</span>: T</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: T</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">PersonExtends</span>(<span class="string">&#x27;Mark&#x27;</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">PersonExtends</span>(<span class="number">39</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">PersonExtends</span>(<span class="literal">true</span>) <span class="comment">// error</span></span><br></pre></td></tr></table></figure><img src="/2022/05/13/TS-Generics-Function/16.png" class=""><h2 id="keyof-amp-type-lookup-system"><a href="#keyof-amp-type-lookup-system" class="headerlink" title="keyof &amp; type lookup system"></a>keyof &amp; type lookup system</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IPerson</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>: <span class="title class_">IPerson</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Mark&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">39</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Keys</span> = keyof <span class="title class_">IPerson</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">keys</span>: <span class="title class_">Keys</span> = <span class="string">&#x27;name&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IPerson[keyof IPerson]</span></span><br><span class="line"><span class="comment">// =&gt; IPerson[&quot;name&quot; | &quot;age&quot;]</span></span><br><span class="line"><span class="comment">// =&gt; IPerson[&#x27;name] | IPerson[&#x27;age&#x27;]</span></span><br><span class="line"><span class="comment">// =&gt; string | number</span></span><br><span class="line"><span class="keyword">function</span> getProp&lt;T, K <span class="keyword">extends</span> keyof T&gt;(<span class="attr">obj</span>: T, <span class="attr">key</span>: K): T[K] &#123;</span><br><span class="line">  <span class="keyword">return</span> obj[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getProp</span>(person, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> setProp&lt;T, K <span class="keyword">extends</span> keyof T&gt;(<span class="attr">obj</span>: T, <span class="attr">key</span>: K, <span class="attr">value</span>: T[K]): <span class="built_in">void</span> &#123;</span><br><span class="line">  obj[key] = value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setProp</span>(person, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;anna&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TypeScript/">TypeScript</category>
      
      
      <category domain="https://sacultang.github.io/tags/TypeSciprt/">TypeSciprt</category>
      
      
      <comments>https://sacultang.github.io/2022/05/13/TS-Generics-Function/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>TS-Classes</title>
      <link>https://sacultang.github.io/2022/05/13/TS-Classes/</link>
      <guid>https://sacultang.github.io/2022/05/13/TS-Classes/</guid>
      <pubDate>Fri, 13 May 2022 04:58:12 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Class&quot;&gt;&lt;a href=&quot;#Class&quot; class=&quot;headerlink&quot; title=&quot;Class&quot;&gt;&lt;/a&gt;Class&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;class 키워드를 이용하여 클래스를 만들 수 있다&lt;/li&gt;
&lt;li&gt;class 이름은 대문자로</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><ul><li>class 키워드를 이용하여 클래스를 만들 수 있다</li><li>class 이름은 대문자로 시작한다</li><li>new를 이용하여 class를 통해 object를 만들 수 있다</li><li>constructor를 이용하여 object를 생성하면서 값을 전달할 수 있다</li><li>this를 이용해 만들어진 object를 가르킬 수 있다</li><li>JS로 컴파일되면 es5의 경우 function으로 변경된다</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  name</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Mark&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">name</span>)</span><br></pre></td></tr></table></figure><h2 id="constructor-amp-initialize"><a href="#constructor-amp-initialize" class="headerlink" title="constructor &amp; initialize"></a>constructor &amp; initialize</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1)</span><br></pre></td></tr></table></figure><img src="/2022/05/13/TS-Classes/01.png" class=""><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&quot;Mark&quot;</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">p1.<span class="property">age</span> = <span class="number">39</span> <span class="comment">// 초기값 없이 이후에 값을 설정 하고 싶을때</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1)</span><br></pre></td></tr></table></figure><p>초기값이 없으면 에러가 뜬다  </p><img src="/2022/05/13/TS-Classes/02.png" class=""><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&quot;Mark&quot;</span></span><br><span class="line">  age!: <span class="built_in">number</span> <span class="comment">// age 뒤에 ! 를 붙여준다</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="comment">// p1.age = 39 // age 뒤에 ! 가 붙어있는데 값을 설정 하지 않은 경우</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">age</span>)</span><br><span class="line"><span class="comment">// undefined가 뜬다</span></span><br></pre></td></tr></table></figure><h2 id="접근-제어자-Access-Modifiers"><a href="#접근-제어자-Access-Modifiers" class="headerlink" title="접근 제어자 (Access Modifiers)"></a>접근 제어자 (Access Modifiers)</h2><ul><li>접근 제어자에는 public, private, protected가 있다</li><li>설정하지 않으면 public</li><li>클래스 내부의 모든 곳에(생성자, 프로퍼티, 메서드) 설정 가능하다</li><li>private 으로 설정하면 클래스 외부에서 접근할 수 없다</li><li>자바스크립트에서 private 지원하지 않아 오랫동안 프로퍼티나 메서드 이름 앞에 _를 붙여서 표현 했다</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;Mark&#x27;</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">constructor</span>(<span class="params">age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">39</span>) <span class="comment">// error</span></span><br><span class="line"><span class="comment">// p1.age = 39</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">age</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>constructor에 private 설정 한 경우 외부에서 생성자 호출 불가</p><img src="/2022/05/13/TS-Classes/03.png" class=""><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;Mark&#x27;</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">39</span>) </span><br><span class="line"><span class="comment">// p1.age = 39</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">age</span>) <span class="comment">// error</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>프로퍼티에 private 를 붙였을때 age에 접근 불가</p><img src="/2022/05/13/TS-Classes/04.png" class=""><h3 id="initialization-in-constructor-parameters"><a href="#initialization-in-constructor-parameters" class="headerlink" title="initialization in constructor parameters"></a>initialization in constructor parameters</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 기존</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Mark&#x27;</span>, <span class="number">39</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 수정</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>, <span class="keyword">public</span> age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Mark&#x27;</span>, <span class="number">39</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1)</span><br></pre></td></tr></table></figure><h2 id="Getters-amp-Setters"><a href="#Getters-amp-Setters" class="headerlink" title="Getters &amp; Setters"></a>Getters &amp; Setters</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>, <span class="keyword">public</span> age: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Mark&#x27;</span>, <span class="number">39</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">name</span>) <span class="comment">// get</span></span><br><span class="line">p1.<span class="property">name</span> = <span class="string">&#x27;John&#x27;</span> <span class="comment">// set</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> _name: <span class="built_in">string</span>, <span class="keyword">public</span> age: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">n: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="comment">// return 해줄 필요 없다</span></span><br><span class="line">    <span class="comment">// 인자를 받아 넣어 준다</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = n</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Mark&#x27;</span>, <span class="number">39</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">name</span>) <span class="comment">// get</span></span><br><span class="line">p1.<span class="property">name</span> = <span class="string">&#x27;John&#x27;</span> <span class="comment">// set</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TypeScript/">TypeScript</category>
      
      
      <category domain="https://sacultang.github.io/tags/TypeSciprt/">TypeSciprt</category>
      
      
      <comments>https://sacultang.github.io/2022/05/13/TS-Classes/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>타입-호환성</title>
      <link>https://sacultang.github.io/2022/05/13/type-compatibility/</link>
      <guid>https://sacultang.github.io/2022/05/13/type-compatibility/</guid>
      <pubDate>Thu, 12 May 2022 15:40:39 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;타입-호환성-Type-Compatibility&quot;&gt;&lt;a href=&quot;#타입-호환성-Type-Compatibility&quot; class=&quot;headerlink&quot; title=&quot;타입 호환성 (Type Compatibility)&quot;&gt;&lt;/a&gt;타입 호환성 (Type Compatibility)&lt;/h1&gt;&lt;h2 id=&quot;서브-타입-1&quot;&gt;&lt;a href=&quot;#서브-타입-1&quot; class=&quot;headerlink&quot; title=&quot;서브 타입(1)&quot;&gt;&lt;/a&gt;서브 타입(1)&lt;/h2&gt;&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// sub1 타입은 sup1 타입의 서브 타입이다.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;sub1&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;sup1&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; = sub1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sub1 = sup1 &lt;span class=&quot;comment&quot;&gt;//error! Type &amp;#x27;number&amp;#x27; is not assignable to type &amp;#x27;1&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// sub2 타입은 sup2 타입의 서브 타입이다&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;sub2&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;[] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;sup2&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;object&lt;/span&gt; = sub2; &lt;span class=&quot;comment&quot;&gt;// sup2에는 sub2를 할당 할 수 있다&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sub2 = sup2 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// error! Type &amp;#x27;&amp;#123;&amp;#125;&amp;#x27; is missing the following properties from type &amp;#x27;number[]&amp;#x27;:length, pop, push, concat, and 16 more.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// sub3 타입은 sup3 타입의 서브 타입이다.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;sub3&lt;/span&gt;: [&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;sup3&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;[] = sub3; &lt;span class=&quot;comment&quot;&gt;// sup3에 sub3 을 할당 할 수 있다&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sub3 = sup3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// error! Type &amp;#x27;number[]&amp;#x27; is not assignable to type &amp;#x27;[number, number]&amp;#x27;. Target requires 2 element(s) but source may have fewer.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;서브-타입-2&quot;&gt;&lt;a href=&quot;#서브-타입-2&quot; class=&quot;headerlink&quot; title=&quot;서브 타입(2)&quot;&gt;&lt;/a&gt;서브 타입(2)&lt;/h2&gt;&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// sub4 타입은 sup4 타입의 서브 타입이다.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;sub4&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;sup4&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt; = sub4; &lt;span class=&quot;comment&quot;&gt;// any는 어떤것도 들어갈 수 있다&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sub4 = sup4; &lt;span class=&quot;comment&quot;&gt;// 반대의 경우도 마찬가지&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// sub5 타입은 sup5 타입의 서브 타입이다.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;sub5&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;never&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;never&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;sup5&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; = sub5; &lt;span class=&quot;comment&quot;&gt;// number에 포함 될 수 있지만 반대의 경우 문제가 된다&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sub5 = sup5; &lt;span class=&quot;comment&quot;&gt;// error! Type &amp;#x27;number&amp;#x27; is not assignable to type &amp;#x27;never&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Animal&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title class_ inherited__&quot;&gt;Animal&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;title function_&quot;&gt;eat&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// sub6 타입은 sup6 타입의 서브 타입이다.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;sub6&lt;/span&gt;: &lt;span class=&quot;title class_&quot;&gt;Dog&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Dog&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;sup6&lt;/span&gt;: &lt;span class=&quot;title class_&quot;&gt;Animal&lt;/span&gt; = sub6;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sub6 = sup6; &lt;span class=&quot;comment&quot;&gt;// error! Property &amp;#x27;eat&amp;#x27; is missing in type &amp;#x27;SubAnimal&amp;#x27; but required in type &amp;#x27;SubDog&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;1-같거나-서브-타입인-경우-할당이-가능하다-x3D-gt-공변&quot;&gt;&lt;a href=&quot;#1-같거나-서브-타입인-경우-할당이-가능하다-x3D-gt-공변&quot; class=&quot;headerlink&quot; title=&quot;1. 같거나 서브 타입인 경우, 할당이 가능하다. &amp;#x3D;&amp;gt; 공변&quot;&gt;&lt;/a&gt;1. 같거나 서브 타입인 경우, 할당이 가능하다. &amp;#x3D;&amp;gt; 공변&lt;/h3&gt;&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// primitive type&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;sub7&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;sup7&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; | &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; = sub7;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// object - 각각의 프로퍼티가 대응하는 프로퍼티와 같거나 서브타입이어야 한다.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;sub8&lt;/span&gt;: &amp;#123; &lt;span class=&quot;attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;; &lt;span class=&quot;attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;&amp;#125; =&amp;#123;&lt;span class=&quot;attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;sup8&lt;/span&gt;: &amp;#123; &lt;span class=&quot;attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; | &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;; &lt;span class=&quot;attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;&amp;#125; = sub8;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// array - object 와 마찬가지&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;sub9&lt;/span&gt;: &lt;span class=&quot;title class_&quot;&gt;Array&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&quot;attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;; &lt;span class=&quot;attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;&amp;#125;&amp;gt; =[&amp;#123;&lt;span class=&quot;attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;sup9&lt;/span&gt;: &lt;span class=&quot;title class_&quot;&gt;Array&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&quot;attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; | &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;; &lt;span class=&quot;attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;&amp;#125;&amp;gt; = sub8;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="타입-호환성-Type-Compatibility"><a href="#타입-호환성-Type-Compatibility" class="headerlink" title="타입 호환성 (Type Compatibility)"></a>타입 호환성 (Type Compatibility)</h1><h2 id="서브-타입-1"><a href="#서브-타입-1" class="headerlink" title="서브 타입(1)"></a>서브 타입(1)</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sub1 타입은 sup1 타입의 서브 타입이다.</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">sub1</span>: <span class="number">1</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">sup1</span>: <span class="built_in">number</span> = sub1;</span><br><span class="line">sub1 = sup1 <span class="comment">//error! Type &#x27;number&#x27; is not assignable to type &#x27;1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// sub2 타입은 sup2 타입의 서브 타입이다</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">sub2</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">sup2</span>: <span class="built_in">object</span> = sub2; <span class="comment">// sup2에는 sub2를 할당 할 수 있다</span></span><br><span class="line">sub2 = sup2 </span><br><span class="line"><span class="comment">// error! Type &#x27;&#123;&#125;&#x27; is missing the following properties from type &#x27;number[]&#x27;:length, pop, push, concat, and 16 more.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// sub3 타입은 sup3 타입의 서브 타입이다.</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">sub3</span>: [<span class="built_in">number</span>, <span class="built_in">number</span>] = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">sup3</span>: <span class="built_in">number</span>[] = sub3; <span class="comment">// sup3에 sub3 을 할당 할 수 있다</span></span><br><span class="line">sub3 = sup3</span><br><span class="line"><span class="comment">// error! Type &#x27;number[]&#x27; is not assignable to type &#x27;[number, number]&#x27;. Target requires 2 element(s) but source may have fewer.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="서브-타입-2"><a href="#서브-타입-2" class="headerlink" title="서브 타입(2)"></a>서브 타입(2)</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sub4 타입은 sup4 타입의 서브 타입이다.</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">sub4</span>: <span class="built_in">number</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">sup4</span>: <span class="built_in">any</span> = sub4; <span class="comment">// any는 어떤것도 들어갈 수 있다</span></span><br><span class="line">sub4 = sup4; <span class="comment">// 반대의 경우도 마찬가지</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// sub5 타입은 sup5 타입의 서브 타입이다.</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">sub5</span>: <span class="built_in">never</span> = <span class="number">0</span> <span class="keyword">as</span> <span class="built_in">never</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">sup5</span>: <span class="built_in">number</span> = sub5; <span class="comment">// number에 포함 될 수 있지만 반대의 경우 문제가 된다</span></span><br><span class="line">sub5 = sup5; <span class="comment">// error! Type &#x27;number&#x27; is not assignable to type &#x27;never&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sub6 타입은 sup6 타입의 서브 타입이다.</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">sub6</span>: <span class="title class_">Dog</span> = <span class="keyword">new</span> <span class="title class_">Dog</span>()</span><br><span class="line"><span class="keyword">let</span> <span class="attr">sup6</span>: <span class="title class_">Animal</span> = sub6;</span><br><span class="line">sub6 = sup6; <span class="comment">// error! Property &#x27;eat&#x27; is missing in type &#x27;SubAnimal&#x27; but required in type &#x27;SubDog&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="1-같거나-서브-타입인-경우-할당이-가능하다-x3D-gt-공변"><a href="#1-같거나-서브-타입인-경우-할당이-가능하다-x3D-gt-공변" class="headerlink" title="1. 같거나 서브 타입인 경우, 할당이 가능하다. &#x3D;&gt; 공변"></a>1. 같거나 서브 타입인 경우, 할당이 가능하다. &#x3D;&gt; 공변</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// primitive type</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">sub7</span>: <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">sup7</span>: <span class="built_in">string</span> | <span class="built_in">number</span> = sub7;</span><br><span class="line"></span><br><span class="line"><span class="comment">// object - 각각의 프로퍼티가 대응하는 프로퍼티와 같거나 서브타입이어야 한다.</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">sub8</span>: &#123; <span class="attr">a</span>: <span class="built_in">string</span>; <span class="attr">b</span>: <span class="built_in">number</span>&#125; =&#123;<span class="attr">a</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">b</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">sup8</span>: &#123; <span class="attr">a</span>: <span class="built_in">string</span> | <span class="built_in">number</span>; <span class="attr">b</span>: <span class="built_in">number</span>&#125; = sub8;</span><br><span class="line"></span><br><span class="line"><span class="comment">// array - object 와 마찬가지</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">sub9</span>: <span class="title class_">Array</span>&lt;&#123; <span class="attr">a</span>: <span class="built_in">string</span>; <span class="attr">b</span>:<span class="built_in">number</span>&#125;&gt; =[&#123;<span class="attr">a</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">b</span>: <span class="number">1</span>&#125;]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">sup9</span>: <span class="title class_">Array</span>&lt;&#123; <span class="attr">a</span>: <span class="built_in">string</span> | <span class="built_in">number</span>; <span class="attr">b</span>: <span class="built_in">number</span>&#125;&gt; = sub8;</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="2-함수의-매개변수-타입만-같거나-슈퍼타입인-경우-할당이-가능하다-x3D-gt-반병"><a href="#2-함수의-매개변수-타입만-같거나-슈퍼타입인-경우-할당이-가능하다-x3D-gt-반병" class="headerlink" title="2. 함수의 매개변수 타입만 같거나 슈퍼타입인 경우, 할당이 가능하다 &#x3D;&gt; 반병"></a>2. 함수의 매개변수 타입만 같거나 슈퍼타입인 경우, 할당이 가능하다 &#x3D;&gt; 반병</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Developer</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123; <span class="comment">// Person을 상속받은 Developer</span></span><br><span class="line">  <span class="title function_">coding</span>(<span class="params"></span>) &#123;&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StartupDeveloper</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Developer</span> &#123; <span class="comment">// Developer를 상속받은 StartupDeveloper</span></span><br><span class="line">  <span class="title function_">burning</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tellme</span>(<span class="params">f: (d: Developer) =&gt; Developer</span>) &#123;&#125;</span><br><span class="line"><span class="comment">//tellme함수 인자로 f 함수가 들어감 f함수는 Developer를 인자로 받고 Developer를 리턴한다</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Developer =&gt; Developer 에다가 Developer =&gt; Developer 를 할당하는 경우</span></span><br><span class="line"><span class="title function_">tellme</span>(<span class="params"><span class="keyword">function</span> dToD(d: Developer): Developer</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Developer</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Developer =&gt; Developer 에다가 Person =&gt; Developer 를 할당하는 경우</span></span><br><span class="line"><span class="title function_">tellme</span>(<span class="keyword">function</span> <span class="title function_">pToD</span>(<span class="params">d: Person</span>): <span class="title class_">Developer</span> &#123;</span><br><span class="line">  <span class="comment">// coding()을 호출 할 수 없지만 문제가 되지 않는다</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Developer</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Developer =&gt; Developer 에다가 StartupDeveloper =&gt; Developer를 할당하는 경우</span></span><br><span class="line"><span class="title function_">tellme</span>(<span class="params"><span class="keyword">function</span> sTod(d: StartupDeveloper): Developer</span>)&#123;</span><br><span class="line">  <span class="comment">// d.buring()을 할 수 있지만 논리적으로 문제가 있다</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Developer</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// strictFunctionTypes 옵션을 켜면</span></span><br><span class="line">함수를 할당할 시에 함수의 매개변수 타입이 같거나 슈퍼타입인 경우가 아닌 경우, 에러를 통해 경고한다</span><br></pre></td></tr></table></figure><h1 id="타입-별칭-Type-Alias"><a href="#타입-별칭-Type-Alias" class="headerlink" title="타입 별칭(Type Alias)"></a>타입 별칭(Type Alias)</h1><ul><li>Interface랑 비슷해 보인다</li><li>Primitive, Union Type, Tuple, Function 같이 여러번 똑같이 쓰는것보다는 이름을 붙여 설정하고 사용하는 방식</li><li>기타 직접 작성해야하는 타입을 다른 이름을 지정할 수 있습니다</li><li>만들어진 타입의 refer로 사용하는 것이지 타입을 만드는것은 아니다</li></ul><h2 id="Aliasing-Primitive"><a href="#Aliasing-Primitive" class="headerlink" title="Aliasing Primitive"></a>Aliasing Primitive</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyStringType</span> = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myStr</span>: <span class="title class_">MyStringType</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">myStr = str</span><br></pre></td></tr></table></figure><h2 id="Aliasing-Union-Type"><a href="#Aliasing-Union-Type" class="headerlink" title="Aliasing Union Type"></a>Aliasing Union Type</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: <span class="built_in">string</span> | <span class="built_in">number</span> = <span class="number">0</span>; <span class="comment">// 매번 string | number를 지정하기 힘들다</span></span><br><span class="line">person = <span class="string">&#x27;Mark&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">StringOrNumber</span> = <span class="built_in">string</span> | <span class="built_in">number</span> <span class="comment">// string | number를 StringOrNumber로 지정한다</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">another</span>: <span class="title class_">StringOrNumber</span> = <span class="number">0</span>;</span><br><span class="line">another = <span class="string">&#x27;Anna&#x27;</span></span><br><span class="line"><span class="comment">// 유니온 타입은 A도 가능하고 B도 가능한 타입</span></span><br><span class="line"><span class="comment">// 길게 쓰는걸 짧게 </span></span><br></pre></td></tr></table></figure><h2 id="Aliasing-Tuple"><a href="#Aliasing-Tuple" class="headerlink" title="Aliasing Tuple"></a>Aliasing Tuple</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&#x27;Mark&#x27;</span>,<span class="number">35</span>]</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonTuple</span> = [<span class="built_in">string</span>, <span class="built_in">number</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">another</span>: <span class="title class_">PersonTuple</span> = [<span class="string">&#x27;Anna&#x27;</span>, <span class="number">24</span>]</span><br><span class="line"><span class="comment">// 튜플 타입에 별칭을 줘서 여러군데서 사용할 수 있게 한다</span></span><br></pre></td></tr></table></figure><h2 id="Aliasing-Function"><a href="#Aliasing-Function" class="headerlink" title="Aliasing Function"></a>Aliasing Function</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">EatType</span> = <span class="function">(<span class="params">food: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TypeScript/">TypeScript</category>
      
      
      <category domain="https://sacultang.github.io/tags/TypeSciprt/">TypeSciprt</category>
      
      
      <comments>https://sacultang.github.io/2022/05/13/type-compatibility/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Typescript-Interface</title>
      <link>https://sacultang.github.io/2022/05/12/Typescript-Interface/</link>
      <guid>https://sacultang.github.io/2022/05/12/Typescript-Interface/</guid>
      <pubDate>Thu, 12 May 2022 12:22:09 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;interface&quot;&gt;&lt;a href=&quot;#interface&quot; class=&quot;headerlink&quot; title=&quot;interface&quot;&gt;&lt;/a&gt;interface&lt;/h1&gt;&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person1</span> &#123;</span><br><span class="line">  <span class="comment">// 컴파일 됐을때는 사라지게 된다</span></span><br><span class="line">  <span class="comment">// 컴파일 타임에만 필요하다</span></span><br><span class="line">  <span class="comment">// 컴파일 타임에 인터페이스를 이용해 관계를 규명해 체크해주는 역할</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hello1</span>(<span class="params">person: Person1</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`안녕하세요 <span class="subst">$&#123;person.name&#125;</span>입니다`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p1</span>: <span class="title class_">Person1</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Mark&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">39</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hello1</span>(p1)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="optional-property-1"><a href="#optional-property-1" class="headerlink" title="optional property (1)"></a>optional property (1)</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person2</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  age?: <span class="built_in">number</span></span><br><span class="line">  <span class="comment">// 객체에 있을수도 있고 없을수도 있을때 ? 를 뒤에 붙인다</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hello2</span>(<span class="params">person: Person2</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`안녕하세요 <span class="subst">$&#123;person.name&#125;</span>입니다 `</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hello2</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Mark&#x27;</span>, <span class="attr">age</span>: <span class="number">39</span> &#125;)</span><br><span class="line"><span class="title function_">hello2</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Anna&#x27;</span> &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="optional-property-2"><a href="#optional-property-2" class="headerlink" title="optional property (2)"></a>optional property (2)</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person3</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  age?: <span class="built_in">number</span></span><br><span class="line">  [<span class="attr">index</span>: <span class="built_in">string</span>]: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hello3</span>(<span class="params">person: Person3</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">    <span class="string">`안녕하세요 <span class="subst">$&#123;person.name&#125;</span> <span class="subst">$&#123;person.systers&#125;</span> <span class="subst">$&#123;person.father&#125;</span>입니다`</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p31</span>: <span class="title class_">Person3</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Mark&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">39</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p32</span>: <span class="title class_">Person3</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Anna&#x27;</span>,</span><br><span class="line">  <span class="attr">systers</span>: [<span class="string">&#x27;sung&#x27;</span>, <span class="string">&#x27;chan&#x27;</span>], <span class="comment">// any 이기 때문에 들어 올 수 있다</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p33</span>: <span class="title class_">Person3</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Bokdan&#x27;</span>,</span><br><span class="line">  <span class="attr">father</span>: p31, <span class="comment">// any 이기 때문에 들어 올 수 있다</span></span><br><span class="line">  <span class="attr">mother</span>: p32, <span class="comment">// any 이기 때문에 들어 올 수 있다</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hello3</span>(p31)</span><br><span class="line"><span class="title function_">hello3</span>(p32)</span><br><span class="line"><span class="title function_">hello3</span>(p33)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="function-in-interface"><a href="#function-in-interface" class="headerlink" title="function in interface"></a>function in interface</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person4</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="title function_">hello</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p41</span>: <span class="title class_">Person4</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Mark&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">39</span>,</span><br><span class="line">  <span class="attr">hello</span>: <span class="keyword">function</span> (<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`안녕하세요! <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> 입니다`</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p42</span>: <span class="title class_">Person4</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;mark&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">39</span>,</span><br><span class="line">  <span class="title function_">hello</span>(<span class="attr">this</span>: <span class="title class_">Person4</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`안녕하세요! <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>입니다`</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p43</span>: <span class="title class_">Person4</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Mark&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">39</span>,</span><br><span class="line">  <span class="attr">hello</span>: (<span class="attr">this</span>: <span class="title class_">Person4</span>): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`안녕하세요! <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>입니다`</span>) <span class="comment">// this는 글로벌을 가르킨다</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/12/Typescript-Interface/01.png" class=""><img src="/2022/05/12/Typescript-Interface/02.png" class="">]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TypeScript/">TypeScript</category>
      
      
      <category domain="https://sacultang.github.io/tags/TypeScript/">TypeScript</category>
      
      
      <comments>https://sacultang.github.io/2022/05/12/Typescript-Interface/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2022-05-12-TIL</title>
      <link>https://sacultang.github.io/2022/05/12/2022-05-12-TIL/</link>
      <guid>https://sacultang.github.io/2022/05/12/2022-05-12-TIL/</guid>
      <pubDate>Thu, 12 May 2022 12:07:36 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;두-배열을-하나의-객체로-만들기&quot;&gt;&lt;a href=&quot;#두-배열을-하나의-객체로-만들기&quot; class=&quot;headerlink&quot; title=&quot;두 배열을 하나의 객체로 만들기&quot;&gt;&lt;/a&gt;두 배열을 하나의 객체로 만들기&lt;/h1&gt;&lt;figure class</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="두-배열을-하나의-객체로-만들기"><a href="#두-배열을-하나의-객체로-만들기" class="headerlink" title="두 배열을 하나의 객체로 만들기"></a>두 배열을 하나의 객체로 만들기</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> keys = [<span class="string">&#x27;k1&#x27;</span>, <span class="string">&#x27;k2&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> values = [<span class="string">&#x27;injuk&#x27;</span>, <span class="string">&#x27;ingnoh&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = keys.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, curr, idx</span>) =&gt;</span> &#123;</span><br><span class="line">    acc[curr] = values[idx];</span><br><span class="line">    <span class="keyword">return</span> acc;</span><br><span class="line">&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 실행 결과</span></span><br><span class="line"><span class="comment">&#123; k1: &#x27;injuk&#x27;, k2: &#x27;ingnoh&#x27; &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/">TIL</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/2022-05/">2022.05</category>
      
      
      <category domain="https://sacultang.github.io/tags/JavaScript/">JavaScript</category>
      
      
      <comments>https://sacultang.github.io/2022/05/12/2022-05-12-TIL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>TS Compiler-extends</title>
      <link>https://sacultang.github.io/2022/05/12/TS-Compiler-extends/</link>
      <guid>https://sacultang.github.io/2022/05/12/TS-Compiler-extends/</guid>
      <pubDate>Thu, 12 May 2022 07:55:09 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;extends&quot;&gt;&lt;a href=&quot;#extends&quot; class=&quot;headerlink&quot; title=&quot;extends&quot;&gt;&lt;/a&gt;extends&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;tsconfig에서 다른 파일의 설정을 상속받을때 사용한다&lt;/li&gt;
&lt;li&gt;파일(상대) 경로명 : string&lt;/li&gt;
&lt;li&gt;TypeScript 2.1 버전 이상에서만 가능&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// tsconfig.json&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&amp;quot;extends&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;./base.json&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&amp;quot;compilerOptions&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// &amp;quot;strict&amp;quot;: true,  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// base.json&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&amp;quot;compilerOptions&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;strict&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// base.json파일의 설정을 상속받아 strict: true 가 적용 된다&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;files-include-exclude&quot;&gt;&lt;a href=&quot;#files-include-exclude&quot; class=&quot;headerlink&quot; title=&quot;files, include, exclude&quot;&gt;&lt;/a&gt;files, include, exclude&lt;/h1&gt;&lt;/li&gt;
&lt;li&gt;프로젝트 안의 어떤 파일을 컴파일 할건지 결정하게 된다&lt;/li&gt;
&lt;li&gt;셋다 설정이 없으면, 전부다 컴바일&lt;h2 id=&quot;files&quot;&gt;&lt;a href=&quot;#files&quot; class=&quot;headerlink&quot; title=&quot;files&quot;&gt;&lt;/a&gt;files&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;상대 혹은 절대 경로의 리스트 배열이다&lt;/li&gt;
&lt;li&gt;files에 설정이 되어있으면 exclude되어 있어도 컴파일이 된다&lt;h2 id=&quot;include-exclude&quot;&gt;&lt;a href=&quot;#include-exclude&quot; class=&quot;headerlink&quot; title=&quot;include,exclude&quot;&gt;&lt;/a&gt;include,exclude&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;glob패턴 (마치 .gitignore)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;include&quot;&gt;&lt;a href=&quot;#include&quot; class=&quot;headerlink&quot; title=&quot;include&quot;&gt;&lt;/a&gt;include&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;exclude로 제외 되어있으면 컴파일하지 않는다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;exclude&quot;&gt;&lt;a href=&quot;#exclude&quot; class=&quot;headerlink&quot; title=&quot;exclude&quot;&gt;&lt;/a&gt;exclude&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;설정 안하면 4가지(node_modules,bower_components,jspm_packages, &amp;lt;outDir&amp;gt;를 default로 제외한다&lt;/li&gt;
&lt;li&gt;&amp;lt;outDir&amp;gt;은 항상 제외된다 (include에 있어도)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;compileOptions&quot;&gt;&lt;a href=&quot;#compileOptions&quot; class=&quot;headerlink&quot; title=&quot;compileOptions&quot;&gt;&lt;/a&gt;compileOptions&lt;/h1&gt;&lt;h2 id=&quot;typeRoots-types&quot;&gt;&lt;a href=&quot;#typeRoots-types&quot; class=&quot;headerlink&quot; title=&quot;typeRoots, types&quot;&gt;&lt;/a&gt;typeRoots, types&lt;/h2&gt;&lt;h3 id=&quot;types&quot;&gt;&lt;a href=&quot;#types&quot; class=&quot;headerlink&quot; title=&quot;@types&quot;&gt;&lt;/a&gt;@types&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;TypeScript 2.0부터 사용 가능해진 내장 type definition 시스템&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;아무 설정 안하면?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;node_modules&amp;#x2F;@types라는 모든 경로를 찾아서 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;typeRoots를 사용하면?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;배열 안에 들어 있는 경로들 아래서만 가져온다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;types를 사용하면?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;배열 안의 모듈 혹은 .&amp;#x2F;node_modules&amp;#x2F;@types&amp;#x2F; 안의 모듈 이름에서 찾아온다&lt;/li&gt;
&lt;li&gt;[]빈 배열을 넣는 다는건 이 시스템을 이용하지 않겠다는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;typeRoots와 types를 같이 사용하지 않는다&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h1><ul><li>tsconfig에서 다른 파일의 설정을 상속받을때 사용한다</li><li>파일(상대) 경로명 : string</li><li>TypeScript 2.1 버전 이상에서만 가능<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./base.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// &quot;strict&quot;: true,  </span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// base.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// base.json파일의 설정을 상속받아 strict: true 가 적용 된다</span></span><br></pre></td></tr></table></figure><h1 id="files-include-exclude"><a href="#files-include-exclude" class="headerlink" title="files, include, exclude"></a>files, include, exclude</h1></li><li>프로젝트 안의 어떤 파일을 컴파일 할건지 결정하게 된다</li><li>셋다 설정이 없으면, 전부다 컴바일<h2 id="files"><a href="#files" class="headerlink" title="files"></a>files</h2></li><li>상대 혹은 절대 경로의 리스트 배열이다</li><li>files에 설정이 되어있으면 exclude되어 있어도 컴파일이 된다<h2 id="include-exclude"><a href="#include-exclude" class="headerlink" title="include,exclude"></a>include,exclude</h2></li><li>glob패턴 (마치 .gitignore)</li></ul><h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><ul><li>exclude로 제외 되어있으면 컴파일하지 않는다</li></ul><h3 id="exclude"><a href="#exclude" class="headerlink" title="exclude"></a>exclude</h3><ul><li>설정 안하면 4가지(node_modules,bower_components,jspm_packages, &lt;outDir&gt;를 default로 제외한다</li><li>&lt;outDir&gt;은 항상 제외된다 (include에 있어도)</li></ul><h1 id="compileOptions"><a href="#compileOptions" class="headerlink" title="compileOptions"></a>compileOptions</h1><h2 id="typeRoots-types"><a href="#typeRoots-types" class="headerlink" title="typeRoots, types"></a>typeRoots, types</h2><h3 id="types"><a href="#types" class="headerlink" title="@types"></a>@types</h3><ul><li><p>TypeScript 2.0부터 사용 가능해진 내장 type definition 시스템</p></li><li><p>아무 설정 안하면?</p><ul><li>node_modules&#x2F;@types라는 모든 경로를 찾아서 사용</li></ul></li><li><p>typeRoots를 사용하면?</p><ul><li>배열 안에 들어 있는 경로들 아래서만 가져온다</li></ul></li><li><p>types를 사용하면?</p><ul><li>배열 안의 모듈 혹은 .&#x2F;node_modules&#x2F;@types&#x2F; 안의 모듈 이름에서 찾아온다</li><li>[]빈 배열을 넣는 다는건 이 시스템을 이용하지 않겠다는 것</li></ul></li><li><p>typeRoots와 types를 같이 사용하지 않는다</p><span id="more"></span><h2 id="target과-lib"><a href="#target과-lib" class="headerlink" title="target과 lib"></a>target과 lib</h2></li><li><p>target</p><ul><li>빌드의 결과물을 어떤 버전으로 할 것이냐</li><li>지정을 안하면 es3 이다<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.ts</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">hello</span> = (<span class="params"></span>) =&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tsconfig.json의 target을 es5로 지정한 뒤 컴파일 후</span></span><br><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">var</span> hello = <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;;</span><br><span class="line"><span class="comment">// arrow 펑션이 일반 함수로 변경되어 컴파일 됨</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>lib</p><ul><li>기본 type definition 라이브러리를 어떤 것을 사용할 것이냐</li><li>lib를 지정하지 않을 때<ul><li>target이 ‘es3’이고, 디폴트로 lib.d.ts를 사용한다</li><li>target이 ‘es5’이면, 디폴트로 dom, es5, scripthost를 사용</li><li>target이 ‘es6’이면, 디폴트로 dom, es6, dom.iterable, scripthost를 사용</li></ul></li><li>lib를 지정하면 그 lib 배열로만 라이브러리를 사용한다<ul><li>빈 [] &#x3D;&gt; ‘no definition found…~’</li></ul></li></ul></li></ul><h2 id="outDir-outfile-rootDir"><a href="#outDir-outfile-rootDir" class="headerlink" title="outDir,outfile,rootDir"></a>outDir,outfile,rootDir</h2><ul><li>outDir<ul><li>outDir에 지정된 특정 폴더로 컴파일 생성 됨 (ex : dist)</li></ul></li><li>rootDir<ul><li>rootDir에 지정된 경로를 컴파일 한다</li><li>rootDir을 지정 하지 않으면 최상위 루트를 대상으로 컴파일 한다</li></ul></li></ul><h2 id="compileOptions-strict"><a href="#compileOptions-strict" class="headerlink" title="compileOptions : strict"></a>compileOptions : strict</h2><h3 id="Enable-all-strict-type-checking-options"><a href="#Enable-all-strict-type-checking-options" class="headerlink" title="Enable all strict type checking options"></a>Enable all strict type checking options</h3><ul><li>–noImplicitAny</li><li>–noImplicitThis</li><li>–strictNullchecks</li><li>–strictFunctionTypes</li><li>–strictPropertyInitialization</li><li>–strictBindCallApply</li><li>–alwaysStrict</li></ul><p><strong>–noImplicitAny</strong></p><ul><li>명시적이지 않게 any 타입을 사용하여, 표현식과 선언에 사용하면, 에러를 발생</li><li>타입스크립트가 추론을 실패한경우, any가 맞으면 , any라고 지정하라</li><li>아무것도 쓰지 않으면 , 에러를 발생</li><li>이 오류를 해결하면, any라고 지정되어 있지 않은 경우는 any가 아닌 것이다.</li></ul><p><strong>–noImplicitThis</strong></p><ul><li>명시적이지 않게 any 타입을 사용하여, this 표현식에 사용하면, 에러를 발생합니다.</li></ul><img src="/2022/05/12/TS-Compiler-extends/01.png" class=""><ul><li>첫 번째 매개변수 자리에 this를 놓고, this에 대한 타입을 어떤 것이라도 표현하지 않으면, noImplicitAny가 오류를 발생시킨다.</li><li>JavaScript에서는 매개변수에 this를 넣으면, 이미 예약된 키워드라 SyntaxError를 발생시킨다.</li><li>call &#x2F; apply &#x2F; bind 와 같이 this를 대체하여 함수 콜을 하는 용도로도 쓰입니다.</li><li>그래서 this를 any로 명시적으로 지정하는 것은 합리적</li></ul><p><strong>–strictNullChecks</strong></p><ul><li>strictNullChecks 모드에서는, null 및 undefined 값이 모든 유형의 도메인에 속하지 않으며, 그 자신을 타입으로 가지거나, any일 경우에만 할당이 가능하다</li><li>한 가지 예외는 undefined에 void 할당 가능</li></ul><img src="/2022/05/12/TS-Compiler-extends/02.png" class=""><img src="/2022/05/12/TS-Compiler-extends/03.png" class=""><ul><li><p>strictNullChecks를 적용하지 않으면,</p><ul><li>모든 타입은 null, undefined 값을 가질 수 있다</li><li>string으로 타입을 지정해도 , null 혹은 undefined 값을 할당할 수 있다는 것</li></ul></li><li><p>strictNullChecks를 적용하면,</p><ul><li>모든 타입은 null, undefined값을 가질 수 없고 가지려면 union type을 이용해서 직접 명시 해야 한다.</li><li>any 타입은 null 과 undefined를 가진다. 예외적으로 void 타입의 경우 undefined를 가진다</li></ul></li><li><p>strictNullChecks를 적용하지 않고, 어떤 값이 null과 undefined를 가진다는 것을 암묵적으로 인정하고 계속 사용하다 보면, 정확히 어떤 타입이 오는지를 개발자 스스로가 간과할수 있다</p></li><li><p>정말로 null과 undefined를 가질 수 있는 경우, 해당 값을 조건부로 제외하고 사용하는것이 좋다</p></li><li><p>사용하려는 함수를 선언할 때부터 매개변수와 리턴 값에 정확한 타입을 지정하려는 노력을 기울여야 하고, 기울이게 될 것!</p></li></ul><p><strong>–strictFunctionTypes</strong></p><ul><li>함수 타입에 대한 bivariant 매개변수 검사를 비활성화합니다</li><li>반환 타입은 공변적(covariant)</li><li>인자 타입은 반공변적(contravariant)</li><li>그런데 타입스크립트에서 인자 타입은 공변적이면서, 반공변적인게 문제</li><li>이 문제를 해결하는 옵션이 strictFunctionTypes</li><li>옵션을 켜면, 에러가 안나던걸 에러 나게 함.</li></ul><img src="/2022/05/12/TS-Compiler-extends/04.png" class=""><img src="/2022/05/12/TS-Compiler-extends/05.png" class=""><p>KeyboardEvent 로 바꿔주면 에러가 사라진다</p><img src="/2022/05/12/TS-Compiler-extends/06.png" class=""><p><strong>–strictPropertyInitialization</strong></p><ul><li>정의되지 않은 클래스의 속성이 생성자에서 초기화되었는지 확인합니다.</li><li>이 옵션을 사용하려면 –strictNullChecks를 사용하도록 설정해야 한다.</li></ul><img src="/2022/05/12/TS-Compiler-extends/07.png" class=""><img src="/2022/05/12/TS-Compiler-extends/08.png" class=""><p><strong>–alwaysStrict</strong></p><ul><li>각 소스 파일에 대해 JavaScript의 strict mode로 코드를 분석하고,’엄격하게 사용’을 해제한다</li></ul>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TypeScript/">TypeScript</category>
      
      
      <category domain="https://sacultang.github.io/tags/TypeScript/">TypeScript</category>
      
      
      <comments>https://sacultang.github.io/2022/05/12/TS-Compiler-extends/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Structural Type System vs Nominal Type System</title>
      <link>https://sacultang.github.io/2022/05/12/TS-Structural-Type-System-vs-Nominal-Type-System/</link>
      <guid>https://sacultang.github.io/2022/05/12/TS-Structural-Type-System-vs-Nominal-Type-System/</guid>
      <pubDate>Thu, 12 May 2022 04:58:34 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Structural-Type-System-vs-Nominal-Type-System&quot;&gt;&lt;a href=&quot;#Structural-Type-System-vs-Nominal-Type-System&quot; class=&quot;headerlink&quot; title=&quot;St</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Structural-Type-System-vs-Nominal-Type-System"><a href="#Structural-Type-System-vs-Nominal-Type-System" class="headerlink" title="Structural Type System vs Nominal Type System"></a>Structural Type System vs Nominal Type System</h1><h2 id="Structural-Type-System-구조가-같으면-같은-타입이다"><a href="#Structural-Type-System-구조가-같으면-같은-타입이다" class="headerlink" title="Structural Type System - 구조가 같으면, 같은 타입이다"></a>Structural Type System - 구조가 같으면, 같은 타입이다</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Iperson</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="title function_">speak</span>(): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonType</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="title function_">speak</span>(): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Iperson 과 PersonType은 똑같은 구조다</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">personInterFace</span>: <span class="title class_">IPerson</span> = &#123;&#125; <span class="keyword">as</span> <span class="built_in">any</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">personType</span>: <span class="title class_">PersonType</span> = &#123;&#125; <span class="keyword">as</span> <span class="built_in">any</span></span><br><span class="line"></span><br><span class="line">personInterface = personType;</span><br><span class="line">personType = personInterface</span><br></pre></td></tr></table></figure><h2 id="nominal-type-system-구조가-같아도-이름이-다르면-다른-타입이다"><a href="#nominal-type-system-구조가-같아도-이름이-다르면-다른-타입이다" class="headerlink" title="nominal type system - 구조가 같아도 이름이 다르면, 다른 타입이다"></a>nominal type system - 구조가 같아도 이름이 다르면, 다른 타입이다</h2><ul><li>nominal type system은 타입스크립트는 따르지 않는다<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PersonID</span> = <span class="built_in">string</span>  &amp; &#123; <span class="keyword">readonly</span> <span class="attr">brand</span>: unique <span class="built_in">symbol</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">PersonID</span>(<span class="params">id: <span class="built_in">string</span></span>): <span class="title class_">PersinID</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> id <span class="keyword">as</span> <span class="title class_">PersonID</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPersonById</span>(<span class="params">id: PersonID</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getPersonbyId</span>(<span class="title function_">personId</span>(<span class="string">&#x27;id-aaaa&#x27;</span>))</span><br><span class="line"><span class="title function_">getPersonbyId</span>((<span class="string">&#x27;id-aaaa&#x27;</span>)) <span class="comment">// error TS2345: Argument of type &#x27;string&#x27; is not assignable to parameter of type &#x27;PersonID&#x27;. Type &#x27;string&#x27; is not assignable to type &#x27;&#123; readonly brand: unique symbol&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TypeScript/">TypeScript</category>
      
      
      <category domain="https://sacultang.github.io/tags/TypeScript/">TypeScript</category>
      
      
      <comments>https://sacultang.github.io/2022/05/12/TS-Structural-Type-System-vs-Nominal-Type-System/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>TypeScript-03</title>
      <link>https://sacultang.github.io/2022/05/12/TypeScript-03/</link>
      <guid>https://sacultang.github.io/2022/05/12/TypeScript-03/</guid>
      <pubDate>Thu, 12 May 2022 03:51:36 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;작성자와-사용자의-관점으로-코드-바라보기&quot;&gt;&lt;a href=&quot;#작성자와-사용자의-관점으로-코드-바라보기&quot; class=&quot;headerlink&quot; title=&quot;작성자와 사용자의 관점으로 코드 바라보기&quot;&gt;&lt;/a&gt;작성자와 사용자의 관점으로 코드 바라보기&lt;/h1&gt;&lt;p&gt;타입이란 해당 변수가 할 수 있는 일을 결정한다&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// JavaScript&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// f1이라는 함수의 body에서는 a를 사용한다&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// a가 할 수 있는 일은 a의 타입이 결정한다&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;f1&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 사용자는 사용법을 숙지하지 않은 채, 문자열을 사용하여 함수를 실행&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;f1&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a * &lt;span class=&quot;number&quot;&gt;38&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;title function_&quot;&gt;f2&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)) &lt;span class=&quot;comment&quot;&gt;// 380&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;title function_&quot;&gt;f2&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;Mark&amp;#x27;&lt;/span&gt;)) &lt;span class=&quot;comment&quot;&gt;// NaN&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;타입스크립트의 추론에 의지하는 경우&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 타입스크립트 코드지만&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// a의 타입을 명시적으로 지정하지 않은 경우이기 때문에 a는 any로 추론된다&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 함수의 리턴타입은 number로 추론된다(NaN도 number이기 때문에)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;f3&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a * &lt;span class=&quot;number&quot;&gt;38&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 사용자는 a가 any이기 때문에, 사용법에 맞게 문자열을 사용하여 함수를 실행&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;title function_&quot;&gt;f3&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)) &lt;span class=&quot;comment&quot;&gt;// 380&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;title function_&quot;&gt;f3&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;Mark&amp;#x27;&lt;/span&gt;)) &lt;span class=&quot;comment&quot;&gt;// NaN&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;nolmplicitAny-옵션&quot;&gt;&lt;a href=&quot;#nolmplicitAny-옵션&quot; class=&quot;headerlink&quot; title=&quot;nolmplicitAny 옵션&quot;&gt;&lt;/a&gt;nolmplicitAny 옵션&lt;/h2&gt;&lt;p&gt;타입을 명시적으로 지정하지 않은경우, 타입스크립트가 추론 중 ‘any’라고 판단하게 되면,&lt;br&gt;컴파일 에러를 발생시켜 명시적으로 지정하도록 유도한다&lt;/p&gt;
&lt;h3 id=&quot;noImplicitAny-에-의한-방어&quot;&gt;&lt;a href=&quot;#noImplicitAny-에-의한-방어&quot; class=&quot;headerlink&quot; title=&quot;noImplicitAny 에 의한 방어&quot;&gt;&lt;/a&gt;noImplicitAny 에 의한 방어&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// error TS7006: Parameter &amp;#x27;a&amp;#x27; implicitly has an &amp;#x27;any&amp;#x27; type&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;f3&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a * &lt;span class=&quot;number&quot;&gt;38&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 사용자의 코드를 실행할 수 없습니다. 컴파일이 정상적으로 마무리 될 수 있도록 수정해야 합니다.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;lof&lt;/span&gt;(&lt;span class=&quot;title function_&quot;&gt;f3&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;title function_&quot;&gt;f3&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;Mark&amp;#x27;&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;number타입으로 추론된 리턴 타입&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 매개변수의 타입은 명시적으로 지정&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 명시적으로 지정하지 않은 함수의 리턴 타입은 number로 추론된다&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;f4&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a: number&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(a&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a * &lt;span class=&quot;number&quot;&gt;38&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 사용자는 사용법에 맞게 숫자형을 사용하여 함수를 실행했습니다.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 해당 함수의 리턴 타입은 number이기 때문에, 타입에 따르면 연산을 바로 할 수 있다&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 하지만 실제 undefined + 5가 실행되어 NaN이 출력된다&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;title function_&quot;&gt;f4&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)) &lt;span class=&quot;comment&quot;&gt;// 190&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;title function_&quot;&gt;f4&lt;/span&gt;(-&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// NaN&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;strictNullChecks-옵션&quot;&gt;&lt;a href=&quot;#strictNullChecks-옵션&quot; class=&quot;headerlink&quot; title=&quot;strictNullChecks 옵션&quot;&gt;&lt;/a&gt;strictNullChecks 옵션&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;모든 타입에 자동으로 포함되어 있는 ‘null’과 ‘undefined’를 제거해준다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;number-undefined-타입으로-추론된-리턴-타입&quot;&gt;&lt;a href=&quot;#number-undefined-타입으로-추론된-리턴-타입&quot; class=&quot;headerlink&quot; title=&quot;number | undefined 타입으로 추론된 리턴 타입&quot;&gt;&lt;/a&gt;number | undefined 타입으로 추론된 리턴 타입&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 매개변수의 타입은 명시적으로 지정&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 명시적으로 지정하지 않은 함수의 리턴 타입은 number | undefined로 추론&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;f4&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a: number&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(a&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a * &lt;span class=&quot;number&quot;&gt;38&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 사용자는 사용법에 맞게 숫자형을 사용하여 함수를 실행&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 해당 함수의 리턴 타입은 number | undefined 이기 때문에,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 타입에 따르면 이어진 연산을 바로 할 수 없다&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 컴파일 에러를 고쳐야하기 때문에 사용자와 작성자가 의논을 해야한다&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;title function_&quot;&gt;f4&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;title function_&quot;&gt;f4&lt;/span&gt;(-&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// error TS2532: Object is possibly &amp;#x27;undefined&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;명시적으로 리턴타입을 지정해야 할까?&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 매개변수의 타입과 함수의 리턴 타입을 명시적으로 지정했습니다.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 실제 함수 구현부의 리턴 타입과 명시적으로 지정한 타입이 일치하지 않아 컴파일 에러가 발생한다&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// error TS2366&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;f5&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a: number&lt;/span&gt;): number &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( a &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123; &lt;span class=&quot;comment&quot;&gt;// if만 리턴 되기 때문에 if가 아닌 부분에 대한 작업이 필요함&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a * &lt;span class=&quot;number&quot;&gt;38&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;noImplicitReturns 옵션을 켜면&lt;ul&gt;
&lt;li&gt;함수내에서 모든 코드가 값을 리턴하지 않으면, 컴파일 에러를 발생 시킨다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// if가 아닌 경우 return을 직접하지 않고 코드가 종료된다&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// error TS7030: Not all code paths return a value.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;f5&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a: number&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( a &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a * &lt;span class=&quot;number&quot;&gt;38&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="작성자와-사용자의-관점으로-코드-바라보기"><a href="#작성자와-사용자의-관점으로-코드-바라보기" class="headerlink" title="작성자와 사용자의 관점으로 코드 바라보기"></a>작성자와 사용자의 관점으로 코드 바라보기</h1><p>타입이란 해당 변수가 할 수 있는 일을 결정한다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JavaScript</span></span><br><span class="line"><span class="comment">// f1이라는 함수의 body에서는 a를 사용한다</span></span><br><span class="line"><span class="comment">// a가 할 수 있는 일은 a의 타입이 결정한다</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">a</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 사용자는 사용법을 숙지하지 않은 채, 문자열을 사용하여 함수를 실행</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">a</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> a * <span class="number">38</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f2</span>(<span class="number">10</span>)) <span class="comment">// 380</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f2</span>(<span class="string">&#x27;Mark&#x27;</span>)) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p>타입스크립트의 추론에 의지하는 경우</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 타입스크립트 코드지만</span></span><br><span class="line"><span class="comment">// a의 타입을 명시적으로 지정하지 않은 경우이기 때문에 a는 any로 추론된다</span></span><br><span class="line"><span class="comment">// 함수의 리턴타입은 number로 추론된다(NaN도 number이기 때문에)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f3</span>(<span class="params">a</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> a * <span class="number">38</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 사용자는 a가 any이기 때문에, 사용법에 맞게 문자열을 사용하여 함수를 실행</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f3</span>(<span class="number">10</span>)) <span class="comment">// 380</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f3</span>(<span class="string">&#x27;Mark&#x27;</span>)) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h2 id="nolmplicitAny-옵션"><a href="#nolmplicitAny-옵션" class="headerlink" title="nolmplicitAny 옵션"></a>nolmplicitAny 옵션</h2><p>타입을 명시적으로 지정하지 않은경우, 타입스크립트가 추론 중 ‘any’라고 판단하게 되면,<br>컴파일 에러를 발생시켜 명시적으로 지정하도록 유도한다</p><h3 id="noImplicitAny-에-의한-방어"><a href="#noImplicitAny-에-의한-방어" class="headerlink" title="noImplicitAny 에 의한 방어"></a>noImplicitAny 에 의한 방어</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// error TS7006: Parameter &#x27;a&#x27; implicitly has an &#x27;any&#x27; type</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f3</span>(<span class="params">a</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> a * <span class="number">38</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 사용자의 코드를 실행할 수 없습니다. 컴파일이 정상적으로 마무리 될 수 있도록 수정해야 합니다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">lof</span>(<span class="title function_">f3</span>(<span class="number">10</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f3</span>(<span class="string">&#x27;Mark&#x27;</span>) + <span class="number">5</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>number타입으로 추론된 리턴 타입</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 매개변수의 타입은 명시적으로 지정</span></span><br><span class="line"><span class="comment">// 명시적으로 지정하지 않은 함수의 리턴 타입은 number로 추론된다</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f4</span>(<span class="params">a: number</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(a&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a * <span class="number">38</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 사용자는 사용법에 맞게 숫자형을 사용하여 함수를 실행했습니다.</span></span><br><span class="line"><span class="comment">// 해당 함수의 리턴 타입은 number이기 때문에, 타입에 따르면 연산을 바로 할 수 있다</span></span><br><span class="line"><span class="comment">// 하지만 실제 undefined + 5가 실행되어 NaN이 출력된다</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f4</span>(<span class="number">5</span>)) <span class="comment">// 190</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f4</span>(-<span class="number">5</span>) + <span class="number">5</span>) <span class="comment">// NaN</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="strictNullChecks-옵션"><a href="#strictNullChecks-옵션" class="headerlink" title="strictNullChecks 옵션"></a>strictNullChecks 옵션</h2><ul><li>모든 타입에 자동으로 포함되어 있는 ‘null’과 ‘undefined’를 제거해준다</li></ul><h3 id="number-undefined-타입으로-추론된-리턴-타입"><a href="#number-undefined-타입으로-추론된-리턴-타입" class="headerlink" title="number | undefined 타입으로 추론된 리턴 타입"></a>number | undefined 타입으로 추론된 리턴 타입</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 매개변수의 타입은 명시적으로 지정</span></span><br><span class="line"><span class="comment">// 명시적으로 지정하지 않은 함수의 리턴 타입은 number | undefined로 추론</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f4</span>(<span class="params">a: number</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(a&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a * <span class="number">38</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 사용자는 사용법에 맞게 숫자형을 사용하여 함수를 실행</span></span><br><span class="line"><span class="comment">// 해당 함수의 리턴 타입은 number | undefined 이기 때문에,</span></span><br><span class="line"><span class="comment">// 타입에 따르면 이어진 연산을 바로 할 수 없다</span></span><br><span class="line"><span class="comment">// 컴파일 에러를 고쳐야하기 때문에 사용자와 작성자가 의논을 해야한다</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f4</span>(<span class="number">5</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f4</span>(-<span class="number">5</span>) + <span class="number">5</span>) <span class="comment">// error TS2532: Object is possibly &#x27;undefined&#x27;</span></span><br></pre></td></tr></table></figure><p>명시적으로 리턴타입을 지정해야 할까?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 매개변수의 타입과 함수의 리턴 타입을 명시적으로 지정했습니다.</span></span><br><span class="line"><span class="comment">// 실제 함수 구현부의 리턴 타입과 명시적으로 지정한 타입이 일치하지 않아 컴파일 에러가 발생한다</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// error TS2366</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f5</span>(<span class="params">a: number</span>): number &#123;</span><br><span class="line">  <span class="keyword">if</span>( a &gt; <span class="number">0</span>)&#123; <span class="comment">// if만 리턴 되기 때문에 if가 아닌 부분에 대한 작업이 필요함</span></span><br><span class="line">    <span class="keyword">return</span> a * <span class="number">38</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>noImplicitReturns 옵션을 켜면<ul><li>함수내에서 모든 코드가 값을 리턴하지 않으면, 컴파일 에러를 발생 시킨다</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if가 아닌 경우 return을 직접하지 않고 코드가 종료된다</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// error TS7030: Not all code paths return a value.</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f5</span>(<span class="params">a: number</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>( a &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a * <span class="number">38</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="매개변수에-object가-들어오는-경우"><a href="#매개변수에-object가-들어오는-경우" class="headerlink" title="매개변수에 object가 들어오는 경우"></a>매개변수에 object가 들어오는 경우</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JS</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f6</span>(<span class="params">a</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`이름은 <span class="subst">$&#123;a.name&#125;</span>이고, 연령대는 <span class="subst">$&#123;<span class="built_in">Math</span>.floor(a.age / <span class="number">10</span>) * <span class="number">10</span>&#125;</span>대 입니다.`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f6</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;Mark&#x27;</span>, <span class="attr">age</span>: <span class="number">38</span>&#125;)) <span class="comment">// 이름은 Mark이고, 연령대는 30대 입니다</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f6</span>(<span class="string">&#x27;Mark&#x27;</span>)) <span class="comment">// 이름은 undefined이고, 연령대는 NaN대 입니다</span></span><br></pre></td></tr></table></figure><h3 id="object-literal-type"><a href="#object-literal-type" class="headerlink" title="object literal type"></a>object literal type</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f7</span>(<span class="params">a: &#123;name: string; age: number&#125;</span>): string &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`이름은 <span class="subst">$&#123;a.name&#125;</span>이고, 연령대는 <span class="subst">$&#123;<span class="built_in">Math</span>.floor(a.age / <span class="number">10</span>) * <span class="number">10</span>&#125;</span>대 입니다.`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f7</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;Mark&#x27;</span>, <span class="attr">age</span>:<span class="number">38</span>&#125;)) <span class="comment">// 이름은 Mark이고, 연령대는 30대 입니다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f7</span>(<span class="string">&#x27;Mark&#x27;</span>)) <span class="comment">// error TS2345 : Argument of type &#x27;string&#x27; is not assignable to parameter of type &#x27;&#123;name: string; age: number;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>매번 이렇게 오브젝트의 타입을 지정해주는건 힘들기 때문에 나만의 타입을 만들 수 있다</p><h3 id="나만의-타입을-만드는-방법"><a href="#나만의-타입을-만드는-방법" class="headerlink" title="나만의 타입을 만드는 방법"></a>나만의 타입을 만드는 방법</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">PersonInterface</span> &#123;</span><br><span class="line">  name : string</span><br><span class="line">  age : number</span><br><span class="line">&#125;</span><br><span class="line">type <span class="title class_">PersonTypeAlias</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">  <span class="attr">age</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f8</span>(<span class="params">a: PersonInterface</span>): string &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`이름은 <span class="subst">$&#123;a.name&#125;</span>이고, 연령대는 <span class="subst">$&#123;<span class="built_in">Math</span>.floor(a.age/<span class="number">10</span>) * <span class="number">10</span>&#125;</span>대 입니다.`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f8</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;Mark&#x27;</span>, <span class="attr">age</span>: <span class="number">38</span>&#125;)) <span class="comment">// 이름은 Mark이고, 연령대는 30대 입니다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f8</span>(<span class="string">&#x27;Mark&#x27;</span>)) <span class="comment">// error TS2345: Argument of type &#x27;string&#x27; is not assignable to parameter of type &#x27;PersonInterface&#x27;</span></span><br></pre></td></tr></table></figure><p>타입스크립트 코드를 작성하는 사람으로서 어떻게 타입을 표현할 수 있는지가 중요</p>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TypeScript/">TypeScript</category>
      
      
      <category domain="https://sacultang.github.io/tags/TypeScript/">TypeScript</category>
      
      
      <comments>https://sacultang.github.io/2022/05/12/TypeScript-03/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>

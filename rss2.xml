<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ㅇㅇㅈ Blog</title>
    <link>https://sacultang.github.io/</link>
    
    <atom:link href="https://sacultang.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Wed, 06 Jul 2022 06:34:08 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Final-Project-2</title>
      <link>https://sacultang.github.io/2022/07/06/Final-Project-2/</link>
      <guid>https://sacultang.github.io/2022/07/06/Final-Project-2/</guid>
      <pubDate>Wed, 06 Jul 2022 05:21:49 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Final-Project-02&quot;&gt;&lt;a href=&quot;#Final-Project-02&quot; class=&quot;headerlink&quot; title=&quot;Final-Project-02&quot;&gt;&lt;/a&gt;Final-Project-02&lt;/h1&gt;&lt;h3 id=&quot;2022-07-0</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Final-Project-02"><a href="#Final-Project-02" class="headerlink" title="Final-Project-02"></a>Final-Project-02</h1><h3 id="2022-07-06"><a href="#2022-07-06" class="headerlink" title="2022.07.06"></a>2022.07.06</h3><p>스타일 작업을 도맡아 한다고 했다.<br>스타일드 컴포넌트로 테마설정도 하고…<br>switch case로 클릭하는거에 따라 보기타입이 바뀌게도 설정 해 줄 수 있다  </p><p>나중에 코드 정리해야지  </p><p>일단 지금은 카테고리 버튼을 누르면 페이지가 이동되고<br>이동된 페이지에 상단에 클릭된 버튼이 활성화 되어 있다  </p><img src="/2022/07/06/Final-Project-2/01.png" class=""><img src="/2022/07/06/Final-Project-2/02.png" class=""><p>문제는 버튼들이 가로로 나열되어있고 overflow scroll인데</p><p>마지막 카테고리를 클릭하면 스크롤하기 전에 해당 버튼이 활성화 된게 안 보인다는 점..</p><img src="/2022/07/06/Final-Project-2/03.png" class=""><p>일단 아이디어는 주소로 넘어오는 params와<br>버튼의 id를 비교해서 같으면 색상을 활성화 해주는거다  </p><p>그래서 검색 시작  </p><p>useRef 와 scrollIntoView 라는걸 사용하면 클릭하면 참조값에 스크롤이 된다고 해서 작성 해봤다.  </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">CategoryButton</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> params = <span class="title function_">useParams</span>();</span><br><span class="line">  <span class="keyword">const</span> btnRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    btnRef.<span class="property">current</span>.<span class="title function_">scrollIntoView</span>(&#123;</span><br><span class="line">          <span class="attr">behavior</span>: <span class="string">&quot;smooth&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">QuickButtonWrap</span> <span class="attr">id</span>=<span class="string">&quot;scroll-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;mainCategory.map((category) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">RadiusButton</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">orange</span>=<span class="string">&#123;params.id</span> === <span class="string">category.id&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">ref</span>=<span class="string">&#123;btnRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;category.category&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">RadiusButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        );</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">QuickButtonWrap</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CategoryButton</span>;</span><br></pre></td></tr></table></figure><p>이렇게 작성했더니 맵을 돌면서 마지막 버튼에만 활성이 되는 것이다</p><p>근데 여럿 찾아본 블로그와 다른 점은.. 블로그에서는 ref를 부모로부터 받아와 참조를 하는거지만<br>여기서는 그렇지가 않다 부모 자식 관계도 아니기 때문에….  </p><p>그리고 다시 폭풍 검색  </p><p>찾다보니 ref를 배열로 저장할 수 있더라</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ref=&#123;<span class="function">(<span class="params">el</span>) =&gt;</span> (btnRef.<span class="property">current</span>[idx] = el)&#125;</span><br></pre></td></tr></table></figure><p>이런식인데<br>맵을 돌면서 index값으로 current를 찾아 내는 방식인거 같다!?  </p><p>그래서 일단 배열로 저장하고 콘솔로 찍어 보았다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">CategoryButton</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> params = <span class="title function_">useParams</span>();</span><br><span class="line">  <span class="keyword">const</span> btnRef = <span class="title function_">useRef</span>([]); <span class="comment">// 배열로 설정</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    btnRef.<span class="property">current</span>.<span class="title function_">scrollIntoView</span>(&#123;</span><br><span class="line">          <span class="attr">behavior</span>: <span class="string">&quot;smooth&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">QuickButtonWrap</span> <span class="attr">id</span>=<span class="string">&quot;scroll-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;mainCategory.map((category,idx) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">RadiusButton</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">orange</span>=<span class="string">&#123;params.id</span> === <span class="string">category.id&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">ref</span>=<span class="string">&#123;(el)</span> =&gt;</span> (btnRef.current[idx] = el)&#125; // ref를 배열로 저장</span></span><br><span class="line"><span class="language-xml">            &gt;</span></span><br><span class="line"><span class="language-xml">              &#123;category.category&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">RadiusButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        );</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">QuickButtonWrap</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CategoryButton</span>;</span><br></pre></td></tr></table></figure><img src="/2022/07/06/Final-Project-2/04.png" class=""><p>각 버튼의 ref가 배열로 저장된다. </p><p>그럼 이제 btnRef를 for문을 돌면서 해당 인덱스에 있는 텍스트와 params를 비교해서<br>scrollIntoView를 해주면 된다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">CategoryButton</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> params = <span class="title function_">useParams</span>();</span><br><span class="line">  <span class="keyword">const</span> btnRef = <span class="title function_">useRef</span>([]);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    btnRef.<span class="property">current</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, idx</span>) =&gt;</span> &#123; <span class="comment">// 배열을 순회하고</span></span><br><span class="line">      <span class="keyword">if</span> (item.<span class="property">innerText</span>.<span class="title function_">toLowerCase</span>() === params.<span class="property">id</span>) &#123; <span class="comment">// innertext와 비교를 했다..</span></span><br><span class="line">        btnRef.<span class="property">current</span>[idx].<span class="title function_">scrollIntoView</span>(&#123; <span class="comment">// true 일시 해당 index의 ref로 scrollIntoView가 된다</span></span><br><span class="line">          <span class="attr">behavior</span>: <span class="string">&quot;smooth&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">QuickButtonWrap</span> <span class="attr">id</span>=<span class="string">&quot;scroll-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;mainCategory.map((category, idx) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">to</span>=<span class="string">&#123;</span>`/<span class="attr">quick</span>$&#123;<span class="attr">category.path</span>&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">key</span>=<span class="string">&#123;category.id&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">id</span>=<span class="string">&#123;category.id&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">RadiusButton</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">orange</span>=<span class="string">&#123;params.id</span> === <span class="string">category.id&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">ref</span>=<span class="string">&#123;(el)</span> =&gt;</span> (btnRef.current[idx] = el)&#125;</span></span><br><span class="line"><span class="language-xml">            &gt;</span></span><br><span class="line"><span class="language-xml">              &#123;category.category&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">RadiusButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        );</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">QuickButtonWrap</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CategoryButton</span>;</span><br></pre></td></tr></table></figure><img src="/2022/07/06/Final-Project-2/01.gif" class=""><p>잘 작동 된다!</p>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/React/">React</category>
      
      <category domain="https://sacultang.github.io/categories/Web/React/Project/">Project</category>
      
      
      <category domain="https://sacultang.github.io/tags/React/">React</category>
      
      
      <comments>https://sacultang.github.io/2022/07/06/Final-Project-2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2022-07-02_TIL</title>
      <link>https://sacultang.github.io/2022/07/02/2022-07-02-TIL/</link>
      <guid>https://sacultang.github.io/2022/07/02/2022-07-02-TIL/</guid>
      <pubDate>Fri, 01 Jul 2022 20:38:13 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;axios&quot;&gt;&lt;a href=&quot;#axios&quot; class=&quot;headerlink&quot; title=&quot;axios&quot;&gt;&lt;/a&gt;axios&lt;/h2&gt;&lt;p&gt;axios 라이브러리에는 많은 기능이 들어있는거 같다..&lt;br&gt;그 동안 정말 axios로 요청만 날리고 </description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>axios 라이브러리에는 많은 기능이 들어있는거 같다..<br>그 동안 정말 axios로 요청만 날리고 있었다  </p><p>axios.create()를 통해 baseURL, header 등을 설정해 놓을 수 있다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clientServer = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">SERVER</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> clientServer;</span><br></pre></td></tr></table></figure><p>사용 할 때는 axios도 임폴트가 필요 없다<br>clientServer만 임폴트 해주면 된다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> clientServer <span class="keyword">from</span> <span class="string">&quot;./baseUrl&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getMasterData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">clientServer</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&quot;/master&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="property">data</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">      <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>header에 토큰 값도 미리 설정 해 놓을 수 도 있다  </p>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/">TIL</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/2022-06/">2022.06</category>
      
      
      <category domain="https://sacultang.github.io/tags/JavaScript/">JavaScript</category>
      
      
      <comments>https://sacultang.github.io/2022/07/02/2022-07-02-TIL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2022-06-27-TIL</title>
      <link>https://sacultang.github.io/2022/06/27/2022-06-27-TIL/</link>
      <guid>https://sacultang.github.io/2022/06/27/2022-06-27-TIL/</guid>
      <pubDate>Sun, 26 Jun 2022 16:33:35 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;URLSearchParmas&quot;&gt;&lt;a href=&quot;#URLSearchParmas&quot; class=&quot;headerlink&quot; title=&quot;URLSearchParmas&quot;&gt;&lt;/a&gt;URLSearchParmas&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a hr</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="URLSearchParmas"><a href="#URLSearchParmas" class="headerlink" title="URLSearchParmas"></a>URLSearchParmas</h1><blockquote><p><a href="https://developer.mozilla.org/ko/docs/Web/API/URLSearchParams">https://developer.mozilla.org/ko/docs/Web/API/URLSearchParams</a></p></blockquote><img src="/2022/06/27/2022-06-27-TIL/01.png" class=""><p>공백이나 특수 문자는 url에 인코딩한 형태로 들어가야한다</p><p>encodeURI()를 사용할 수도 있지만 번거롭다</p><p>URLSearchParams를 이용해서 변환해 줄 수 있다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(&#123;<span class="string">&#x27;foo&#x27;</span> : <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;q&#x27;</span>: <span class="string">&#x27;안녕 하 세 요 ^^&#x27;</span>&#125;)</span><br><span class="line">params.<span class="title function_">toString</span>()</span><br><span class="line"><span class="comment">// &#x27;foo=1&amp;q=%EC%95%88%EB%85%95+%ED%95%98+%EC%84%B8+%EC%9A%94+%5E%5E&#x27;</span></span><br></pre></td></tr></table></figure><img src="/2022/06/27/2022-06-27-TIL/02.png" class=""><p>URLSearchParams에 객체의 형태로 넣어 줬는데<br>주소에서 사용 할 수 있는 쿼리파라미터에 키 밸류 값으로 자동으로 해준다</p>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/">TIL</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/2022-06/">2022.06</category>
      
      
      <category domain="https://sacultang.github.io/tags/JavaScript/">JavaScript</category>
      
      
      <comments>https://sacultang.github.io/2022/06/27/2022-06-27-TIL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Final-Project 01</title>
      <link>https://sacultang.github.io/2022/06/25/Final-Project/</link>
      <guid>https://sacultang.github.io/2022/06/25/Final-Project/</guid>
      <pubDate>Fri, 24 Jun 2022 16:43:32 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Final-project-01&quot;&gt;&lt;a href=&quot;#Final-project-01&quot; class=&quot;headerlink&quot; title=&quot;Final-project 01&quot;&gt;&lt;/a&gt;Final-project 01&lt;/h1&gt;&lt;h3 id=&quot;2022-06-2</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Final-project-01"><a href="#Final-project-01" class="headerlink" title="Final-project 01"></a>Final-project 01</h1><h3 id="2022-06-25-새벽"><a href="#2022-06-25-새벽" class="headerlink" title="2022.06.25 새벽.."></a>2022.06.25 새벽..</h3><img src="/2022/06/25/Final-Project/01.png" class=""><ul><li><p>본격적으로 final project가 시작되었다..<br>아직 기획단계라서 디자인도 나오진 않았지만<br>미리 API를 받아 코드를 작성 해 볼 수 있었다..</p></li><li><p>맨 처음 이 프로젝트를 선택 할 때 많은 데이터를 다룰 수 있어서 선택 했는데<br>럴수가.. 데이터가 너무 많다</p></li></ul><p>검색을 하면 데이터에서 맞는 키워드를 화면에 띄워줘야 하는데<br>데이터양이 많아서 쓰로틀링이 너무 걸린다..<br>어떻게 해결해야 하나<br>저 에러 메세지 조차 모든 데이터를 필터링 한 거도 아니다<br>기업측에서 보내준 데모사이트에서는 바로바로 필터링돼서 화면에 출력 되던데<br>어떻게 하는거지..?</p><p>lodash 라이브러리를 사용해서 filter하면 좀 더 빠르다 해서 해봤는데<br>차이가 있는지 모르겠다 -. - </p><h3 id="2022-06-26"><a href="#2022-06-26" class="headerlink" title="2022.06.26"></a>2022.06.26</h3><ol><li>어찌어찌어찌 키워드를 에러 없이 띄우는데 까지는 성공을 했다</li><li>처음보다는 낫지만 아직 성능이슈가 있다 첫 글자를 입력하면 쓰로틀링이 걸린다</li><li>new Map() 이나 Set()을 이용해서 필터링을 하는 방법을 공부 해봐야겠다</li><li>정규식은 어렵다</li></ol><p>정규식에 변수를 넣기 위해 검색 해보았다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> regex = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`\s(<span class="subst">$&#123;keyword&#125;</span>)+|(<span class="subst">$&#123;keyword&#125;</span>)+`</span>, <span class="string">&quot;im&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> regex.<span class="title function_">test</span>(item.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><p>일반적인 자바스크립트 보간법으로 변수를 넣어 줄 수 있다.</p><img src="/2022/06/25/Final-Project/02.png" class=""><p>첫 시작과 중간에 같은 단어가 있으면 첫 단어를 찾지 못한다는 점이 문제였다</p><img src="/2022/06/25/Final-Project/03.png" class=""><p><code>|</code>를 이용해서 정규식을 추가해 줄 수 있었다..</p>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/React/">React</category>
      
      <category domain="https://sacultang.github.io/categories/Web/React/Project/">Project</category>
      
      
      <category domain="https://sacultang.github.io/tags/React/">React</category>
      
      
      <comments>https://sacultang.github.io/2022/06/25/Final-Project/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2022-06-20-TIL</title>
      <link>https://sacultang.github.io/2022/06/21/2022-06-20-TIL/</link>
      <guid>https://sacultang.github.io/2022/06/21/2022-06-20-TIL/</guid>
      <pubDate>Tue, 21 Jun 2022 03:57:17 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;커스텀-훅을-사용하면서-생긴-erro-case&quot;&gt;&lt;a href=&quot;#커스텀-훅을-사용하면서-생긴-erro-case&quot; class=&quot;headerlink&quot; title=&quot;커스텀 훅을 사용하면서 생긴 erro case&quot;&gt;&lt;/a&gt;커스텀 훅을 사용하면</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="커스텀-훅을-사용하면서-생긴-erro-case"><a href="#커스텀-훅을-사용하면서-생긴-erro-case" class="headerlink" title="커스텀 훅을 사용하면서 생긴 erro case"></a>커스텀 훅을 사용하면서 생긴 erro case</h2><img src="/2022/06/21/2022-06-20-TIL/01.png" class=""><p>api 호출 부분과 무한스크롤 부분을 컴포넌트에서 분리 하는 과정에서<br>이런 에러가 발생했다</p><p>검색 해보니  </p><ol><li>react-dom의 버전이 Hook을 사용할수 있는 버전인 16.8.0보다 낮을때</li><li>Hooks를 호출 할 때는 함수형 component의 최상위 부분에서 호출</li><li>동일한 앱에 둘 이상의 사본이 있을때</li></ol><p>일단 1번 케이스는 해당이 안되고<br>3번 케이스도 npm i 로 새로 설치했는데도 아니었다</p><p>그럼 2번이 문제인데.. 분명 hook은 컴포넌트 최상단에서 호출 하고 있는 중인데..</p><p>일단 분리한 코드는 </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect, useRef, useCallback &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useDispatch &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">GetDataHooks</span> = (<span class="params">keyword, page, setPage</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [newsData, setNewsData] = <span class="title function_">useState</span>([]);</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [hasMore, setHasMore] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [error, setError] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">API_KEY</span> = process.<span class="property">env</span>.<span class="property">REACT_APP_API_KEY</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setNewsData</span>([]);</span><br><span class="line">  &#125;, [keyword]);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (keyword &amp;&amp; !loading) &#123;</span><br><span class="line">      <span class="keyword">const</span> searchTimeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setLoading</span>(<span class="literal">true</span>);</span><br><span class="line">        <span class="title function_">setError</span>(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">let</span> cancel;</span><br><span class="line">        <span class="title function_">axios</span>(&#123;</span><br><span class="line">          <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">          <span class="attr">url</span>: <span class="string">`https://api.nytimes.com/svc/search/v2/articlesearch.json?api-key=<span class="subst">$&#123;API_KEY&#125;</span>`</span>,</span><br><span class="line">          <span class="attr">params</span>: &#123; <span class="attr">q</span>: keyword, <span class="attr">sort</span>: <span class="string">&quot;newest&quot;</span>, page &#125;,</span><br><span class="line">          <span class="attr">cancelToken</span>: <span class="keyword">new</span> axios.<span class="title class_">CancelToken</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> (cancel = c)),</span><br><span class="line">        &#125;)</span><br><span class="line">          .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">setNewsData</span>(<span class="function">(<span class="params">prev</span>) =&gt;</span> [...prev, ...res.<span class="property">data</span>.<span class="property">response</span>.<span class="property">docs</span>]);</span><br><span class="line">            <span class="title function_">setHasMore</span>(res.<span class="property">data</span>.<span class="property">response</span>.<span class="property">docs</span>.<span class="property">length</span> &gt; <span class="number">0</span>);</span><br><span class="line">            <span class="title function_">setLoading</span>(<span class="literal">false</span>);</span><br><span class="line">          &#125;)</span><br><span class="line">          .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (axios.<span class="title function_">isCancel</span>(e)) <span class="keyword">return</span>;</span><br><span class="line">            <span class="title function_">setError</span>(<span class="literal">true</span>);</span><br><span class="line">          &#125;);</span><br><span class="line">        <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;SEARCH_HISTORY&quot;</span>, <span class="attr">payload</span>: keyword &#125;);</span><br><span class="line">      &#125;, <span class="number">500</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(searchTimeout);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [keyword, page]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> observer = <span class="title function_">useRef</span>();</span><br><span class="line">  <span class="keyword">const</span> lastCardNewsRef = <span class="title function_">useCallback</span>(</span><br><span class="line">    <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;visible&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (loading) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">if</span> (observer.<span class="property">current</span>) observer.<span class="property">current</span>.<span class="title function_">disconnect</span>();</span><br><span class="line">      observer.<span class="property">current</span> = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (entries[<span class="number">0</span>].<span class="property">isIntersecting</span> &amp;&amp; hasMore) &#123;</span><br><span class="line">          <span class="title function_">setPage</span>(<span class="function">(<span class="params">page</span>) =&gt;</span> page + <span class="number">1</span>);</span><br><span class="line">          ✅ <span class="comment">// 문제의 호출</span></span><br><span class="line">          <span class="title class_">GetDataHooks</span>(keyword, page, setPage,)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (node) observer.<span class="property">current</span>.<span class="title function_">observe</span>(node);</span><br><span class="line">    &#125;,</span><br><span class="line">    [loading, hasMore]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; newsData, loading, lastCardNewsRef &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">GetDataHooks</span>;</span><br></pre></td></tr></table></figure><p>keyword, page, setPage를 인자로 받아서 안에서 api를 호출 하여<br>newsData와, loading값, 무한스크롤 함수를 return 해주게 작성했다  </p><p>문제는.. 커스텀훅 안에서 커스텀훅을 호출 하고 있어서 이런 에러가 나는 거였다……</p><p>저 GetDataHooks()를 지워 주니 에러가 사라졌다 ..</p>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/">TIL</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/2022-06/">2022.06</category>
      
      
      <category domain="https://sacultang.github.io/tags/JavaScript/">JavaScript</category>
      
      
      <comments>https://sacultang.github.io/2022/06/21/2022-06-20-TIL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2022-06-18-TIL</title>
      <link>https://sacultang.github.io/2022/06/18/2022-06-18-TIL/</link>
      <guid>https://sacultang.github.io/2022/06/18/2022-06-18-TIL/</guid>
      <pubDate>Fri, 17 Jun 2022 18:02:10 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Ref&quot;&gt;&lt;a href=&quot;#Ref&quot; class=&quot;headerlink&quot; title=&quot;Ref&quot;&gt;&lt;/a&gt;Ref&lt;/h1&gt;&lt;p&gt;부모컴포넌트에서 자식컴포넌트의 DOM엘리먼트를 참조 하고 싶을때&lt;/p&gt;
&lt;figure class=&quot;highlight j</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><p>부모컴포넌트에서 자식컴포넌트의 DOM엘리먼트를 참조 하고 싶을때</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewsList Component</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">NewsList</span> = (<span class="params">&#123; news, lastCardNewsRef &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Container</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;news.map((newsData, idx) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return <span class="tag">&lt;<span class="name">News</span> <span class="attr">ref</span>=<span class="string">&#123;lastCardNewsRef&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Container</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// News Component</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">News</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Card</span> <span class="attr">ref</span>=<span class="string">&#123;props.ref&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;props.headline&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">News</span>;</span><br></pre></td></tr></table></figure><img src="/2022/06/18/2022-06-18-TIL/01.png" class=""><ul><li>함수 컴포넌트는 인스턴스가 없기 때문에 ref어트리뷰트를 사용할 수 없다</li></ul><p><a href="https://ko.reactjs.org/docs/forwarding-refs.html#forwarding-refs-to-dom-components">https://ko.reactjs.org/docs/forwarding-refs.html#forwarding-refs-to-dom-components</a></p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p><code>ref</code></p><ul><li>ref는 특정 DOM (Html)을 참조 할 때 사용 한다</li><li>ref는 리액트 예약어이다 (ex: key, className)</li><li>함수 컴포넌트는 인스턴스가 없기 때문에 ref어트리뷰트를 사용할 수 없다</li><li>간단하게는 ref의 이름을 myRef 같은 이름으로 수정하여 해결 할 수 있다</li><li>또는 리액트훅 forwardRef를 이용해 ref 참조 값을 사용 할 수 있다</li></ul><h3 id="How-to-solve"><a href="#How-to-solve" class="headerlink" title="How to solve"></a>How to solve</h3><ol><li>ref 이름 변경</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewsList Component</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">NewsList</span> = (<span class="params">&#123; news, lastCardNewsRef &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Container</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;news.map((newsData, idx) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">News</span> <span class="attr">myRef</span>=<span class="string">&#123;lastCardNewsRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            ✅ // <span class="attr">myRef</span> 이름으로 컴포넌트에 전달</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">        );</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Container</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// News Component</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">News</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Card</span> <span class="attr">ref</span>=<span class="string">&#123;props.myRef&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ✅ // props로 myRef</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;props.headline&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">News</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>forwardRef hooks</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewsList Component</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">NewsList</span> = (<span class="params">&#123; news, lastCardNewsRef &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Container</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;news.map((newsData, idx) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">News</span> <span class="attr">ref</span>=<span class="string">&#123;lastCardNewsRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            ✅ // <span class="attr">ref</span> 그대로 사용</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">        );</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Container</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// News Component</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; forwardRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">News</span> = <span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">             ✅ <span class="comment">// forwardRef 사용</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Card</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">           ✅ // ref 사용</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;props.headline&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">News</span>;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/">TIL</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/2022-06/">2022.06</category>
      
      
      <category domain="https://sacultang.github.io/tags/JavaScript/">JavaScript</category>
      
      
      <comments>https://sacultang.github.io/2022/06/18/2022-06-18-TIL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2022-06-16-TIL</title>
      <link>https://sacultang.github.io/2022/06/16/2022-06-16-TIL/</link>
      <guid>https://sacultang.github.io/2022/06/16/2022-06-16-TIL/</guid>
      <pubDate>Wed, 15 Jun 2022 17:27:16 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;date-fns&quot;&gt;&lt;a href=&quot;#date-fns&quot; class=&quot;headerlink&quot; title=&quot;date-fns&quot;&gt;&lt;/a&gt;date-fns&lt;/h1&gt;&lt;p&gt;미니프로젝트 진행 중 데이터 중 날짜 데이터가 있어서 날짜를 가공하기 위해 date</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="date-fns"><a href="#date-fns" class="headerlink" title="date-fns"></a>date-fns</h1><p>미니프로젝트 진행 중 데이터 중 날짜 데이터가 있어서 날짜를 가공하기 위해 date-fns 라이브러리를 사용해보기로 했다</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i date-fns</span><br></pre></td></tr></table></figure><h2 id="format"><a href="#format" class="headerlink" title="format()"></a>format()</h2><p>api로 받아오는 데이터는 </p><img src="/2022/06/16/2022-06-16-TIL/01.png" class=""><p>이런식으로 저장되어있다</p><p>기본적으로 date를 원하는 형식으로 출력할수있는 메소드 <code>format()</code>이 있다<br>format()은 2개의 인수가 필수고 option으로 다른 값들을 넣어 줄 수 있다<br>첫 번째는 변경할 date<br>두 번째는 원하는 format 이다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">format</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="string">&#x27;yyyy.MM.dd HH:mm&#x27;</span>)</span><br><span class="line"><span class="comment">// 2022.06.16 02:47</span></span><br></pre></td></tr></table></figure><p>받아온 데이터를 <code>yyyy.MM.dd HH:mm</code>형식으로 바꿔보자</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">format</span>(pub_date, <span class="string">&#x27;yyyy.MM.dd HH:mm&#x27;</span>)</span><br></pre></td></tr></table></figure><p>으로 작성 했더니 error를 뱉어 냈다</p><img src="/2022/06/16/2022-06-16-TIL/02.png" class=""><p>v2.0.0-beta 부터 문자열을 허용하지 않는다고 하면서 parseISO를 사용해달라고 한다  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">format</span>(<span class="title function_">parseISO</span>(pub_date), <span class="string">&#x27;yyyy.MM.dd HH:mm&#x27;</span>)</span><br></pre></td></tr></table></figure><p>이렇게 작성해 줬더니 잘 된다.</p><h2 id="differenceInDays-differenceInHours"><a href="#differenceInDays-differenceInHours" class="headerlink" title="differenceInDays() , differenceInHours()"></a>differenceInDays() , differenceInHours()</h2><p>데이터가 작성된 날짜와 현재의 날짜를 비교해서 얼마전에 작성되었는지도 출력해주기 위해 <code>differenceInDays()</code> , <code>differenceInHours()</code> 도 사용해 주었다</p><p>두 메소드 다 비교할 날짜 2개를 인수로 넣어 준다   </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="title function_">differenceInHours</span>(</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2014</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">19</span>, <span class="number">0</span>),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2014</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">50</span>)</span><br><span class="line">)</span><br><span class="line"><span class="comment">//=&gt; 12</span></span><br></pre></td></tr></table></figure><p><code>differenceInDays()</code>를 사용하면 작성된 날짜와 현재 날짜가 같으면 0이 반환 되기 때문에<br><code>differenceInHours()</code>를 사용해 날짜가 같으면 시간으로 표시 해 준다</p><p>함수로 만들어 조건에 맞게 출력할 수 있도록 해준다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">dateFunc</span> = (<span class="params">pub_date</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="title function_">differenceInDays</span>(<span class="title function_">parseISO</span>(pub_date), <span class="keyword">new</span> <span class="title class_">Date</span>())) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="title function_">differenceInDays</span>(<span class="title function_">parseISO</span>(pub_date), <span class="keyword">new</span> <span class="title class_">Date</span>())) + <span class="string">&#x27; 일 전&#x27;</span></span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="title function_">differenceInHours</span>(<span class="title function_">parseISO</span>(pub_date), <span class="keyword">new</span> <span class="title class_">Date</span>())) + <span class="string">&#x27; 시간 전&#x27;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/06/16/2022-06-16-TIL/03.png" class="">  <img src="/2022/06/16/2022-06-16-TIL/04.png" class="">  ]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/">TIL</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/2022-06/">2022.06</category>
      
      
      <category domain="https://sacultang.github.io/tags/JavaScript/">JavaScript</category>
      
      
      <comments>https://sacultang.github.io/2022/06/16/2022-06-16-TIL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2022-06-14-TIL</title>
      <link>https://sacultang.github.io/2022/06/14/2022-06-14-TIL/</link>
      <guid>https://sacultang.github.io/2022/06/14/2022-06-14-TIL/</guid>
      <pubDate>Tue, 14 Jun 2022 13:55:01 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;객체-배열-true-false-반환&quot;&gt;&lt;a href=&quot;#객체-배열-true-false-반환&quot; class=&quot;headerlink&quot; title=&quot;객체 배열 true false 반환&quot;&gt;&lt;/a&gt;객체 배열 true false 반환&lt;/h1&gt;&lt;h2 i</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="객체-배열-true-false-반환"><a href="#객체-배열-true-false-반환" class="headerlink" title="객체 배열 true false 반환"></a>객체 배열 true false 반환</h1><h2 id="Array-prototype-some"><a href="#Array-prototype-some" class="headerlink" title="Array.prototype.some()"></a>Array.prototype.some()</h2><p>객체로 이루어진 배열에서 true false 를 반환하는 메소드</p><blockquote><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/some">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/some</a></p></blockquote><p>미니 프로젝트를 하다가 객체로 이루어진 배열에서 true false를 반환 해야 했는데<br>forEach로 하나씩 비교하다 보니 사이드 이펙트가 일어나면서 버그가 생겼다..</p><p>some()을 이용하면 배열을 순환 후 조건에 알맞는 boolean을 반환 한다</p><p>사용법은 filter()와 동일 하나, filter는 새로운 배열을 반환한다는 점이 차이점</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// checks whether an element is even</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">even</span> = (<span class="params">element</span>) =&gt; element % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="title function_">some</span>(even));</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>실제 project에서는 여러번 사용이 되어 함수로 만들어 주었다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store에 있는 clipped배열안의 headline값과 내가 입력한 headline의 값을 비교하여 true false를 반환한다</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">clipCheck</span> = (<span class="params">clipped</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> !clipped.<span class="title function_">some</span>(<span class="function">(<span class="params">storeData</span>) =&gt;</span> storeData.<span class="property">headLine</span> === headLine);</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/">TIL</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/2022-06/">2022.06</category>
      
      
      <category domain="https://sacultang.github.io/tags/JavaScript/">JavaScript</category>
      
      
      <comments>https://sacultang.github.io/2022/06/14/2022-06-14-TIL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2022-06-12-TIL</title>
      <link>https://sacultang.github.io/2022/06/12/2022-06-12-TIL/</link>
      <guid>https://sacultang.github.io/2022/06/12/2022-06-12-TIL/</guid>
      <pubDate>Sat, 11 Jun 2022 15:35:59 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;검색-요청-최적화&quot;&gt;&lt;a href=&quot;#검색-요청-최적화&quot; class=&quot;headerlink&quot; title=&quot;검색 요청 최적화&quot;&gt;&lt;/a&gt;검색 요청 최적화&lt;/h1&gt;&lt;p&gt;input에 타이핑을 칠때마다 리렌더링이 되면서 데이터요청이 된다..&lt;/p&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="검색-요청-최적화"><a href="#검색-요청-최적화" class="headerlink" title="검색 요청 최적화"></a>검색 요청 최적화</h1><p>input에 타이핑을 칠때마다 리렌더링이 되면서 데이터요청이 된다..</p><p>조건문과 setTimeout으로 인풋에 입력이 끝나면 데이터요청을 하도록 작성</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">App</span>: <span class="variable constant_">FC</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [error, setError] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [news, setNews] = useState&lt;<span class="title class_">News</span>[]&gt;([]);</span><br><span class="line">  <span class="keyword">const</span> [hasMore, setHasMore] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [search, setSearch] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [page, setPage] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 데이터 요청</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getData</span> = (<span class="params">query: <span class="built_in">string</span>, page: <span class="built_in">number</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setLoading</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="title function_">setError</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">      <span class="attr">url</span>: <span class="string">`https://api.nytimes.com/svc/search/v2/articlesearch.json?api-key=<span class="subst">$&#123;API_KEY&#125;</span>`</span>,</span><br><span class="line">      <span class="attr">params</span>: &#123; <span class="attr">q</span>: query, page &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(res.data.response.docs);</span></span><br><span class="line">        <span class="title function_">setNews</span>(<span class="function">(<span class="params">prevNews</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> [...<span class="keyword">new</span> <span class="title class_">Set</span>([...prevNews, ...res.<span class="property">data</span>.<span class="property">response</span>.<span class="property">docs</span>])];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="title function_">setHasMore</span>(res.<span class="property">data</span>.<span class="property">response</span>.<span class="property">docs</span>.<span class="property">length</span> &gt; <span class="number">0</span>);</span><br><span class="line">        <span class="title function_">setLoading</span>(<span class="literal">false</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (axios.<span class="title function_">isCancel</span>(e)) <span class="keyword">return</span>;</span><br><span class="line">        <span class="title function_">setError</span>(<span class="literal">true</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setNews</span>([]);</span><br><span class="line">  &#125;, [search]);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (search !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!loading) &#123;</span><br><span class="line">        <span class="keyword">const</span> timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">getData</span>(search, page);</span><br><span class="line">          <span class="title function_">setPage</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;, <span class="number">1500</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [search, page]);</span><br></pre></td></tr></table></figure><p>먼저 데이터요청 함수 <code>getData</code>를 작성해주고<br><code>useEffect</code> 안에서 함수를 호출 한다.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="title function_">getData</span>(search,page)</span><br><span class="line">&#125;,[search,page])</span><br></pre></td></tr></table></figure><p>이렇게 작성하고 나면 문제점 </p><ol><li>돔이 마운트 될때 useEffect가 한번 실행되면서 검색어를 쓰지 않아도 검색이 시작된다는 점.</li><li>setSearch로 인풋에서 value를 받아올때마다 리렌더링이 되면서 타이핑 갯수만큼 검색요청이 일어난다는 점.</li></ol><p><strong>조건문과 setTimeout으로 해결</strong></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(search !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// search가 비어있지 않으면 요청 시작</span></span><br><span class="line">    <span class="keyword">if</span>(!loading) &#123;</span><br><span class="line">      <span class="comment">// loading이 false이면 요청 시작</span></span><br><span class="line">      <span class="keyword">const</span> <span class="title class_">Timer</span> = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// setTimeout으로 1.5초 후에 getData() 호출</span></span><br><span class="line">        <span class="title function_">getData</span>(search,page)</span><br><span class="line">      &#125;,<span class="number">1500</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="comment">// cleanUp 으로 clearTimeout</span></span><br><span class="line">      <span class="comment">// cleanUp 을 안해주면 그냥 1.5초후에 타이핑 갯수만큼 요청이 일어난다</span></span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,[search,page])</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/">TIL</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/2022-06/">2022.06</category>
      
      
      <category domain="https://sacultang.github.io/tags/JavaScript/">JavaScript</category>
      
      
      <comments>https://sacultang.github.io/2022/06/12/2022-06-12-TIL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Next.js 공식문서 따라만들기 (2)</title>
      <link>https://sacultang.github.io/2022/06/06/Next-js-2/</link>
      <guid>https://sacultang.github.io/2022/06/06/Next-js-2/</guid>
      <pubDate>Mon, 06 Jun 2022 13:40:55 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Next-js-공식문서-따라만들기-2&quot;&gt;&lt;a href=&quot;#Next-js-공식문서-따라만들기-2&quot; class=&quot;headerlink&quot; title=&quot;Next.js 공식문서 따라만들기 (2)&quot;&gt;&lt;/a&gt;Next.js 공식문서 따라만들기 (2)&lt;/h1&gt;&lt;h2 id=&quot;Assets&quot;&gt;&lt;a href=&quot;#Assets&quot; class=&quot;headerlink&quot; title=&quot;Assets&quot;&gt;&lt;/a&gt;Assets&lt;/h2&gt;&lt;p&gt;Next.js는 최상위 &lt;code&gt;public&lt;/code&gt; 디렉토리에서 static assets를 관리한다  &lt;/p&gt;
&lt;h3 id=&quot;img-파일-넣기&quot;&gt;&lt;a href=&quot;#img-파일-넣기&quot; class=&quot;headerlink&quot; title=&quot;img 파일 넣기&quot;&gt;&lt;/a&gt;img 파일 넣기&lt;/h3&gt;&lt;p&gt;&lt;code&gt;public&lt;/code&gt; 디렉토리 안에 &lt;code&gt;images&lt;/code&gt; 디렉토리를 만들고 이미지를 넣어 준다  &lt;/p&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;react&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Link&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;next/link&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;FirstPost&lt;/span&gt; = (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;FirstPost&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#x27;/images/profile.jpg&amp;#x27;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;FirstPost&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&quot;/2022/06/06/Next-js-2/01.png&quot; class=&quot;&quot;&gt;

&lt;p&gt;img src 경로가 신기하다  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;FirstPost&lt;/code&gt; 컴포넌트는 경로가 pages&amp;#x2F;posts 인데 public 안의 images 경로에 바로 접근 했다 ..&lt;/p&gt;
&lt;h3 id=&quot;Image-컴포넌트&quot;&gt;&lt;a href=&quot;#Image-컴포넌트&quot; class=&quot;headerlink&quot; title=&quot;Image 컴포넌트&quot;&gt;&lt;/a&gt;Image 컴포넌트&lt;/h3&gt;&lt;p&gt;시매틱 img태그를 사용하면 다양한 화면 크기에서 반응, 뷰포트에 들어갈때만 이미지 로드 등등..을 수동으로 처리 해야 한다&lt;/p&gt;
&lt;p&gt;그래서 Next.js에서 Image 컴포넌트를 제공한다&lt;br&gt;Image 컴포넌트를 사용하면 Next.js가 알아서 최적화를 해준다&lt;br&gt;Image컴포넌트를 사용하면 빌드할때 이미지를 최적화 하는 대신 사용자가 요청 할때 이미지를 최적화 한단다..&lt;br&gt;그래서 빌드할때 이미지를 10개를 하든 1천만개 이미지를 하든 빌드 시간이 증가하지 않는다&lt;/p&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;react&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Link&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;next/link&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;next/image&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;FirstPost&lt;/span&gt; = (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;FirstPost&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#x27;/images/profile.jpg&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;144&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;144&amp;#125;&lt;/span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;        /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Image&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#x27;/images/profile.jpg&amp;#x27;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;144&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;144&amp;#125;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#x27;profile&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;        /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;FirstPost&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;사용법은 그냥 Image를 임포트하고 일반 img태그 처럼 사용하면 된다 &lt;/p&gt;
&lt;img src=&quot;/2022/06/06/Next-js-2/02.png&quot; class=&quot;&quot;&gt;  
&lt;img src=&quot;/2022/06/06/Next-js-2/03.png&quot; class=&quot;&quot;&gt;  

&lt;p&gt;같은 img를 사용했음에도 불구하고 파일 크기를보면 img태그와 Image컴포넌트로 만든 img의 차이가 많이 난다  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;이미지는 기본적으로 지연 로드됩니다. 즉, 뷰포트 외부의 이미지에 대해서는 페이지 속도에 영향을 미치지 않습니다. 이미지는 뷰포트로 스크롤될 때 로드됩니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Head-태그&quot;&gt;&lt;a href=&quot;#Head-태그&quot; class=&quot;headerlink&quot; title=&quot;Head 태그&quot;&gt;&lt;/a&gt;Head 태그&lt;/h2&gt;&lt;p&gt;일반적 HTML의 head태그에 들어가는 정보들을 &lt;code&gt;Head&lt;/code&gt; 를 통해 작성 해 줄 수 있다&lt;/p&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Head&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;next/head&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Link&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;next/link&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;Home&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#x27;container&amp;#x27;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;My page title&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;property&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#x27;og:title&amp;#x27;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#x27;My page title&amp;#x27;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;key&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#x27;title&amp;#x27;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#x27;/posts/first-post&amp;#x27;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;this Page&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Link&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#x27;/posts/Hello&amp;#x27;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Link&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&quot;/2022/06/06/Next-js-2/04.png&quot; class=&quot;&quot;&gt;

&lt;p&gt;헤드 태그 안에 정보들이 들어가 있다&lt;/p&gt;
&lt;h2 id=&quot;두-가지-형태의-사전-렌더링&quot;&gt;&lt;a href=&quot;#두-가지-형태의-사전-렌더링&quot; class=&quot;headerlink&quot; title=&quot;두 가지 형태의 사전 렌더링&quot;&gt;&lt;/a&gt;두 가지 형태의 사전 렌더링&lt;/h2&gt;&lt;p&gt;NEXT는 브라우저에 렌더링 할 때 기본적으로 &lt;code&gt;pre-rendering&lt;/code&gt;을 한다.&lt;br&gt;&lt;code&gt;pre-rendering&lt;/code&gt;이란 각 페이지들을 사전에 미리 HTML 문서로 생성하여 가지고 있는 것 그리고 서버로 요청이 들어올 때 알맞은 페이지를 반환해준다.&lt;br&gt;그 중 두가지 형태의 사전렌더링이 있다&lt;br&gt;👉 &lt;code&gt;Static-Generation(SSG)&lt;/code&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML을 빌드 타임에 각 페이지별로 생성하고 해당 페이지에 요청이 올 때 미리 생성된 HTML문서를 반환 &lt;/li&gt;
&lt;li&gt;서버에서 페이지가 생성이 되는게 아니라 빌드할때 생성된 문서를 보여주는것이므로 속도가 빠르다&lt;/li&gt;
&lt;li&gt;공식문서에서는 마케팅페이지&amp;#x2F; 블로그게시물&amp;#x2F; 도움말 및 문서 등을 페이지로 사용할때 SSG 사용을 권하고있다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;👉 &lt;code&gt;Server-side Rendering(SSR)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;서버로 요청이 올 때마다 해당하는 HTML 문서를 그때 그때 생성하여 반환&lt;/li&gt;
&lt;li&gt;SSR방식은 서버에서 요청을 받을때마다 그에 상응하는 HTML을 생성하여 반환하기 때문에 항상 최신 상태를 유지해야하는 경우가 적합하다 (좋아요 표시라든지)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;getStaticProps&quot;&gt;&lt;a href=&quot;#getStaticProps&quot; class=&quot;headerlink&quot; title=&quot;getStaticProps&quot;&gt;&lt;/a&gt;getStaticProps&lt;/h3&gt;&lt;p&gt;블로그에 데이터를 추가하고 불러오기&lt;/p&gt;
&lt;p&gt;최상위 경로에 &lt;code&gt;posts&lt;/code&gt; directory를 만들고 안에 블로그 게시물을 md문서로 만든다&lt;/p&gt;
&lt;img src=&quot;/2022/06/06/Next-js-2/05.png&quot; class=&quot;&quot;&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Next-js-공식문서-따라만들기-2"><a href="#Next-js-공식문서-따라만들기-2" class="headerlink" title="Next.js 공식문서 따라만들기 (2)"></a>Next.js 공식문서 따라만들기 (2)</h1><h2 id="Assets"><a href="#Assets" class="headerlink" title="Assets"></a>Assets</h2><p>Next.js는 최상위 <code>public</code> 디렉토리에서 static assets를 관리한다  </p><h3 id="img-파일-넣기"><a href="#img-파일-넣기" class="headerlink" title="img 파일 넣기"></a>img 파일 넣기</h3><p><code>public</code> 디렉토리 안에 <code>images</code> 디렉토리를 만들고 이미지를 넣어 준다  </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Link</span> <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">FirstPost</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>FirstPost<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;/images/profile.jpg&#x27;</span> <span class="attr">alt</span>=<span class="string">&#x27;&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">FirstPost</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2022/06/06/Next-js-2/01.png" class=""><p>img src 경로가 신기하다  </p><p><code>FirstPost</code> 컴포넌트는 경로가 pages&#x2F;posts 인데 public 안의 images 경로에 바로 접근 했다 ..</p><h3 id="Image-컴포넌트"><a href="#Image-컴포넌트" class="headerlink" title="Image 컴포넌트"></a>Image 컴포넌트</h3><p>시매틱 img태그를 사용하면 다양한 화면 크기에서 반응, 뷰포트에 들어갈때만 이미지 로드 등등..을 수동으로 처리 해야 한다</p><p>그래서 Next.js에서 Image 컴포넌트를 제공한다<br>Image 컴포넌트를 사용하면 Next.js가 알아서 최적화를 해준다<br>Image컴포넌트를 사용하면 빌드할때 이미지를 최적화 하는 대신 사용자가 요청 할때 이미지를 최적화 한단다..<br>그래서 빌드할때 이미지를 10개를 하든 1천만개 이미지를 하든 빌드 시간이 증가하지 않는다</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Link</span> <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Image</span> <span class="keyword">from</span> <span class="string">&#x27;next/image&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">FirstPost</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>FirstPost<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">src</span>=<span class="string">&#x27;/images/profile.jpg&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">height</span>=<span class="string">&#123;144&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">width</span>=<span class="string">&#123;144&#125;</span>  </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Image</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">src</span>=<span class="string">&#x27;/images/profile.jpg&#x27;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">height</span>=<span class="string">&#123;144&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">width</span>=<span class="string">&#123;144&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">alt</span>=<span class="string">&#x27;profile&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">FirstPost</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>사용법은 그냥 Image를 임포트하고 일반 img태그 처럼 사용하면 된다 </p><img src="/2022/06/06/Next-js-2/02.png" class="">  <img src="/2022/06/06/Next-js-2/03.png" class="">  <p>같은 img를 사용했음에도 불구하고 파일 크기를보면 img태그와 Image컴포넌트로 만든 img의 차이가 많이 난다  </p><blockquote><p>이미지는 기본적으로 지연 로드됩니다. 즉, 뷰포트 외부의 이미지에 대해서는 페이지 속도에 영향을 미치지 않습니다. 이미지는 뷰포트로 스크롤될 때 로드됩니다.</p></blockquote><h2 id="Head-태그"><a href="#Head-태그" class="headerlink" title="Head 태그"></a>Head 태그</h2><p>일반적 HTML의 head태그에 들어가는 정보들을 <code>Head</code> 를 통해 작성 해 줄 수 있다</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Head</span> <span class="keyword">from</span> <span class="string">&#x27;next/head&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Link</span> <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;container&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>My page title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&#x27;og:title&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;My page title&#x27;</span> <span class="attr">key</span>=<span class="string">&#x27;title&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&#x27;/posts/first-post&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>this Page<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&#x27;/posts/Hello&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2022/06/06/Next-js-2/04.png" class=""><p>헤드 태그 안에 정보들이 들어가 있다</p><h2 id="두-가지-형태의-사전-렌더링"><a href="#두-가지-형태의-사전-렌더링" class="headerlink" title="두 가지 형태의 사전 렌더링"></a>두 가지 형태의 사전 렌더링</h2><p>NEXT는 브라우저에 렌더링 할 때 기본적으로 <code>pre-rendering</code>을 한다.<br><code>pre-rendering</code>이란 각 페이지들을 사전에 미리 HTML 문서로 생성하여 가지고 있는 것 그리고 서버로 요청이 들어올 때 알맞은 페이지를 반환해준다.<br>그 중 두가지 형태의 사전렌더링이 있다<br>👉 <code>Static-Generation(SSG)</code> </p><ul><li>HTML을 빌드 타임에 각 페이지별로 생성하고 해당 페이지에 요청이 올 때 미리 생성된 HTML문서를 반환 </li><li>서버에서 페이지가 생성이 되는게 아니라 빌드할때 생성된 문서를 보여주는것이므로 속도가 빠르다</li><li>공식문서에서는 마케팅페이지&#x2F; 블로그게시물&#x2F; 도움말 및 문서 등을 페이지로 사용할때 SSG 사용을 권하고있다</li></ul><p>👉 <code>Server-side Rendering(SSR)</code></p><ul><li>서버로 요청이 올 때마다 해당하는 HTML 문서를 그때 그때 생성하여 반환</li><li>SSR방식은 서버에서 요청을 받을때마다 그에 상응하는 HTML을 생성하여 반환하기 때문에 항상 최신 상태를 유지해야하는 경우가 적합하다 (좋아요 표시라든지)</li></ul><h3 id="getStaticProps"><a href="#getStaticProps" class="headerlink" title="getStaticProps"></a>getStaticProps</h3><p>블로그에 데이터를 추가하고 불러오기</p><p>최상위 경로에 <code>posts</code> directory를 만들고 안에 블로그 게시물을 md문서로 만든다</p><img src="/2022/06/06/Next-js-2/05.png" class=""><span id="more"></span><p>공식문서에서 제공하는 글을 그대로 썻다</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#x27;Two Forms of Pre-rendering&#x27;</span><br><span class="line"><span class="section">date: &#x27;2020-01-01&#x27;</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">Next.js has two forms of pre-rendering: <span class="strong">**Static Generation**</span> and <span class="strong">**Server-side Rendering**</span>. The difference is in <span class="strong">**when**</span> it generates the HTML for a page.</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="strong">**Static Generation**</span> is the pre-rendering method that generates the HTML at <span class="strong">**build time**</span>. The pre-rendered HTML is then <span class="emphasis">_reused_</span> on each request.</span><br><span class="line"><span class="bullet">-</span> <span class="strong">**Server-side Rendering**</span> is the pre-rendering method that generates the HTML on <span class="strong">**each request**</span>.</span><br><span class="line"></span><br><span class="line">Importantly, Next.js lets you <span class="strong">**choose**</span> which pre-rendering form to use for each page. You can create a &quot;hybrid&quot; Next.js app by using Static Generation for most pages and using Server-side Rendering for others.</span><br></pre></td></tr></table></figure><p>이 마크다운 문서에서 id(파일이름),title,datet를 불러와 index페이지에 렌더링</p><img src="/2022/06/06/Next-js-2/06.png" class=""><p>먼저 마크다운 파일의 데이터를 분석할수 있는 모듈을 설치</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i gray-matter</span><br></pre></td></tr></table></figure><p>그리고 파일 시스템에서 데이터를 가져오기 위한 라이브러리를 만들어 준다</p><p>최상위 경로에 <code>lib</code>라는 directory를 만들고 안에 <code>posts.js</code>를 만든다음 작성해준다<br><code>getSortedPostsData</code>함수를 만들어서 export 해준다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> matter <span class="keyword">from</span> <span class="string">&#x27;gray-matter&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> postsDirectory = path.<span class="title function_">join</span>(process.<span class="title function_">cwd</span>(), <span class="string">&#x27;posts&#x27;</span>);</span><br><span class="line"><span class="comment">// ✅ process.cwd()로 경로를 찾고</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getSortedPostsData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ✅  posts안의 파일이름들을 fileNames 배열에 저장하는거 같다</span></span><br><span class="line">  <span class="keyword">const</span> fileNames = fs.<span class="title function_">readdirSync</span>(postsDirectory);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> allPostsData = fileNames.<span class="title function_">map</span>(<span class="function">(<span class="params">fileName</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ✅ 파일이름에서 .md 를 정규식으로 제거 해주고 id에 저장</span></span><br><span class="line">    <span class="keyword">const</span> id = fileName.<span class="title function_">replace</span>(<span class="regexp">/\.md$/</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ✅ path.join으로 경로를 만들어준다 postsDirectory는 &#x27;posts&#x27; 이고 </span></span><br><span class="line">    <span class="comment">// fileName은 말 그대로 파일명에서 .md를 제거한 이름 둘을 합쳐서 fullPath에 저장 그럼 fullPath = /posts/파일명 이 된다</span></span><br><span class="line">    <span class="keyword">const</span> fullPath = path.<span class="title function_">join</span>(postsDirectory, fileName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ✅ 이건 컨텐츠 내용을 저장하는거 같은데 파일 경로에서..utf8로 엔코딩 해주고 파일시스템 메소드로 어떻게 저장해주는거 같다..</span></span><br><span class="line">    <span class="keyword">const</span> fileContents = fs.<span class="title function_">readFileSync</span>(fullPath, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ✅ gray-metter 로 컨텐츠를 어떻게 변환해주는 과정 같다</span></span><br><span class="line">    <span class="keyword">const</span> matterResult = <span class="title function_">matter</span>(fileContents);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ✅ id 와 data를 return</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      id,</span><br><span class="line">      ...matterResult.<span class="property">data</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// Sort posts by date</span></span><br><span class="line">  <span class="keyword">return</span> allPostsData.<span class="title function_">sort</span>(<span class="function">(<span class="params">&#123; date: a &#125;, &#123; date: b &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>✅ process.cwd()는 찾아보니 node모듈에서 경로를 찾는 메소드 인거 같다<br>__dirname과 차이점을 찾아보니<br>process.cwd()는 노드 프로세스를 실행하는 디렉토리의 값을 반환<br>__dirname은 현재 실행중인 파일이 있는 디렉토리 값을 반환 한단다..<br><a href="https://stackoverflow.com/questions/9874382/whats-the-difference-between-process-cwd-vs-dirname">https://stackoverflow.com/questions/9874382/whats-the-difference-between-process-cwd-vs-dirname</a></p></blockquote><p>다음 index.js에서 <code>getStaticProps</code>로 <code>getSortedPostsData()</code>를 호출한다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getSortedPostsData &#125; <span class="keyword">from</span> <span class="string">&#x27;../lib/posts&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getStaticProps</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> allPostsData = <span class="title function_">getSortedPostsData</span>();</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      allPostsData,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기서 props는 Home 컴포넌트에 넘겨주면 된다</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Head</span> <span class="keyword">from</span> <span class="string">&#x27;next/head&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Layout</span> <span class="keyword">from</span> <span class="string">&#x27;../components/layout&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> utilStyles <span class="keyword">from</span> <span class="string">&#x27;../styles/utils.module.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getSortedPostsData &#125; <span class="keyword">from</span> <span class="string">&#x27;../lib/posts&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Link</span> <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params">&#123; allPostsData &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Layout</span> <span class="attr">home</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>My page title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&#x27;og:title&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;My page title&#x27;</span> <span class="attr">key</span>=<span class="string">&#x27;title&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      /* 아래는 작성 되는 부분 */</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">section</span> &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&#123;utilStyles.headingLg&#125;</span>&gt;</span>Blog<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&#123;utilStyles.list&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;allPostsData.map((&#123; id, date, title &#125;) =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&#123;utilStyles.listItem&#125;</span> <span class="attr">key</span>=<span class="string">&#123;id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">a</span>&gt;</span>&#123;title&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;date&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          ))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Layout</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getStaticProps에서 return하는 props를 가져와 출력해준다<br>id는 파일이름이다</p><img src="/2022/06/06/Next-js-2/07.png" class=""><h3 id="동적-경로-getStaticPaths-구현"><a href="#동적-경로-getStaticPaths-구현" class="headerlink" title="동적 경로 getStaticPaths 구현"></a>동적 경로 getStaticPaths 구현</h3><p>페이지 경로가 외부 데이터에 의존하는 경우  Next.js를 사용하면 외부 데이터에 의존하는 경로가 있는 페이지를 정적으로 생성할 수 있다.</p><img src="/2022/06/06/Next-js-2/08.png" class=""><p><strong>👉 블로그 게시물에 대한 동적 경로 만들기</strong></p><ul><li>각 게시물에 경로가 있어야한다 <code>/posts/&lt;id&gt;</code> 여기서 <code>&lt;id&gt;</code>는 최상위 <code>posts</code> 디렉토리 안에 있는 MD파일의 이름</li><li><code>ssg-ssr.md</code> , <code>pre-rendering.md</code> 가 있으므로 <code>/posts/ssg-ssr</code> , <code>/posts/pre-rendering</code>이 경로가 되어야 한다</li></ul><p><code>[id].js</code>라는 파일을 <code>pages/posts</code>디렉토리 안에 생성해준다 여기서 <code>[id]</code>가 경로가 될 것이다</p><img src="/2022/06/06/Next-js-2/09.png" class=""><p>그리고 id에 맞게 게시물 페이지를 렌더링 코드를 <code>[id].js</code> 에 작성</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Layout</span> <span class="keyword">from</span> <span class="string">&#x27;../../components/layout&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Post</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Layout</span>&gt;</span>...<span class="tag">&lt;/<span class="name">Layout</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[id].js</code>는 게시물 경로로 들어가면 보여지는 페이지이다</p><p><code>[id].js</code>를 작성하기 이전에</p><p><code>postsId</code>를 가져 올 수 있게 <code>lib/posts.js</code>안에 작성 <code>getAllPostsIds</code>함수를 만들어서 export 해준다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib/posts.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getAllPostIds</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> fileNames = fs.<span class="title function_">readdirSync</span>(postsDirectory);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Returns an array that looks like this:</span></span><br><span class="line">  <span class="comment">// [</span></span><br><span class="line">  <span class="comment">//   &#123;</span></span><br><span class="line">  <span class="comment">//     params: &#123;</span></span><br><span class="line">  <span class="comment">//       id: &#x27;ssg-ssr&#x27;</span></span><br><span class="line">  <span class="comment">//     &#125;</span></span><br><span class="line">  <span class="comment">//   &#125;,</span></span><br><span class="line">  <span class="comment">//   &#123;</span></span><br><span class="line">  <span class="comment">//     params: &#123;</span></span><br><span class="line">  <span class="comment">//       id: &#x27;pre-rendering&#x27;</span></span><br><span class="line">  <span class="comment">//     &#125;</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// ]</span></span><br><span class="line">  <span class="keyword">return</span> fileNames.<span class="title function_">map</span>(<span class="function">(<span class="params">fileName</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// ✅ 파일이름으로 params를 구성하고 return 하고 있다</span></span><br><span class="line">      <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: fileName.<span class="title function_">replace</span>(<span class="regexp">/\.md$/</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다음 <code>[id].js</code>에 <code>getAllPostIds()</code>를 가져와 <code>getStaticPaths</code>안에서 사용해준다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//[id].js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; getAllPostIds &#125; <span class="keyword">from</span> <span class="string">&#x27;../../lib/posts&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getStaticPaths</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> paths = <span class="title function_">getAllPostIds</span>();</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    paths,</span><br><span class="line">    <span class="attr">fallback</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="게시물-페이지-렌더링-getStaticProps-구현"><a href="#게시물-페이지-렌더링-getStaticProps-구현" class="headerlink" title="게시물 페이지 렌더링 getStaticProps 구현"></a>게시물 페이지 렌더링 getStaticProps 구현</h3><p><code>lib/posts.js</code> 에 <code>getPostData</code>함수를 만들어서 export 해준다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getPostData</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="comment">// </span></span><br><span class="line">  <span class="keyword">const</span> fullPath = path.<span class="title function_">join</span>(postsDirectory, <span class="string">`<span class="subst">$&#123;id&#125;</span>.md`</span>);</span><br><span class="line">  <span class="keyword">const</span> fileContents = fs.<span class="title function_">readFileSync</span>(fullPath, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> matterResult = <span class="title function_">matter</span>(fileContents);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    id,</span><br><span class="line">    ...matterResult.<span class="property">data</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MD문서의 컨텐츠 부분을 html로 파싱해주기 위해 모듈 설치</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i remark remark-html</span><br></pre></td></tr></table></figure><p><code>lib/posts.js</code> 에 import 해주고 <code>getPostData()</code>에 추가 작성 해준다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; remark &#125; <span class="keyword">from</span> <span class="string">&#x27;remark&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> html <span class="keyword">from</span> <span class="string">&#x27;remark-html&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getPostData</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> fullPath = path.<span class="title function_">join</span>(postsDirectory, <span class="string">`<span class="subst">$&#123;id&#125;</span>.md`</span>);</span><br><span class="line">  <span class="keyword">const</span> fileContents = fs.<span class="title function_">readFileSync</span>(fullPath, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> matterResult = <span class="title function_">matter</span>(fileContents);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 추가 작성되는 부분</span></span><br><span class="line">  <span class="keyword">const</span> processedContent = <span class="keyword">await</span> <span class="title function_">remark</span>()</span><br><span class="line">    .<span class="title function_">use</span>(html)</span><br><span class="line">    .<span class="title function_">process</span>(matterResult.<span class="property">content</span>);</span><br><span class="line">  <span class="keyword">const</span> contentHtml = processedContent.<span class="title function_">toString</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    id,</span><br><span class="line">    contentHtml,</span><br><span class="line">    ...matterResult.<span class="property">data</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[id].js</code>에서 getStaticProps으로 <code>getPostData()</code>를 호출하고 data를 렌더링 해주면 된다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getAllPostIds, getPostData &#125; <span class="keyword">from</span> <span class="string">&#x27;../../lib/posts&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> utilStyles <span class="keyword">from</span> <span class="string">&#x27;../../styles/utils.module.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Post</span>(<span class="params">&#123; postData &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Layout</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;postData.title&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">article</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&#123;utilStyles.headingXl&#125;</span>&gt;</span>&#123;postData.title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;utilStyles.lightText&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Date</span> <span class="attr">dateString</span>=<span class="string">&#123;postData.date&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">dangerouslySetInnerHTML</span>=<span class="string">&#123;&#123;</span> <span class="attr">__html:</span> <span class="attr">postData.contentHtml</span> &#125;&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">        // ✅ dangerouslySetInnerHTML</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Layout</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getStaticPaths</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> paths = <span class="title function_">getAllPostIds</span>();</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    paths,</span><br><span class="line">    <span class="attr">fallback</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getStaticProps</span>(<span class="params">&#123; params &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> postData = <span class="keyword">await</span> <span class="title function_">getPostData</span>(params.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      postData,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>✅ dangerouslySetInnerHTML는 React에서 innerHTML을 사용하기 위한 방법이다 __html키로 값을 전달 해야한다</p></blockquote><p><code>localhost:3000/posts/ssg-ssr</code> 로 접속해보면 </p><img src="/2022/06/06/Next-js-2/10.png" class=""><p>컨텐츠도 잘 출력 된다</p>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/React/">React</category>
      
      <category domain="https://sacultang.github.io/categories/Web/React/NextJs/">NextJs</category>
      
      
      <category domain="https://sacultang.github.io/tags/React/">React</category>
      
      <category domain="https://sacultang.github.io/tags/Next-js/">Next.js</category>
      
      
      <comments>https://sacultang.github.io/2022/06/06/Next-js-2/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ㅇㅇㅈ Blog</title>
    <link>https://sacultang.github.io/</link>
    
    <atom:link href="https://sacultang.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sun, 01 May 2022 13:12:01 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>수박수박수</title>
      <link>https://sacultang.github.io/2022/05/01/%EC%88%98%EB%B0%95%EC%88%98%EB%B0%95%EC%88%98/</link>
      <guid>https://sacultang.github.io/2022/05/01/%EC%88%98%EB%B0%95%EC%88%98%EB%B0%95%EC%88%98/</guid>
      <pubDate>Sun, 01 May 2022 12:54:18 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;수박수박수&quot;&gt;&lt;a href=&quot;#수박수박수&quot; class=&quot;headerlink&quot; title=&quot;수박수박수&quot;&gt;&lt;/a&gt;수박수박수&lt;/h1&gt;&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="수박수박수"><a href="#수박수박수" class="headerlink" title="수박수박수"></a>수박수박수</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>길이가 n이고, “수박수박수박수….”와 같은 패턴을 유지하는 문자열을 리턴하는 함수, solution을 완성하세요.<br>예를들어 n이 4이면 “수박수박”을 리턴하고 3이라면 “수박수”를 리턴하면 됩니다.</p><h2 id="제한-조건"><a href="#제한-조건" class="headerlink" title="제한 조건"></a>제한 조건</h2><ul><li>n은 길이 10,000이하인 자연수</li></ul><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><table><thead><tr><th>n</th><th>return</th></tr></thead><tbody><tr><td>3</td><td>“수박수”</td></tr><tr><td>4</td><td>“수박수박”</td></tr></tbody></table><h2 id="soulution"><a href="#soulution" class="headerlink" title="soulution"></a>soulution</h2><ol><li>인자로 받은 n 만큼 for문을 돈다</li><li>i를 2로 나누었을때 몫이 0일 경우에 수를 추가해준다 아니면 박을 추가해준다</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> answer = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    i % <span class="number">2</span> === <span class="number">0</span> ? (answer += <span class="string">&#x27;수&#x27;</span>) : (answer += <span class="string">&#x27;박&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(answer)</span><br><span class="line">  <span class="keyword">return</span> answer</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">solution</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="다른-사람-풀이"><a href="#다른-사람-풀이" class="headerlink" title="다른 사람 풀이"></a>다른 사람 풀이</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">waterMelon</span> = n =&gt; <span class="string">&quot;수박&quot;</span>.<span class="title function_">repeat</span>(n).<span class="title function_">slice</span>(<span class="number">0</span>,n);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;n이 3인 경우: &quot;</span>+ <span class="title function_">waterMelon</span>(<span class="number">3</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;n이 4인 경우: &quot;</span>+ <span class="title function_">waterMelon</span>(<span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>repeat()과 slice() 사용했다  </p><p>repeat()은 문자열을 주어진 횟수만큼 반복 해준다</p><blockquote><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/repeat">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/repeat</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;수박&#x27;</span>.<span class="title function_">repeat</span>(<span class="number">3</span>) <span class="comment">// &quot;수박수박수박&quot; 이 된다</span></span><br></pre></td></tr></table></figure><p>이후 slice()로 0번째서 시작해 인자로 받은 n개만큼(n번째 인덱스의 그 바로 전까지만 추출된다) 추출 해준다… </p>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/JavaScript/">JavaScript</category>
      
      <category domain="https://sacultang.github.io/categories/Web/JavaScript/algorithm/">algorithm</category>
      
      
      <category domain="https://sacultang.github.io/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://sacultang.github.io/tags/algorithm/">algorithm</category>
      
      
      <comments>https://sacultang.github.io/2022/05/01/%EC%88%98%EB%B0%95%EC%88%98%EB%B0%95%EC%88%98/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Switch 와 NotFound</title>
      <link>https://sacultang.github.io/2022/05/01/Switch-%EC%99%80-NotFound/</link>
      <guid>https://sacultang.github.io/2022/05/01/Switch-%EC%99%80-NotFound/</guid>
      <pubDate>Sun, 01 May 2022 12:22:10 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Switch&quot;&gt;&lt;a href=&quot;#Switch&quot; class=&quot;headerlink&quot; title=&quot;Switch&quot;&gt;&lt;/a&gt;Switch&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;여러 route 중 순서대로 먼저 맞는 하나만 보여준다&lt;/li&gt;
&lt;li&gt;exact를 뺄</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h1><ul><li>여러 route 중 순서대로 먼저 맞는 하나만 보여준다</li><li>exact를 뺄 수 있는 로직을 만들 수 있다</li><li>가장 마지막에 어디 path에도 맞지 않으면 보여지는 컴포넌트를 설정해서, “Not Found”페이지를 만들 수 있다</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span>, <span class="title class_">Route</span>, <span class="title class_">Switch</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Profile</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Profile&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NotFound</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/NotFound&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/profile/:id&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Profile&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/profile&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Profile&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">exact</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* Not Found */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">component</span>=<span class="string">&#123;NotFound&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure><ul><li><p>Path의 순서를 조정해준다</p><ul><li>루트경로인 ‘&#x2F;‘은 모든 경로에 포함되어 있기 때문이다</li><li>루트경로인 ‘&#x2F;‘은 exact 여야 한다</li><li>profile과 profile&#x2F;:id 는 porfile이 겹치는 범주이기 때문에 exact를 쓰지 않고 표현할려면 순서를 조정해야 한다</li></ul></li><li><p>NotFound 페이지는 path를 지정하지 않고 컴포넌트를 지정해준다</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">NotFound</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span> 페이지를 찾을 수 없습니다 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/./images/switch/notfound.png"><br>없는 주소일 경우 notfound 컴포넌트를 출력한다</p>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/React/">React</category>
      
      
      <category domain="https://sacultang.github.io/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://sacultang.github.io/tags/React/">React</category>
      
      
      <comments>https://sacultang.github.io/2022/05/01/Switch-%EC%99%80-NotFound/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>React-router-dom</title>
      <link>https://sacultang.github.io/2022/05/01/React-router-dom/</link>
      <guid>https://sacultang.github.io/2022/05/01/React-router-dom/</guid>
      <pubDate>Sun, 01 May 2022 11:45:45 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;React-router-dom&quot;&gt;&lt;a href=&quot;#React-router-dom&quot; class=&quot;headerlink&quot; title=&quot;React-router-dom&quot;&gt;&lt;/a&gt;React-router-dom&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;브라우저에서 최초에 root 경로로 요청을하면,&lt;/li&gt;
&lt;li&gt;React Web App을 내려준다&lt;/li&gt;
&lt;li&gt;내려받은 App 에서 다른 페이지로 이동하는 동작을 수행하면,&lt;/li&gt;
&lt;li&gt;새로운 경로에 맞는 컴포넌트를 보여준다&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm i react-router-dom&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;cra에 기본 내장된 패키지가 아님&lt;/li&gt;
&lt;li&gt;react-router-dom은 facebook의 공식 패키지가 아니다&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;특정-경로에서-보여줄-컴포넌트-준비&quot;&gt;&lt;a href=&quot;#특정-경로에서-보여줄-컴포넌트-준비&quot; class=&quot;headerlink&quot; title=&quot;특정 경로에서 보여줄 컴포넌트 준비&quot;&gt;&lt;/a&gt;특정 경로에서 보여줄 컴포넌트 준비&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;‘&amp;#x2F;‘ &amp;#x3D;&amp;gt; Home 컴포넌트&lt;/li&gt;
&lt;li&gt;‘&amp;#x2F;profile’ &amp;#x3D;&amp;gt; Profile 컴포넌트&lt;/li&gt;
&lt;li&gt;‘&amp;#x2F;about’ &amp;#x3D;&amp;gt; About 컴포넌트&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&quot;title class_&quot;&gt;BrowserRouter&lt;/span&gt;, &lt;span class=&quot;title class_&quot;&gt;Route&lt;/span&gt; &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;react-router-dom&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;./App.css&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Home&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;./pages/Home&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Profile&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;./pages/Profile&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;About&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;./pages/About&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;App&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;BrowserRouter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Route&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#x27;/&amp;#x27;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;component&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;Home&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Route&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Route&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#x27;/profile&amp;#x27;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;component&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;Profile&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Route&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Route&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#x27;/about&amp;#x27;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;component&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;About&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Route&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;BrowserRouter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;App&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="React-router-dom"><a href="#React-router-dom" class="headerlink" title="React-router-dom"></a>React-router-dom</h1><ol><li>브라우저에서 최초에 root 경로로 요청을하면,</li><li>React Web App을 내려준다</li><li>내려받은 App 에서 다른 페이지로 이동하는 동작을 수행하면,</li><li>새로운 경로에 맞는 컴포넌트를 보여준다</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i react-router-dom</span><br></pre></td></tr></table></figure><ul><li>cra에 기본 내장된 패키지가 아님</li><li>react-router-dom은 facebook의 공식 패키지가 아니다</li></ul><h2 id="특정-경로에서-보여줄-컴포넌트-준비"><a href="#특정-경로에서-보여줄-컴포넌트-준비" class="headerlink" title="특정 경로에서 보여줄 컴포넌트 준비"></a>특정 경로에서 보여줄 컴포넌트 준비</h2><ul><li>‘&#x2F;‘ &#x3D;&gt; Home 컴포넌트</li><li>‘&#x2F;profile’ &#x3D;&gt; Profile 컴포넌트</li><li>‘&#x2F;about’ &#x3D;&gt; About 컴포넌트</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span>, <span class="title class_">Route</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Profile</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Profile&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/About&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/profile&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Profile&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>about 페이지에 들어가도 home 컴포넌트가 같이 렌더 된다<br><img src="/./images/router02.png"></p><p>about path에 ‘&#x2F;‘가 포함되어 있기 때문에 루트경로인 Home도 출력되는 것<br><br>path가 완전히 같을경우에만 해당 페이지가 보이도록 exact를 Route에 추가 해준다 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">exact</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      // exact를 추가 해준다</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/profile&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Profile&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/./images/route03.png"><br>이제 home이 같이 출력 되지 않는다</p><p>만약 경로가 ‘&#x2F;profile’의 하위라면 (ex: ‘&#x2F;profile&#x2F;name’) profile의 route에 exact를 추가 해주면 된다</p><h2 id="Dynamic-라우팅-1"><a href="#Dynamic-라우팅-1" class="headerlink" title="Dynamic 라우팅 (1)"></a>Dynamic 라우팅 (1)</h2><p>Routes의 경로에 특정 값을 넣어 해당 페이지로 이동할 수 있게 하는 것을 말한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">exact</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/profile&#x27;</span> <span class="attr">exact</span> <span class="attr">component</span>=<span class="string">&#123;Profile&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/profile/:id&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Profile&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>path 주소 뒤에 :[값의 이름] 으로 붙여 주면 된다<br>이름은 아무렇게 적어도 상관없지만 알기 쉽게 쓰는게 좋겠다<br>id 값을 받아와서 id값에 해당하는 페이지로 이동할 수 있다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Profile</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(props)</span><br><span class="line">  <span class="keyword">const</span> id = props.<span class="property">match</span>.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(id, <span class="keyword">typeof</span> id)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Profile 페이지 입니다.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;profile&#x2F;1 주소로 접속 해본다</p><ul><li>컴포넌트에서 데이터가 들어올때는 props로 받아온다 console로 props를 찍었을 시<br><img src="/./images/route05.png">  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url에 :id로 지정했던 key와 주소로 접속할때 사용한 값인 1이 params의 값으로 들어가 있다 </span><br></pre></td></tr></table></figure></li></ul><h2 id="Dynamic-라우팅-2"><a href="#Dynamic-라우팅-2" class="headerlink" title="Dynamic 라우팅 (2)"></a>Dynamic 라우팅 (2)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:3000/about?name=mark</span><br></pre></td></tr></table></figure><ul><li>주소 뒤에 ?로 시작해서 뒤에 붙는것은 쿼리 스트링이다</li><li>쿼리가 있어도 페이지는 about이며 없어도 about이다.</li><li>쿼리가 붙는다고 해서 profile처럼 추가적으로 라우트 처리를 할 필요가 없다</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">About</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(props)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>About 페이지 입니다.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;query.name &amp;&amp; <span class="tag">&lt;<span class="name">p</span>&gt;</span>name은 &#123;query.name&#125;입니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/./images/query/qs01.png"><br>라우트처리 한 것과는 다르게 key.value 형식으로 된 것은 보이지 않는다<br>search에 있는 “?name&#x3D;mark”를 key.value 형식으로 처리 해줄 필요가 있다</p><h3 id="URLSearchParams"><a href="#URLSearchParams" class="headerlink" title="URLSearchParams"></a>URLSearchParams</h3><p>브라우저에 내장 되어 있는 객체이다</p><blockquote><p><a href="https://developer.mozilla.org/ko/docs/Web/API/URLSearchParams">https://developer.mozilla.org/ko/docs/Web/API/URLSearchParams</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">About</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> searchParams = props.<span class="property">location</span>.<span class="property">search</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(searchParams)</span><br><span class="line">  <span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(searchParams)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>About 페이지 입니다.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>console.log(searchParams) -&gt; 문자열로 ?name&#x3D;mark 가 콘솔에 찍힌다</li><li>console.log(obj) -&gt; 아무것도 보이지 않는다 추가적으로 처리를 해줘야 한다<br><img src="/./images/query/qs02.png"></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">About</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> searchParams = props.<span class="property">location</span>.<span class="property">search</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(searchParams)</span><br><span class="line">  <span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(searchParams)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>))</span><br><span class="line">  <span class="keyword">const</span> objName = obj.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>About 페이지 입니다.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;objName &amp;&amp; <span class="tag">&lt;<span class="name">p</span>&gt;</span>name은 &#123;objName&#125;입니다<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/./images/query/qs03.png"><br>문자열 mark가 찍힌다<br><img src="/./images/query/qs04.png"><br>쿼리로 받아온걸 출력 할 수 있다</p><ul><li>URLSearchParams 의 단점<ul><li>URLSearchParams 의 메서드를 다 기억하고 사용해야 한다.</li><li>브라우저 객체이기 때문에 브라우저에 따라서 지원하지 않는 경우도 있다</li></ul></li></ul><h3 id="query-string"><a href="#query-string" class="headerlink" title="query-string"></a>query-string</h3><p>URLSearchParams의 단점인 바로 키로 꺼내 사용 할 수 있도록 해준다  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i query-string</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// query-string을 import 해준다</span></span><br><span class="line"><span class="keyword">import</span> queryString <span class="keyword">from</span> <span class="string">&#x27;query-string&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">About</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> searchParams = props.<span class="property">location</span>.<span class="property">search</span></span><br><span class="line">  <span class="keyword">const</span> query = queryString.<span class="title function_">parse</span>(searchParams)</span><br><span class="line">  <span class="comment">// searchParams 문자열을 파싱 해준다</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>About 페이지 입니다.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;query.name &amp;&amp; <span class="tag">&lt;<span class="name">p</span>&gt;</span>name은 &#123;query.name&#125;입니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/./images/query/qs05.png"><br>{name:’mark’} 처럼 객체형식으로 잘 나온다</p><blockquote><p>console.log(query)를 해보면 이상한 에러가 잔뜩 뜬다..<br>검색해봐도 무슨 말인지 잘 모르겠다</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/React/">React</category>
      
      
      <category domain="https://sacultang.github.io/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://sacultang.github.io/tags/React/">React</category>
      
      
      <comments>https://sacultang.github.io/2022/05/01/React-router-dom/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2022-05-01-TIL</title>
      <link>https://sacultang.github.io/2022/05/01/2022-05-01-TIL/</link>
      <guid>https://sacultang.github.io/2022/05/01/2022-05-01-TIL/</guid>
      <pubDate>Sun, 01 May 2022 06:36:08 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Object-is&quot;&gt;&lt;a href=&quot;#Object-is&quot; class=&quot;headerlink&quot; title=&quot;Object.is()&quot;&gt;&lt;/a&gt;Object.is()&lt;/h1&gt;&lt;p&gt;Object.is()는 인자로 받는 두 값이 같은지 확인해서 bool</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a>Object.is()</h1><p>Object.is()는 인자로 받는 두 값이 같은지 확인해서 boolean으로 반환한다</p><h2 id="구문"><a href="#구문" class="headerlink" title="구문"></a>구문</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(value1, value2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// true or false</span></span><br></pre></td></tr></table></figure><h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>);     <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="variable language_">window</span>, <span class="variable language_">window</span>);   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>);     <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>([], []);           <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(test, test);       <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="literal">null</span>, <span class="literal">null</span>);       <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 특별한 경우</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="number">0</span>, -<span class="number">0</span>);            <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(-<span class="number">0</span>, -<span class="number">0</span>);           <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="number">0</span>/<span class="number">0</span>);         <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/is">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/is</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/">TIL</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/2022-05/">2022.05</category>
      
      
      <category domain="https://sacultang.github.io/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://sacultang.github.io/tags/Object/">Object</category>
      
      
      <comments>https://sacultang.github.io/2022/05/01/2022-05-01-TIL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>create-react-app</title>
      <link>https://sacultang.github.io/2022/04/30/create-react-app/</link>
      <guid>https://sacultang.github.io/2022/04/30/create-react-app/</guid>
      <pubDate>Sat, 30 Apr 2022 08:37:22 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Getting-Started-with-Create-React-App&quot;&gt;&lt;a href=&quot;#Getting-Started-with-Create-React-App&quot; class=&quot;headerlink&quot; title=&quot;Getting Started with Create React App&quot;&gt;&lt;/a&gt;Getting Started with Create React App&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npx create-react-app [Project]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;npx 이용해 그냥 설치시 아래 에러 코드가 뜨면서 설치가 되지 않는다&lt;/p&gt;
&lt;p&gt;@latest를 붙여서 설치해주면 된다&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;You are running `create-react-app` 4.0.3, &lt;span class=&quot;built_in&quot;&gt;which&lt;/span&gt; is behind the latest release (5.0.1).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;We no longer support global installation of Create React App.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Please remove any global installs with one of the following commands:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- npm uninstall -g create-react-app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- yarn global remove create-react-appcd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npx create-react-app@latest [Project]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;ESlint&quot;&gt;&lt;a href=&quot;#ESlint&quot; class=&quot;headerlink&quot; title=&quot;ESlint&quot;&gt;&lt;/a&gt;ESlint&lt;/h2&gt;&lt;h3 id=&quot;일반적인-프로젝트에서&quot;&gt;&lt;a href=&quot;#일반적인-프로젝트에서&quot; class=&quot;headerlink&quot; title=&quot;일반적인 프로젝트에서&quot;&gt;&lt;/a&gt;일반적인 프로젝트에서&lt;/h3&gt;&lt;p&gt;ESlint 라이브러리 설치&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm i eslint -D&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;ESlint 초기화&lt;br&gt; .eslintrc.js 파일이 생성된다&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npx eslint --init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;.eslintrc.js&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 다양한 옵션들 설정 가능&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable language_&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;exports&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;env&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;browser&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;es2021&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;extends&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;eslint:recommended&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;parserOptions&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;ecmaVersion&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;latest&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;rules&lt;/span&gt;: &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 룰을 추가해 줄 수있다&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;semi&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&amp;#x27;error&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;always&amp;#x27;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Getting-Started-with-Create-React-App"><a href="#Getting-Started-with-Create-React-App" class="headerlink" title="Getting Started with Create React App"></a>Getting Started with Create React App</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx create-react-app [Project]</span><br></pre></td></tr></table></figure><p>npx 이용해 그냥 설치시 아래 에러 코드가 뜨면서 설치가 되지 않는다</p><p>@latest를 붙여서 설치해주면 된다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">You are running `create-react-app` 4.0.3, <span class="built_in">which</span> is behind the latest release (5.0.1).</span><br><span class="line"></span><br><span class="line">We no longer support global installation of Create React App.</span><br><span class="line"></span><br><span class="line">Please remove any global installs with one of the following commands:</span><br><span class="line">- npm uninstall -g create-react-app</span><br><span class="line">- yarn global remove create-react-appcd</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx create-react-app@latest [Project]</span><br></pre></td></tr></table></figure><h2 id="ESlint"><a href="#ESlint" class="headerlink" title="ESlint"></a>ESlint</h2><h3 id="일반적인-프로젝트에서"><a href="#일반적인-프로젝트에서" class="headerlink" title="일반적인 프로젝트에서"></a>일반적인 프로젝트에서</h3><p>ESlint 라이브러리 설치</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i eslint -D</span><br></pre></td></tr></table></figure><p>ESlint 초기화<br> .eslintrc.js 파일이 생성된다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx eslint --init</span><br></pre></td></tr></table></figure><p>.eslintrc.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 다양한 옵션들 설정 가능</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">es2021</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">extends</span>: <span class="string">&#x27;eslint:recommended&#x27;</span>,</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">ecmaVersion</span>: <span class="string">&#x27;latest&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">rules</span>: &#123; <span class="comment">// 룰을 추가해 줄 수있다</span></span><br><span class="line">    <span class="attr">semi</span>: [<span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;always&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="create-react-app으로-만든-리액트-프로젝트-안에서는-package-json-안에-eslintConfig가-있다"><a href="#create-react-app으로-만든-리액트-프로젝트-안에서는-package-json-안에-eslintConfig가-있다" class="headerlink" title="create-react-app으로 만든 리액트 프로젝트 안에서는 package.json 안에 eslintConfig가 있다"></a>create-react-app으로 만든 리액트 프로젝트 안에서는 package.json 안에 eslintConfig가 있다</h3><ul><li>따로 설치할 필요가 없다</li><li>추천되는 리액트앱의 설정을 상속 받는다</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;eslintConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;react-app&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;react-app/jest&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 룰을 추가 해 줄 수 있다</span></span><br><span class="line">      <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h2 id="Husky"><a href="#Husky" class="headerlink" title="Husky"></a>Husky</h2><p>Git hooks made easy<br>husky는 git hook을 손쉽게 제어하도록 도와주는 매니저 이다.<br>git을 쓰다가 특정 이벤트(커밋할 때, 푸시할 때 등등)가 벌어졌을 때,<br>그 순간에 갈고리를 걸어서 특정 스크립트가 실행되도록 도와주는게 git hook이다.</p><ul><li>허스키 모듈 설치전에 git init 해야한다<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i husky -D</span><br></pre></td></tr></table></figure><ul><li><p>husky의 git hook 활성화  </p><ul><li>.husky 폴더가 생성된다.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npx husky install</span><br><span class="line">-&gt; husky - Git hooks installed</span><br></pre></td></tr></table></figure></li></ul></li><li><p>eslint나 prettier로 커밋전에 점검을 해 볼수 있다</p></li></ul><h3 id="lint-staged"><a href="#lint-staged" class="headerlink" title="lint-staged"></a>lint-staged</h3><p>husky 와 Eslint, prettier를 연결해서 사용하면 git commit 을 하기전에 Eslint와 prettier로 staged된 파일들을 점검 할 수 있다.</p><ul><li>prepare<ul><li>prepare 스크립트를 추가해 놓으면 다른곳에서 package.json 으로 모듈을 설치할 때 자동으로 husky가 적용된다<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">package.json</span><br><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;prepare&quot;</span><span class="punctuation">:</span><span class="string">&quot;husky install&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li>lint-staged 설치<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i lint-staged -D</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 커밋을 하기 직전에 lint-staged가 실행 된다</span><br><span class="line"></span><br><span class="line">$ npx husky add .husky/pre-commit <span class="string">&quot;npx lint-staged&quot;</span></span><br></pre></td></tr></table></figure></li><li>lint-staged 설정 추가<br>package.json에 추가해준다<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;lint-staged&quot;</span> <span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 모든 폴더에서 js 확장 자를 가진 파일을</span></span><br><span class="line">  <span class="attr">&quot;**/*.js&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> </span><br><span class="line">    <span class="string">&quot;eslint --fix&quot;</span><span class="punctuation">,</span> <span class="comment">// 실행문을 적는다</span></span><br><span class="line">    <span class="string">&quot;git add&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>git add 후 커밋을 하면 eslint 규칙을 체크해 준다, 그리고 prettier 룰에 맞게 수정해준다<br><img src="/./images/lint-01.png"><br><img src="/./images/lint-02.png"><br><img src="/./images/lint-03.png"><br>쌍따옴표가 홑따옴표로 수정 되었다</li></ul>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/React/">React</category>
      
      
      <category domain="https://sacultang.github.io/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://sacultang.github.io/tags/React/">React</category>
      
      
      <comments>https://sacultang.github.io/2022/04/30/create-react-app/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2022-04-30 TIL</title>
      <link>https://sacultang.github.io/2022/04/30/2022-04-30-TIL/</link>
      <guid>https://sacultang.github.io/2022/04/30/2022-04-30-TIL/</guid>
      <pubDate>Sat, 30 Apr 2022 08:12:32 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Object-entries&quot;&gt;&lt;a href=&quot;#Object-entries&quot; class=&quot;headerlink&quot; title=&quot;Object.entries()&quot;&gt;&lt;/a&gt;Object.entries()&lt;/h1&gt;&lt;p&gt;Object.entries()는 </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries()"></a>Object.entries()</h1><p>Object.entries()는 객체 자체의 열거 가능한 문자열 키를 가진 속성 [key, value] 쌍이 반환되는 객체이다.</p><p>key는 문자열이 된다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(obj));</span><br><span class="line"> <span class="comment">// [ [&#x27;foo&#x27;, &#x27;bar&#x27;], [&#x27;baz&#x27;, 42] ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="number">0</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;c&#x27;</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(obj)); </span><br><span class="line"><span class="comment">// [ [&#x27;0&#x27;, &#x27;a&#x27;], [&#x27;1&#x27;, &#x27;b&#x27;], [&#x27;2&#x27;, &#x27;c&#x27;] ]</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/">TIL</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/2022-04/">2022.04</category>
      
      
      <category domain="https://sacultang.github.io/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://sacultang.github.io/tags/Object/">Object</category>
      
      
      <comments>https://sacultang.github.io/2022/04/30/2022-04-30-TIL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2022-04-29 TIL</title>
      <link>https://sacultang.github.io/2022/04/29/2022-04-29-TIL/</link>
      <guid>https://sacultang.github.io/2022/04/29/2022-04-29-TIL/</guid>
      <pubDate>Fri, 29 Apr 2022 14:43:21 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Array-reduce&quot;&gt;&lt;a href=&quot;#Array-reduce&quot; class=&quot;headerlink&quot; title=&quot;Array.reduce()&quot;&gt;&lt;/a&gt;Array.reduce()&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;배열의 각 요소에 대해 </description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Array-reduce"><a href="#Array-reduce" class="headerlink" title="Array.reduce()"></a>Array.reduce()</h2><blockquote><p>배열의 각 요소에 대해 주어진 리듀서(reducer)함수를 실행하고, 하나의 결과값을 반환한다</p></blockquote><p>말이 어렵다..</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">reduce</span>(callback[, initialValue])</span><br></pre></td></tr></table></figure><h3 id="reduce-의-콜백-함수는-4가지-인수를-받는다"><a href="#reduce-의-콜백-함수는-4가지-인수를-받는다" class="headerlink" title="reduce()의 콜백 함수는 4가지 인수를 받는다"></a>reduce()의 콜백 함수는 4가지 인수를 받는다</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. accumulator</span><br><span class="line">    - 누산기, 콜백의 반환값을 누적시킨다. initialValue를 제공했을때는 initialValue의 값이다</span><br><span class="line">2. currentValue</span><br><span class="line">  - 처리할 현재 요소</span><br><span class="line">3. currentIndex (optional)</span><br><span class="line">    - 처리할 현재 요소의 인덱스 </span><br><span class="line">4. array (optional)</span><br><span class="line">  - reduce()를 호출한 배열</span><br></pre></td></tr></table></figure><h3 id="사용-방법"><a href="#사용-방법" class="headerlink" title="사용 방법"></a>사용 방법</h3><p>reduce()에는 누산기가 포함되어 있기 때문에, 배열의 각 요소에 대해 함수를 실행하고 누적된 값을 출력할때 용이하다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">const</span> result = numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur, idx</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> acc + cur </span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><p>예제에서 initialValue 를 0 으로 주었기 때문에 초기값이 0부터 시작해서 하나씩 누적 시켜 나간다<br>0+1+2+3+4+5 &#x3D; 15</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">const</span> result = numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur, idx</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> acc + cur </span><br><span class="line">&#125;,<span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// 25</span></span><br></pre></td></tr></table></figure><p>initialValue 를 10 으로 주었기 때문에 초기값이 10부터 시작해서 하나씩 누적 시켜 나간다<br>10+1+2+3+4+5 &#x3D; 15</p><p>reduce()로 많은 것을 할 수 있다는데.. 아직 더해서 누적 시키는 정도 밖에 이해가 되질 않는다</p>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/">TIL</category>
      
      <category domain="https://sacultang.github.io/categories/Web/TIL/2022-04/">2022.04</category>
      
      
      <category domain="https://sacultang.github.io/tags/JavaScript/">JavaScript</category>
      
      
      <comments>https://sacultang.github.io/2022/04/29/2022-04-29-TIL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>없는 숫자 더하기</title>
      <link>https://sacultang.github.io/2022/04/29/%EC%97%86%EB%8A%94-%EC%88%AB%EC%9E%90-%EB%8D%94%ED%95%98%EA%B8%B0/</link>
      <guid>https://sacultang.github.io/2022/04/29/%EC%97%86%EB%8A%94-%EC%88%AB%EC%9E%90-%EB%8D%94%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Fri, 29 Apr 2022 14:02:03 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;없는-숫자-더하기&quot;&gt;&lt;a href=&quot;#없는-숫자-더하기&quot; class=&quot;headerlink&quot; title=&quot;없는 숫자 더하기&quot;&gt;&lt;/a&gt;없는 숫자 더하기&lt;/h1&gt;&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="없는-숫자-더하기"><a href="#없는-숫자-더하기" class="headerlink" title="없는 숫자 더하기"></a>없는 숫자 더하기</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><blockquote><p>0부터 9까지의 숫자 중 일부가 들어있는 정수 배열 numbers가 매개변수로 주어집니다. <br><br>numbers에서 찾을 수 없는 0부터 9까지의 숫자를 모두 찾아 더한 수를 return 하도록 solution 함수를 완성해주세요.</p></blockquote><h2 id="제한-사항"><a href="#제한-사항" class="headerlink" title="제한 사항"></a>제한 사항</h2><ul><li>1 ≤ numbers의 길이 ≤ 9<ul><li>0 ≤ numbers의 모든 원소 ≤ 9</li><li>numbers의 모든 원소는 서로 다릅니다.</li></ul></li></ul><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><table><thead><tr><th align="center">numbers</th><th align="center">result</th></tr></thead><tbody><tr><td align="center">[1,2,3,4,6,7,8,0]</td><td align="center">14</td></tr><tr><td align="center">[5,8,4,0,6,7,9]</td><td align="center">6</td></tr></tbody></table><h2 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h2><ul><li><p>입출력 예 #1</p><ul><li>5, 9가 numbers에 없으므로, 5 + 9 &#x3D; 14를 return 해야 합니다.</li></ul></li><li><p>입출력 예 #2</p><ul><li>1, 2, 3이 numbers에 없으므로, 1 + 2 + 3 &#x3D; 6을 return 해야 합니다.</li></ul></li></ul><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ol><li>0부터 9까지의 합을 구한다</li><li>주어진 numbers의 합을 구한다</li><li>0부터 9까지의 합에서 numbers의 합을 뺀다</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">0</span>]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">numbers</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> allSum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> numbSum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i &lt;=<span class="number">9</span>; i++)&#123;</span><br><span class="line">    allSum += i</span><br><span class="line">  &#125;</span><br><span class="line">  numbers.<span class="title function_">forEach</span>(<span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span><br><span class="line">    numbSum += el</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> allSum - numbSum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="다른-사람의-풀이를-보자"><a href="#다른-사람의-풀이를-보자" class="headerlink" title="다른 사람의 풀이를 보자.."></a>다른 사람의 풀이를 보자..</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">numbers</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">45</span> - numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc + cur, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>깔끔쓰..<br>0부터9까지합 로직은 그렇다 쳐도<br>reduce는 생각도 못했다</p><p>reduce()에 대해 알아보자..</p><h2 id="Array-reduce"><a href="#Array-reduce" class="headerlink" title="Array.reduce()"></a>Array.reduce()</h2><blockquote><p>배열의 각 요소에 대해 주어진 리듀서(reducer)함수를 실행하고, 하나의 결과값을 반환한다</p></blockquote><p>말이 어렵다..</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">reduce</span>(callback[, initialValue])</span><br></pre></td></tr></table></figure><h3 id="사용-방법"><a href="#사용-방법" class="headerlink" title="사용 방법"></a>사용 방법</h3><p>reduce()에는 누산기가 포함되어 있기 때문에, 배열의 각 요소에 대해 함수를 실행하고 누적된 값을 출력할때 용이하다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">const</span> result = numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur, idx</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> acc + cur </span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><p>예제에서 initialValue 를 0 으로 주었기 때문에 초기값이 0부터 시작해서 하나씩 누적 시켜 나간다<br>0+1+2+3+4+5 &#x3D; 15</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">const</span> result = numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur, idx</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> acc + cur </span><br><span class="line">&#125;,<span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// 25</span></span><br></pre></td></tr></table></figure><p>initialValue 를 10 으로 주었기 때문에 초기값이 10부터 시작해서 하나씩 누적 시켜 나간다<br>10+1+2+3+4+5 &#x3D; 15</p><h3 id="reduce-의-콜백-함수는-4가지-인수를-받는다"><a href="#reduce-의-콜백-함수는-4가지-인수를-받는다" class="headerlink" title="reduce()의 콜백 함수는 4가지 인수를 받는다"></a>reduce()의 콜백 함수는 4가지 인수를 받는다</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. accumulator</span><br><span class="line">    - 누산기, 콜백의 반환값을 누적시킨다. initialValue를 제공했을때는 initialValue의 값이다</span><br><span class="line">2. currentValue</span><br><span class="line">  - 처리할 현재 요소</span><br><span class="line">3. currentIndex (optional)</span><br><span class="line">    - 처리할 현재 요소의 인덱스 </span><br><span class="line">4. array (optional)</span><br><span class="line">  - reduce()를 호출한 배열</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/JavaScript/">JavaScript</category>
      
      <category domain="https://sacultang.github.io/categories/Web/JavaScript/algorithm/">algorithm</category>
      
      
      <category domain="https://sacultang.github.io/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://sacultang.github.io/tags/algorithm/">algorithm</category>
      
      
      <comments>https://sacultang.github.io/2022/04/29/%EC%97%86%EB%8A%94-%EC%88%AB%EC%9E%90-%EB%8D%94%ED%95%98%EA%B8%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>React 기초</title>
      <link>https://sacultang.github.io/2022/04/28/React-%EA%B8%B0%EC%B4%88/</link>
      <guid>https://sacultang.github.io/2022/04/28/React-%EA%B8%B0%EC%B4%88/</guid>
      <pubDate>Thu, 28 Apr 2022 08:34:20 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;React&quot;&gt;&lt;a href=&quot;#React&quot; class=&quot;headerlink&quot; title=&quot;React&quot;&gt;&lt;/a&gt;React&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;유저 인터페이스를 만들기위한 자바스크립트 라이브러리(library)&lt;/li&gt;
&lt;li&gt;Component based Development&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Component&quot;&gt;&lt;a href=&quot;#Component&quot; class=&quot;headerlink&quot; title=&quot;Component&quot;&gt;&lt;/a&gt;Component&lt;/h2&gt;&lt;p&gt;Component Tree &amp;#x3D;&amp;gt; DOM Tree&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DOM과는 다르게 Component 내장되어 있는 태그들을 조합하고 스타일,동작등을 한 번에 다루는 형태를 만든 다음 재활용하는 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Virtual-DOM&quot;&gt;&lt;a href=&quot;#Virtual-DOM&quot; class=&quot;headerlink&quot; title=&quot;Virtual DOM ?&quot;&gt;&lt;/a&gt;Virtual DOM ?&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;DOM을 직접 제어하는 경우&lt;ul&gt;
&lt;li&gt;바뀐 부분만 정확히 바꿔야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DOM을 직접 제어하지 않는 경우&lt;ul&gt;
&lt;li&gt;가상의 돔 트리를 사용해서 이정 상태와 이후 상태를 비교하여, 바뀐 부분을 찾아내서 자동으로 바꾼다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;CSR(React Client Side Rendering)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JS가 전부 다운로드 되어 리액트 애플리케이션이 정상 실행되기 전까지는 화면이 보이지 않음.&lt;/li&gt;
&lt;li&gt;JS가 전부 다운로드 되어 리액트 애플리케이션이 정상 실행된 후, 화면이 보이면서 유저가 인터렉션 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;SSR(React Server Side Rendering)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JS가 전부 다운로드 되지 않아도, 일단 화면은 보이지만 유저가 사용 할 수 없음.&lt;/li&gt;
&lt;li&gt;JS가 전부 다운로드 되어 리액트 애플리케이션이 정상 실행된 후, 유저가 사용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><ul><li>유저 인터페이스를 만들기위한 자바스크립트 라이브러리(library)</li><li>Component based Development</li></ul><h2 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h2><p>Component Tree &#x3D;&gt; DOM Tree</p><ul><li>DOM과는 다르게 Component 내장되어 있는 태그들을 조합하고 스타일,동작등을 한 번에 다루는 형태를 만든 다음 재활용하는 방식</li></ul><h3 id="Virtual-DOM"><a href="#Virtual-DOM" class="headerlink" title="Virtual DOM ?"></a>Virtual DOM ?</h3><ul><li>DOM을 직접 제어하는 경우<ul><li>바뀐 부분만 정확히 바꿔야 한다.</li></ul></li><li>DOM을 직접 제어하지 않는 경우<ul><li>가상의 돔 트리를 사용해서 이정 상태와 이후 상태를 비교하여, 바뀐 부분을 찾아내서 자동으로 바꾼다</li></ul></li></ul><blockquote><p>CSR(React Client Side Rendering)</p><ul><li>JS가 전부 다운로드 되어 리액트 애플리케이션이 정상 실행되기 전까지는 화면이 보이지 않음.</li><li>JS가 전부 다운로드 되어 리액트 애플리케이션이 정상 실행된 후, 화면이 보이면서 유저가 인터렉션 가능</li></ul></blockquote><blockquote><p>SSR(React Server Side Rendering)</p><ul><li>JS가 전부 다운로드 되지 않아도, 일단 화면은 보이지만 유저가 사용 할 수 없음.</li><li>JS가 전부 다운로드 되어 리액트 애플리케이션이 정상 실행된 후, 유저가 사용 가능</li></ul></blockquote><span id="more"></span><h3 id="리액트가-하는-일"><a href="#리액트가-하는-일" class="headerlink" title="리액트가 하는 일"></a>리액트가 하는 일</h3><p>리액트의 핵심 모듈 2개로 리액트가 하는 일 알아보기</p><blockquote><p>만들어진 리액트 컴포넌트를 실제 HTMLElement에 연결할 때 ReactDOM 라이브러리를 이용한다</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 리액트 컴포넌트 =&gt; HTMLElement 연결하기</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 리액트 컴포넌트 만들기</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Hooks-이전"><a href="#Hooks-이전" class="headerlink" title="Hooks 이전"></a>Hooks 이전</h3><p>Hook이라는 기술이 나오기 전까지와 나온 후의 컴포넌트 작성법의 기준이 다르다</p><ul><li>컴포넌트 내부에 상태가 있다면?<ul><li>class</li></ul></li><li>컴포넌트 내부에 상태가 없다면?<ul><li>라이프사이클을 사용해야 한다면?<ul><li>class</li></ul></li><li>라이프사이클에 관계 없다면?<ul><li>function</li></ul></li></ul></li></ul><h3 id="Hooks-이후"><a href="#Hooks-이후" class="headerlink" title="Hooks 이후"></a>Hooks 이후</h3><ul><li>class<ul><li>React안의 Component 클래스를 상속받아 사용한다</li><li>render() 함수를 사용해야 한다</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 정의</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// React안의 Component 클래스를 상속 받는다</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// class 컴포넌트는 render() 메소드를 꼭 정의 해야 한다</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* prettier-ignore */</span></span><br><span class="line"><span class="comment">// 사용</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>( <span class="comment">// 첫번째인자 &lt;컴포넌트&gt;, 두번째 사용될 곳</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ClassComponent</span> /&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>function</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 정의 1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">FunctionComponent</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 정의 2</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">FunctionComponent</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 사용</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">FunctionComponent</span> /&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="React-createElement로-컴포넌트-만들기"><a href="#React-createElement로-컴포넌트-만들기" class="headerlink" title="React.createElement로 컴포넌트 만들기"></a>React.createElement로 컴포넌트 만들기</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">  첫 번째 인자 : type, <span class="comment">// 태그 이름 문자열 | 리액트 컴포넌트 | React.Fragment,</span></span><br><span class="line">  두 번째 인자 : [props], <span class="comment">// 리액트 컴포넌트에 넣어주는 데이터 객체</span></span><br><span class="line">  세 번째 인자 : [...children] <span class="comment">// 자식으로 넣어주는 요소들 (여러개 가능)</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// type 1. 태그 이름 문자열</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">createElement</span>( <span class="comment">// React.createElement = Component생성</span></span><br><span class="line">    <span class="string">&#x27;h1&#x27;</span>,</span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&#x27;`type 이 &quot;태그 이름 문자열&quot; 입니다.`&#x27;</span></span><br><span class="line">  ),</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// type 2. 리액트 컴포넌트</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Component</span> = (<span class="params"></span>) =&gt; &#123; <span class="comment">// 컴포넌트 생성</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">    <span class="string">&#x27;p&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;null&#x27;</span>,</span><br><span class="line">    <span class="string">`type 이 &quot;React 컴포넌트&quot; 입니다.`</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="title class_">Component</span>,<span class="literal">null</span>,<span class="literal">null</span>), <span class="comment">// 첫 번째 인자로 컴포넌트를 넣어준다</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// type 3. React.Fragment</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">    <span class="title class_">React</span>.<span class="property">Fragment</span>,</span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    <span class="string">`type이 &quot;React Fragment&quot; 입니다.`</span></span><br><span class="line">    <span class="string">`type이 &quot;React Fragment&quot; 입니다.`</span></span><br><span class="line">    <span class="string">`type이 &quot;React Fragment&quot; 입니다.`</span></span><br><span class="line">  ),</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 복잡한 리액트 엘리먼트 모임</span></span><br><span class="line"><span class="comment">// createElement로 만들기에는 어려움이 있다</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">    <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">      <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">      <span class="literal">null</span>,</span><br><span class="line">      <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;주제&#x27;</span>),</span><br><span class="line">      <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">        <span class="string">&#x27;ul&#x27;</span>,</span><br><span class="line">        <span class="literal">null</span>,</span><br><span class="line">        <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;React&#x27;</span>),</span><br><span class="line">        <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;vue&#x27;</span>)</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">  ),</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>JSX 문법으로 작성된 코드는 순수한 JavaScript로 컴파일 하여 사용한다.<br>&#x3D;&gt; babel</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">a</span>=<span class="string">&#x27;a&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    // Type부분</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      // children 부분</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>주제<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>React<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">)</span><br><span class="line"><span class="comment">// babel로 순수한 Javascript로 컴파일 해준다</span></span><br></pre></td></tr></table></figure><h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><ul><li>가독성이 좋다</li><li>babel과 같은 컴파일 과정에서 문법적 오류를 인지하기 쉬움</li></ul><h3 id="JSX-문법"><a href="#JSX-문법" class="headerlink" title="JSX 문법"></a>JSX 문법</h3><ul><li>최상위 요소가 하나여야 한다.</li><li>최상위 요소 리턴하는 경우, ()로 감싸야 한다</li><li>자식들을 바로 렌더링 하고 싶으면,&lt;&gt;자식들&lt;&#x2F;&gt;를 사용한다 &#x3D;&gt; Fragment</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    // 최상위 요소로 사용 할 수 있다</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>주제<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>제목<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>자바스크립트 표현식을 사용하려면, {표현식}을 이용한다</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> title = <span class="string">&#x27;주제&#x27;</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;title&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>if 문은 사용할 수 없다<ul><li>삼항연산자 혹은 &amp;&amp;을 사용한다</li></ul></li><li>style을 이용해 인라인 스타일링이 가능하다</li><li>class 대신 className을 사용해 class를 적용할 수 있다</li><li>자식요소가 있으면, 꼭 닫아야 하고, 자식요소가 없으면 열면서 닫아야 한다<ul><li>&lt;p&gt;hello&lt;&#x2F;p&gt;</li><li>&lt;br&#x2F;&gt;</li></ul></li></ul><h2 id="Props와-State"><a href="#Props와-State" class="headerlink" title="Props와 State"></a>Props와 State</h2><ul><li>Props는 컴포넌트 외부에서 컴포넌트에게 주는 데이터.</li><li>State는 컴포넌트 내부에서 변경할 수 있는 데이터.</li><li>둘 다 변경이 발생하면, 렌더가 다시 일어날 수 있다</li></ul><h3 id="Render-함수"><a href="#Render-함수" class="headerlink" title="Render 함수"></a>Render 함수</h3><ul><li>Props와 State를 바탕으로 컴포넌트를 그린다</li><li>Props와 State가 변경되면, 컴포넌트를 다시 그린다</li><li>컴포넌트를 그리는 방법을 기술하는 함수가 렌더 함수</li></ul><h3 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h3><p>함수로 만든 컴포넌트</p><ul><li>props는 컴포넌트의 인자로 받는다</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &#123;message: &#x27;안녕하세요&#x27;&#125;의 형태로 props에 들어오게 된다.</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;props.message&#125; 이것은 함수로 만든 컴포넌트 입니다.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Component</span> <span class="attr">message</span>=<span class="string">&#x27;안녕하세요&#x27;</span> /&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>클래스로 만든 컴포넌트</p><ul><li>클래스 컴포넌트에서는 this로 props를 받는다</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Component</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.props.message&#125; 이것은 클래스로 만든 컴포넌트 입니다.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Component</span> <span class="attr">message</span>=<span class="string">&#x27;안녕하세요!!&#x27;</span> /&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="defaultProps"><a href="#defaultProps" class="headerlink" title="defaultProps"></a>defaultProps</h3><ul><li>props의 기본값을 쓰고 싶을때</li><li>직접 지정하면 지정한 값이 들어간다</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Component</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.props.message&#125; 이것은 클래스로 만든 컴포넌트 입니다.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    <span class="comment">// 클래스 문법을 이용한 방법</span></span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;클래스 컴포넌트에서만 쓸수있다&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Component</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">  <span class="comment">// 클래스 컴포넌트 와 함수 컴포넌트 모두 사용 할 수 있다</span></span><br><span class="line">  <span class="attr">message</span>: <span class="string">&#x27;기본값&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Component</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><ul><li>state는 객체여야한다</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 클래스 컴포넌트에서 state 사용법</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Component</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// 방법 1</span></span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 방법 2</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.props.message&#125; 이것은 클래스로 만든 컴포넌트 입니다.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Event-Hnadling"><a href="#Event-Hnadling" class="headerlink" title="Event Hnadling"></a>Event Hnadling</h3><ul><li>HTML DOM에 클릭하면 이벤트가 발생하고, 발생하면 그에 맞는 변경이 일어나도록 해야한다</li><li>JSX에 이벤트를 설정할 수 있다.</li><li>camelCase 로만 사용할 수 있다<ul><li>onClick, onMouseEnter</li></ul></li><li>이벤트에 연결된 자바스크립트 코드는 함수이다<ul><li>이벤트 &#x3D; {함수}와 같이 쓴다</li></ul></li><li>실제 DOM 요소들에만 사용 가능하다<ul><li>리액트 컴포넌트에 사용하면, 그냥 Props로 전달한다</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 인라인으로 이벤트 핸들링</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Comp</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            // camelCase로 이벤트 작성해줘야 한다</span></span><br><span class="line"><span class="language-xml">            this.setState((state) =&gt; (&#123;</span></span><br><span class="line"><span class="language-xml">              ...state,</span></span><br><span class="line"><span class="language-xml">              count: state.count + 1,</span></span><br><span class="line"><span class="language-xml">            &#125;))</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        &gt;</span></span><br><span class="line"><span class="language-xml">          클릭</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Comp</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 메소드를 따로 빼줬을때</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Comp</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.click&#125;</span>&gt;</span>클릭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  click = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">      ...state,</span><br><span class="line">      <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Comp</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="Component-Lifecycle"><a href="#Component-Lifecycle" class="headerlink" title="Component Lifecycle"></a>Component Lifecycle</h2><p>리액트 컴포넌트는 탄생부터 죽음까지 여러지점에서 개발자가 작업이 가능하도록 메서드를 오버라이딩 할 수 있게 해준다.<br>v16.3 이전과 이후로 몇 개의 메서드가 이름이 달라졌다</p><h3 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h3><pre><code>- setup props and state</code></pre><h3 id="Mounting"><a href="#Mounting" class="headerlink" title="Mounting"></a>Mounting</h3><pre><code>1. v16.3 이전: componentWillMount =&gt; v16.3 이후: static getDerivedStateFromProps(nextProps, prevState),2. render (최초로 브라우저에 그려짐)3. componentDidMount</code></pre><h3 id="Updation-props가-바뀌거나-state가-바뀌는-것"><a href="#Updation-props가-바뀌거나-state가-바뀌는-것" class="headerlink" title="Updation - props가 바뀌거나 state가 바뀌는 것"></a>Updation - props가 바뀌거나 state가 바뀌는 것</h3><ul><li><p>props</p><pre><code>  1. v16.3 이전: componentWillReceiveProps - props일 경우에만 붙는다  =&gt; v16.3 이후: getDerivedStateFromProps  2. shouldComponentUpdate - 컴포넌트가 업데이트 되어야 하는지 아닌지 결정하는 구간 true,false, 불필요하게 렌더되는걸 방지하기 위해 필요하다  3. v16.3 이전: componentWillUpdate =&gt;  v16.3 이후: getSnapshotBeforeUpdate  4. render  5. componentDidUpdate</code></pre></li><li><p>state</p><pre><code>  1. shouldComponentUpdate  2. v16.3 이전: componentWillUpdate =&gt;  v16.3 이후: getSnapshotBeforeUpdate  3. render  4. componentDidUpdate</code></pre></li></ul><h3 id="Unmounting"><a href="#Unmounting" class="headerlink" title="Unmounting"></a>Unmounting</h3><pre><code>- componentWillUnmount</code></pre>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/React/">React</category>
      
      
      <category domain="https://sacultang.github.io/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://sacultang.github.io/tags/React/">React</category>
      
      
      <comments>https://sacultang.github.io/2022/04/28/React-%EA%B8%B0%EC%B4%88/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JS-ImageSlider</title>
      <link>https://sacultang.github.io/2022/04/27/JS-ImageSlider/</link>
      <guid>https://sacultang.github.io/2022/04/27/JS-ImageSlider/</guid>
      <pubDate>Wed, 27 Apr 2022 11:50:55 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;무한-루프-이미지-슬라이더&quot;&gt;&lt;a href=&quot;#무한-루프-이미지-슬라이더&quot; class=&quot;headerlink&quot; title=&quot;무한 루프 이미지 슬라이더&quot;&gt;&lt;/a&gt;무한 루프 이미지 슬라이더&lt;/h1&gt;&lt;h2 id=&quot;이미지-슬라이더에-대한-이해&quot;&gt;&lt;a href=&quot;#이미지-슬라이더에-대한-이해&quot; class=&quot;headerlink&quot; title=&quot;이미지 슬라이더에 대한 이해&quot;&gt;&lt;/a&gt;이미지 슬라이더에 대한 이해&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;이미지가 실제 보이는 div가 있다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;그 안에 ul로 감싸진 실제 이미지들(li)이 일렬로 정렬되어 있다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ul의 포지션이 움직이면서 다음이나 전의 이미지가 보여진다&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/./images/slide_img1.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;HTML-구조&quot;&gt;&lt;a href=&quot;#HTML-구조&quot; class=&quot;headerlink&quot; title=&quot;HTML 구조&quot;&gt;&lt;/a&gt;HTML 구조&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;kind_wrap&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;kind_slider&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;slider&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;https://via.placeholder.com/800x200.png?text=A&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;https://via.placeholder.com/800x200.png?text=B&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;https://via.placeholder.com/800x200.png?text=C&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;https://via.placeholder.com/800x200.png?text=D&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;arrow&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;javascript:void(0)&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;prev&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;이전&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;javascript:void(0)&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;next&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;다음&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;style&quot;&gt;&lt;a href=&quot;#style&quot; class=&quot;headerlink&quot; title=&quot;style&quot;&gt;&lt;/a&gt;style&lt;/h2&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;* &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;li&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;list-style&lt;/span&gt;: none;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.kind_wrap&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2px&lt;/span&gt; solid black;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;max-width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;800px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: relative;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.kind_wrap&lt;/span&gt; &amp;gt; &lt;span class=&quot;selector-class&quot;&gt;.kind_slider&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;overflow&lt;/span&gt;: hidden;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.kind_wrap&lt;/span&gt; &amp;gt; &lt;span class=&quot;selector-class&quot;&gt;.kind_slider&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.slider&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: relative;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.kind_wrap&lt;/span&gt; &amp;gt; &lt;span class=&quot;selector-class&quot;&gt;.kind_slider&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.slider&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;li&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.kind_wrap&lt;/span&gt; &amp;gt; &lt;span class=&quot;selector-class&quot;&gt;.kind_slider&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;img&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;vertical-align&lt;/span&gt;: top;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.kind_wrap&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.arrow&lt;/span&gt; &amp;gt; &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.prev&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;left&lt;/span&gt;: -&lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.kind_wrap&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.arrow&lt;/span&gt; &amp;gt; &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.next&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;right&lt;/span&gt;: -&lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="무한-루프-이미지-슬라이더"><a href="#무한-루프-이미지-슬라이더" class="headerlink" title="무한 루프 이미지 슬라이더"></a>무한 루프 이미지 슬라이더</h1><h2 id="이미지-슬라이더에-대한-이해"><a href="#이미지-슬라이더에-대한-이해" class="headerlink" title="이미지 슬라이더에 대한 이해"></a>이미지 슬라이더에 대한 이해</h2><ol><li><p>이미지가 실제 보이는 div가 있다</p></li><li><p>그 안에 ul로 감싸진 실제 이미지들(li)이 일렬로 정렬되어 있다</p></li><li><p>ul의 포지션이 움직이면서 다음이나 전의 이미지가 보여진다</p><p><img src="/./images/slide_img1.png"></p></li></ol><h2 id="HTML-구조"><a href="#HTML-구조" class="headerlink" title="HTML 구조"></a>HTML 구조</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;kind_wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;kind_slider&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;slider&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://via.placeholder.com/800x200.png?text=A&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://via.placeholder.com/800x200.png?text=B&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://via.placeholder.com/800x200.png?text=C&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://via.placeholder.com/800x200.png?text=D&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;arrow&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> <span class="attr">class</span>=<span class="string">&quot;prev&quot;</span>&gt;</span>이전<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> <span class="attr">class</span>=<span class="string">&quot;next&quot;</span>&gt;</span>다음<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="style"><a href="#style" class="headerlink" title="style"></a>style</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.kind_wrap</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.kind_wrap</span> &gt; <span class="selector-class">.kind_slider</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.kind_wrap</span> &gt; <span class="selector-class">.kind_slider</span> <span class="selector-class">.slider</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.kind_wrap</span> &gt; <span class="selector-class">.kind_slider</span> <span class="selector-class">.slider</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.kind_wrap</span> &gt; <span class="selector-class">.kind_slider</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.kind_wrap</span> <span class="selector-class">.arrow</span> &gt; <span class="selector-tag">a</span><span class="selector-class">.prev</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.kind_wrap</span> <span class="selector-class">.arrow</span> &gt; <span class="selector-tag">a</span><span class="selector-class">.next</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><ul><li>실제 보여지는 화면인 div.kind_wrap에만 최대 넓이 값이 들어있고<br>ul 이나 li에는 사이즈가 없다</li><li>ul의 width 값은 이미지(li)의 갯수에 의해 정해진다 (ul의 width값이 변할수 있다)</li><li>이미지(li)의 사이즈 역시 변할수 있다</li><li>자바스크립트에서 li의 사이즈를 구하고 li의 갯수만큼 ul의 사이즈를 구해서 스타일에 넣어준다</li></ul><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ol><li>각 노드들을 가져온다</li><li>li의 width 값을 구해준다</li><li>li의 갯수만큼 ul의 width값도 구해준다</li><li>ul의 width 값을 설정해 준다</li></ol><h3 id="노드-준비"><a href="#노드-준비" class="headerlink" title="노드 준비"></a>노드 준비</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 노드 준비</span></span><br><span class="line"><span class="keyword">const</span> kindWrap = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.kind_wrap&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> slider = kindWrap.<span class="title function_">querySelector</span>(<span class="string">&#x27;.slider&#x27;</span>) <span class="comment">// ul</span></span><br><span class="line"><span class="keyword">const</span> slideLis = slider.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>) <span class="comment">//li를 배열로 받아온다</span></span><br><span class="line"><span class="keyword">const</span> arrow = kindWrap.<span class="title function_">querySelector</span>(<span class="string">&#x27;.arrow&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// CSSOM 셋업</span></span><br><span class="line"><span class="keyword">const</span> liWidth = slideLis[<span class="number">0</span>].<span class="property">clientWidth</span> <span class="comment">// li 1개의 width</span></span><br><span class="line"><span class="keyword">const</span> sliderWidth = liWidth * slideLis.<span class="property">length</span> <span class="comment">// li의 갯수만큼 width를 곱해준다</span></span><br><span class="line">slider.<span class="property">style</span>.<span class="property">width</span> = sliderWidth + <span class="string">&#x27;px&#x27;</span> <span class="comment">// ul의 width 설정</span></span><br></pre></td></tr></table></figure><ol start="5"><li>버튼에 클릭 이벤트를 줘서 ul의 포지션을 li의 넓이값만큼 움직여 주면 된다.</li><li>버튼을 각각이 아닌 한번에 가져왔기 때문에 if문으로 구별을 해준다</li></ol><h3 id="클릭-이벤트-추가"><a href="#클릭-이벤트-추가" class="headerlink" title="클릭 이벤트 추가"></a>클릭 이벤트 추가</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 클릭 이벤트</span></span><br><span class="line">arrow.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="property">preventDefault</span></span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">className</span> === <span class="string">&#x27;next&#x27;</span>) &#123;</span><br><span class="line">    slider.<span class="property">style</span>.<span class="property">left</span> = <span class="string">`-<span class="subst">$&#123;liWidth&#125;</span>px`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>이렇게까지 작성하고 나면 다음으로 가는 버튼이 작동하지만 한 번만 작동한다<ul><li>slider의 left값이 계속 liWidth 값으로만 되기 때문이다.. 그래서 버튼을 누를때마다 liWidth 값을 누적시켜줄 필요가 있다</li></ul></li><li>그리고 현재 보고 있는 이미지(li)가 몇 번째 이미지 인지 인덱스 값도 설정 해준다</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 노드 준비</span></span><br><span class="line"><span class="keyword">const</span> kindWrap = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.kind_wrap&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> slider = kindWrap.<span class="title function_">querySelector</span>(<span class="string">&#x27;.slider&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> slideLis = slider.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> arrow = kindWrap.<span class="title function_">querySelector</span>(<span class="string">&#x27;.arrow&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// CSSOM 셋업</span></span><br><span class="line"><span class="keyword">const</span> liWidth = slideLis[<span class="number">0</span>].<span class="property">clientWidth</span></span><br><span class="line"><span class="keyword">const</span> sliderWidth = liWidth * slideLis.<span class="property">length</span></span><br><span class="line">slider.<span class="property">style</span>.<span class="property">width</span> = sliderWidth + <span class="string">&#x27;px&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 변수를 추가해준다</span></span><br><span class="line"><span class="keyword">let</span> curIndex = <span class="number">0</span> <span class="comment">// 처음 이미지는 0번째 이미지이기 때문에 0으로 초기화</span></span><br><span class="line"><span class="keyword">let</span> moveDist = <span class="number">0</span> <span class="comment">// liWidth 값이 누적될 변수 처음에는 left 값이 0이므로 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 클릭 이벤트</span></span><br><span class="line">arrow.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="property">preventDefault</span></span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">className</span> === <span class="string">&#x27;next&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// class가 next인것을 클릭하면</span></span><br><span class="line">    <span class="keyword">if</span> (curIndex === slideLis.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 만약 현재인덱스가 마지막 이미지라면</span></span><br><span class="line">      curIndex = <span class="number">0</span> <span class="comment">// 인덱스를 다시 0으로 초기화</span></span><br><span class="line">      moveDist = <span class="number">0</span> <span class="comment">// 이미지가 움직인 값 초기화</span></span><br><span class="line">      slider.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;moveDist&#125;</span>px)`</span> <span class="comment">// slider에 transform 에 움직인 거리값을 초기화 해준다</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 현재 인덱스가 마지막 이미지가 아니면 (0~2 번째 이미지)</span></span><br><span class="line">      moveDist += -liWidth <span class="comment">// 움직일 거리를 누적시켜준다 이때 이미지는 왼쪽으로 이동하므로 -값이 된다</span></span><br><span class="line">      slider.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;moveDist&#125;</span>px)`</span> <span class="comment">// 누적거리를 transform에 적용</span></span><br><span class="line">      curIndex++ <span class="comment">// 인덱스를 1 증가시켜준다</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>넥스트 버튼을 눌렀을때 현재 인덱스가 몇 번째인지에 따라 동작을 추가해준다</li><li>curIndex는 0부터 시작해서 마지막 이미지에 가면 3가 된다</li><li>slideLis의 갯수는 4개 이므로 -1을 해줘야 마지막 숫자가 동일해진다</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 노드 준비</span></span><br><span class="line"><span class="keyword">const</span> kindWrap = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.kind_wrap&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> slider = kindWrap.<span class="title function_">querySelector</span>(<span class="string">&#x27;.slider&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> slideLis = slider.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> arrow = kindWrap.<span class="title function_">querySelector</span>(<span class="string">&#x27;.arrow&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// CSSOM 셋업</span></span><br><span class="line"><span class="keyword">const</span> liWidth = slideLis[<span class="number">0</span>].<span class="property">clientWidth</span></span><br><span class="line"><span class="keyword">const</span> sliderWidth = liWidth * slideLis.<span class="property">length</span></span><br><span class="line">slider.<span class="property">style</span>.<span class="property">width</span> = sliderWidth + <span class="string">&#x27;px&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 변수 초기화</span></span><br><span class="line"><span class="keyword">let</span> curIndex = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> moveDist = <span class="number">0</span></span><br><span class="line"><span class="keyword">const</span> speedTime = <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 클릭 이벤트</span></span><br><span class="line">arrow.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="property">preventDefault</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// next button</span></span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">className</span> === <span class="string">&#x27;next&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (curIndex === slideLis.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">      curIndex = <span class="number">0</span></span><br><span class="line">      moveDist = <span class="number">0</span></span><br><span class="line">      slider.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;moveDist&#125;</span>px)`</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      moveDist += -liWidth</span><br><span class="line">      slider.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;moveDist&#125;</span>px)`</span></span><br><span class="line">      slider.<span class="property">style</span>.<span class="property">transition</span> = <span class="string">`all <span class="subst">$&#123;speedTime&#125;</span>ms ease`</span> <span class="comment">// 이미지가 옆으로 넘어가는 것을 보여주기 위해 transition 속성을 사용한다</span></span><br><span class="line">      curIndex++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// prev button</span></span><br><span class="line">  <span class="comment">// class 가 next가 아닌것을 클릭하면</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (curIndex === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 현재 인덱스가 0이라면 마지막 이미지로 넘어가야한다</span></span><br><span class="line">      curIndex = slideLis.<span class="property">length</span> - <span class="number">1</span> <span class="comment">// curIndex를 마지막 이미지의 index로 할당</span></span><br><span class="line">      moveDist = -(liWidth * curIndex) <span class="comment">// 마지막 imgage의 left 값이므로 넓이*인덱스값</span></span><br><span class="line">      slider.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;moveDist&#125;</span>px)`</span> <span class="comment">// transform 에 실제 적용해주고</span></span><br><span class="line">      slider.<span class="property">style</span>.<span class="property">transition</span> = <span class="string">`all <span class="subst">$&#123;speedTime&#125;</span>ms ease`</span> <span class="comment">// 넘어가는 효과를 위해 transition 설정</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      moveDist += liWidth <span class="comment">// 이미지가 오른쪽으로 이동해야 하므로 -값이 아닌 +값을 누적시켜준다</span></span><br><span class="line">      slider.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;moveDist&#125;</span>px)`</span></span><br><span class="line">      curIndex-- <span class="comment">// 이전 이미지로 이동하므로 인덱스를 1씩 줄여준다</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>이렇게 작성하고 나면 문제점이 하나 생긴다 첫번째 이미지에서 이전을 클릭하거나 마지막 이미지에서 다음을 클릭하면<br>이미지가 역재생(?)되며 돌아간다는 것<br>이걸 자연스럽게 해주기 위해 트릭을 써야한다<br> 첫 번째 이미지와 맨 마지막 이미지를 복제한 후<br><b>1번 앞에는 4번의 복제본을</b><br><b>4번 뒤에는 1번의 복제본을 추가해준다</b><br><img src="/./images/slide_img2.png"></p><p>이 상황에서 4번 이미지일때 다음을 클릭하게 되면 1번 복제본으로 넘어가는 애니메이션 (transition)을 500ms동안 수행한다.<br>그리고나서 수행이 끝나자마자 원본 이미지인 1번 이미지로 위치를 이동 시킨다.</p><h3 id="이미지-클론"><a href="#이미지-클론" class="headerlink" title="이미지 클론"></a>이미지 클론</h3><blockquote><p>첫 번째 이미지는 slideLis[0]으로 직접 지정해 복제해도 상관 없지만,<br>마지막 이미지는 나중에 이미지가 추가 될 경우를 대비해 배열의 길이에서 -1만큼을 뺀 값으로 지정해 복제해준다</p></blockquote><p>inserBefore(‘추가할노드’,’추가 할 위치’)는 ‘추가 할 위치’의 앞 쪽으로 추가하는 메소드<br>appendChild(‘추가할노드’)는 그냥 맨 뒤쪽으로 추가된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 노드 준비</span></span><br><span class="line"><span class="keyword">const</span> kindWrap = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.kind_wrap&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> slider = kindWrap.<span class="title function_">querySelector</span>(<span class="string">&#x27;.slider&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> slideLis = slider.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> arrow = kindWrap.<span class="title function_">querySelector</span>(<span class="string">&#x27;.arrow&#x27;</span>)</span><br><span class="line"><span class="comment">// 1번과 4번을 복제(clone)해준다</span></span><br><span class="line"><span class="keyword">const</span> cloneA = slideLis[<span class="number">0</span>].<span class="title function_">cloneNode</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">const</span> cloneD = slideLis[slideLis.<span class="property">length</span> - <span class="number">1</span>].<span class="title function_">cloneNode</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="comment">// 복제한 노드를 원래의 li 앞,뒤로 추가해준다</span></span><br><span class="line">slider.<span class="title function_">insertBefore</span>(cloneD, slideLis[<span class="number">0</span>])</span><br><span class="line">slider.<span class="title function_">appendChild</span>(cloneA)</span><br></pre></td></tr></table></figure><p><img src="/./images/slide_img3.png"></p><p>복제한 이미지를 추가하고 나면 화면이 이렇게 이상해진다..<br>그 이유는 복제해서 넣기전의 넓이 값을 먼저 가지기 때문이다<br>그래서 복제한후의 넓이값을 다시 구해줘야한다!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 노드 준비</span></span><br><span class="line"><span class="keyword">const</span> kindWrap = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.kind_wrap&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> slider = kindWrap.<span class="title function_">querySelector</span>(<span class="string">&#x27;.slider&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> slideLis = slider.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> arrow = kindWrap.<span class="title function_">querySelector</span>(<span class="string">&#x27;.arrow&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> cloneA = slideLis[<span class="number">0</span>].<span class="title function_">cloneNode</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">const</span> cloneC = slideLis[slideLis.<span class="property">length</span> - <span class="number">1</span>].<span class="title function_">cloneNode</span>(<span class="literal">true</span>)</span><br><span class="line">slider.<span class="title function_">insertBefore</span>(cloneC, slideLis[<span class="number">0</span>])</span><br><span class="line">slider.<span class="title function_">appendChild</span>(cloneA)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 변수 초기화</span></span><br><span class="line"><span class="keyword">let</span> curIndex = <span class="number">1</span> <span class="comment">// 복제를 해 넣고나면 처음으로 보여줄 이미지의 인덱스는 1이 된다</span></span><br><span class="line"><span class="keyword">let</span> moveDist = <span class="number">0</span></span><br><span class="line"><span class="keyword">const</span> speedTime = <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CSSOM 셋업</span></span><br><span class="line"><span class="keyword">const</span> slideCloneLis = slider.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>) <span class="comment">// 클론 복재후 li들을 다시 변수에 저장한다</span></span><br><span class="line"><span class="keyword">const</span> liWidth = slideLis[<span class="number">0</span>].<span class="property">clientWidth</span></span><br><span class="line"><span class="keyword">const</span> sliderWidth = liWidth * slideCloneLis.<span class="property">length</span> <span class="comment">// 복제한 길이로 ul의 넓이 값을 다시 지정한다</span></span><br><span class="line">slider.<span class="property">style</span>.<span class="property">width</span> = sliderWidth + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">moveDist = -liWidth <span class="comment">// 첫 번째 이미지가 보여야하므로 -liWidth 값으로 재할당 해준다</span></span><br></pre></td></tr></table></figure><p>setTimeout()을 이용해 마지막 이미지에 가서 버튼을 클릭했을때 transition 효과를 0초로 설정하여<br>넘어가는 이미지효과를 제거한후 이동하는 방식이다</p><h3 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h3><ol><li>처음으로 보여줄 이미지가 사실상 두 번째에 있으므로 포지션 초기값을 다시 설정해준다</li><li>버튼을 눌렀을 경우 이미지가 계속 넘어가도록 해준다</li><li>setTimeout()함수로 이미지의 위치를 자연스럽게 교체해준다</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 노드셋업</span></span><br><span class="line"><span class="keyword">const</span> kindWrap = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.kind_wrap&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> slider = kindWrap.<span class="title function_">querySelector</span>(<span class="string">&#x27;.slider&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> slideLis = slider.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> arrow = kindWrap.<span class="title function_">querySelector</span>(<span class="string">&#x27;.arrow&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cloneA = slideLis[<span class="number">0</span>].<span class="title function_">cloneNode</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">const</span> cloneC = slideLis[slideLis.<span class="property">length</span> - <span class="number">1</span>].<span class="title function_">cloneNode</span>(<span class="literal">true</span>)</span><br><span class="line">slider.<span class="title function_">insertBefore</span>(cloneC, slideLis[<span class="number">0</span>])</span><br><span class="line">slider.<span class="title function_">appendChild</span>(cloneA)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 변수 초기화</span></span><br><span class="line"><span class="keyword">let</span> curIndex = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> moveDist = <span class="number">0</span></span><br><span class="line"><span class="keyword">const</span> speedTime = <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CSSOM 셋업</span></span><br><span class="line"><span class="keyword">const</span> slideCloneLis = slider.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> liWidth = slideLis[<span class="number">0</span>].<span class="property">clientWidth</span></span><br><span class="line"><span class="keyword">const</span> sliderWidth = liWidth * slideCloneLis.<span class="property">length</span></span><br><span class="line">slider.<span class="property">style</span>.<span class="property">width</span> = sliderWidth + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">slider.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(-<span class="subst">$&#123;liWidth&#125;</span>px)`</span></span><br><span class="line">moveDist = -liWidth</span><br><span class="line"></span><br><span class="line">arrow.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="property">preventDefault</span></span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">className</span> === <span class="string">&#x27;next&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// if 실행문이 변경됐다 마지막인덱스에 갔을때 멈추는게 아니라 계속 넘어가도록 실행문을 작성한다</span></span><br><span class="line">    moveDist += -liWidth</span><br><span class="line">    curIndex += <span class="number">1</span></span><br><span class="line">    slider.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;moveDist&#125;</span>px)`</span></span><br><span class="line">    slider.<span class="property">style</span>.<span class="property">transition</span> = <span class="string">`all <span class="subst">$&#123;speedTime&#125;</span>ms ease-in-out`</span></span><br><span class="line">    <span class="keyword">if</span> (curIndex === slideCloneLis.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 마지막 인덱스에 갔을때 setTimeout()함수를 실행한다</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        slider.<span class="property">style</span>.<span class="property">transition</span> = <span class="string">&#x27;all 0ms&#x27;</span> <span class="comment">// transition 효과를 없애주고</span></span><br><span class="line">        moveDist = -liWidth <span class="comment">// 처음의 포지션값으로 돌려준다</span></span><br><span class="line">        curIndex = <span class="number">1</span> <span class="comment">// index값도 1로 재할당</span></span><br><span class="line">        slider.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;moveDist&#125;</span>px)`</span> <span class="comment">// css에 적용해준다</span></span><br><span class="line">      &#125;, speedTime)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    moveDist += liWidth</span><br><span class="line">    curIndex += -<span class="number">1</span></span><br><span class="line">    slider.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;moveDist&#125;</span>px)`</span></span><br><span class="line">    slider.<span class="property">style</span>.<span class="property">transition</span> = <span class="string">`all <span class="subst">$&#123;speedTime&#125;</span>ms ease-in-out`</span></span><br><span class="line">    <span class="keyword">if</span> (curIndex === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        slider.<span class="property">style</span>.<span class="property">transition</span> = <span class="string">&#x27;all 0ms&#x27;</span> <span class="comment">// transition 효과를 없애준다</span></span><br><span class="line">        moveDist = -liWidth * (slideCloneLis.<span class="property">length</span> - <span class="number">2</span>) <span class="comment">// 포지션을 값을 정해준다</span></span><br><span class="line">        curIndex = slideCloneLis.<span class="property">length</span> - <span class="number">2</span> <span class="comment">// index 값 재할당</span></span><br><span class="line">        slider.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;moveDist&#125;</span>px)`</span> <span class="comment">// css에 적용</span></span><br><span class="line">      &#125;, speedTime)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>prev 버튼을 눌렀을시 헷갈린점<ol><li>moveDist 값이 원래의 4번 위치로 가야한다</li><li>curIndex도 4번이어야한다</li></ol></li><li>현재 이미지의 갯수는 6개이고 원래의 4번이미지의 curIndex 값은 4번이므로 배열의 길이에서 클론한 li의 갯수만큼 빼준다</li></ul><h3 id="코드-정리"><a href="#코드-정리" class="headerlink" title="코드 정리"></a>코드 정리</h3><p>코드가 길어지고 반복되는 요소가 있으므로 함수로 만들어 코드를 정리해준다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  노드 준비</span></span><br><span class="line"><span class="keyword">const</span> kindWrap = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.kind_wrap&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> slider = kindWrap.<span class="title function_">querySelector</span>(<span class="string">&#x27;.slider&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> slideLis = slider.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> arrow = kindWrap.<span class="title function_">querySelector</span>(<span class="string">&#x27;.arrow&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> cloneA = slideLis[<span class="number">0</span>].<span class="title function_">cloneNode</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">const</span> cloneC = slideLis[slideLis.<span class="property">length</span> - <span class="number">1</span>].<span class="title function_">cloneNode</span>(<span class="literal">true</span>)</span><br><span class="line">slider.<span class="title function_">insertBefore</span>(cloneC, slideLis[<span class="number">0</span>])</span><br><span class="line">slider.<span class="title function_">appendChild</span>(cloneA)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 변수 초기화</span></span><br><span class="line"><span class="keyword">let</span> curIndex = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> moveDist = <span class="number">0</span></span><br><span class="line"><span class="keyword">const</span> speedTime = <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CSSOM 셋업</span></span><br><span class="line"><span class="keyword">const</span> slideCloneLis = slider.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> liWidth = slideLis[<span class="number">0</span>].<span class="property">clientWidth</span></span><br><span class="line"><span class="keyword">const</span> sliderWidth = liWidth * slideCloneLis.<span class="property">length</span></span><br><span class="line">slider.<span class="property">style</span>.<span class="property">width</span> = sliderWidth + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">moveDist = -liWidth</span><br><span class="line">slider.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(-<span class="subst">$&#123;liWidth&#125;</span>px)`</span></span><br><span class="line"></span><br><span class="line">arrow.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="property">preventDefault</span></span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">className</span> === <span class="string">&#x27;next&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">move</span>(-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> (curIndex === slideCloneLis.<span class="property">length</span> - <span class="number">1</span>) <span class="title function_">moveTimeOut</span>(<span class="number">1</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">move</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> (curIndex === <span class="number">0</span>) <span class="title function_">moveTimeOut</span>(slideCloneLis.<span class="property">length</span> - <span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">move</span>(<span class="params">direction</span>) &#123;</span><br><span class="line">  moveDist += liWidth * direction</span><br><span class="line">  curIndex += -<span class="number">1</span> * direction</span><br><span class="line">  slider.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;moveDist&#125;</span>px)`</span></span><br><span class="line">  slider.<span class="property">style</span>.<span class="property">transition</span> = <span class="string">`all <span class="subst">$&#123;speedTime&#125;</span>ms ease-in-out`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">moveTimeOut</span>(<span class="params">index</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    slider.<span class="property">style</span>.<span class="property">transition</span> = <span class="string">&#x27;all 0ms&#x27;</span></span><br><span class="line">    moveDist = -liWidth * index</span><br><span class="line">    curIndex = index</span><br><span class="line">    slider.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;moveDist&#125;</span>px)`</span></span><br><span class="line">  &#125;, speedTime)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://sacultang.github.io/categories/Web/">Web</category>
      
      <category domain="https://sacultang.github.io/categories/Web/JavaScript/">JavaScript</category>
      
      
      <category domain="https://sacultang.github.io/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://sacultang.github.io/tags/css/">css</category>
      
      <category domain="https://sacultang.github.io/tags/HTML/">HTML</category>
      
      
      <comments>https://sacultang.github.io/2022/04/27/JS-ImageSlider/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
